                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module Main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _T0_Routine
                                     12 	.globl _main
                                     13 	.globl _delay_key
                                     14 	.globl _LCD_Pow
                                     15 	.globl _LCD_SetCursor
                                     16 	.globl _LCD_WriteData
                                     17 	.globl _LCD_WriteCommand
                                     18 	.globl _LCD_Delay
                                     19 	.globl _delay_mat
                                     20 	.globl _CCF0
                                     21 	.globl _CCF1
                                     22 	.globl _CR
                                     23 	.globl _CF
                                     24 	.globl _P5_3
                                     25 	.globl _P5_2
                                     26 	.globl _P5_1
                                     27 	.globl _P5_0
                                     28 	.globl _P4_7
                                     29 	.globl _P4_6
                                     30 	.globl _P4_5
                                     31 	.globl _P4_4
                                     32 	.globl _P4_3
                                     33 	.globl _P4_2
                                     34 	.globl _P4_1
                                     35 	.globl _P4_0
                                     36 	.globl _PADC
                                     37 	.globl _PLVD
                                     38 	.globl _PPCA
                                     39 	.globl _EADC
                                     40 	.globl _ELVD
                                     41 	.globl _CY
                                     42 	.globl _AC
                                     43 	.globl _F0
                                     44 	.globl _RS1
                                     45 	.globl _RS0
                                     46 	.globl _OV
                                     47 	.globl _F1
                                     48 	.globl _P
                                     49 	.globl _PS
                                     50 	.globl _PT1
                                     51 	.globl _PX1
                                     52 	.globl _PT0
                                     53 	.globl _PX0
                                     54 	.globl _RD
                                     55 	.globl _WR
                                     56 	.globl _T1
                                     57 	.globl _T0
                                     58 	.globl _INT1
                                     59 	.globl _INT0
                                     60 	.globl _TXD
                                     61 	.globl _RXD
                                     62 	.globl _P3_7
                                     63 	.globl _P3_6
                                     64 	.globl _P3_5
                                     65 	.globl _P3_4
                                     66 	.globl _P3_3
                                     67 	.globl _P3_2
                                     68 	.globl _P3_1
                                     69 	.globl _P3_0
                                     70 	.globl _EA
                                     71 	.globl _ES
                                     72 	.globl _ET1
                                     73 	.globl _EX1
                                     74 	.globl _ET0
                                     75 	.globl _EX0
                                     76 	.globl _P2_7
                                     77 	.globl _P2_6
                                     78 	.globl _P2_5
                                     79 	.globl _P2_4
                                     80 	.globl _P2_3
                                     81 	.globl _P2_2
                                     82 	.globl _P2_1
                                     83 	.globl _P2_0
                                     84 	.globl _SM0
                                     85 	.globl _SM1
                                     86 	.globl _SM2
                                     87 	.globl _REN
                                     88 	.globl _TB8
                                     89 	.globl _RB8
                                     90 	.globl _TI
                                     91 	.globl _RI
                                     92 	.globl _P1_7
                                     93 	.globl _P1_6
                                     94 	.globl _P1_5
                                     95 	.globl _P1_4
                                     96 	.globl _P1_3
                                     97 	.globl _P1_2
                                     98 	.globl _P1_1
                                     99 	.globl _P1_0
                                    100 	.globl _TF1
                                    101 	.globl _TR1
                                    102 	.globl _TF0
                                    103 	.globl _TR0
                                    104 	.globl _IE1
                                    105 	.globl _IT1
                                    106 	.globl _IE0
                                    107 	.globl _IT0
                                    108 	.globl _P0_7
                                    109 	.globl _P0_6
                                    110 	.globl _P0_5
                                    111 	.globl _P0_4
                                    112 	.globl _P0_3
                                    113 	.globl _P0_2
                                    114 	.globl _P0_1
                                    115 	.globl _P0_0
                                    116 	.globl _IAP_CONTR
                                    117 	.globl _IAP_TRIG
                                    118 	.globl _IAP_CMD
                                    119 	.globl _IAP_ADDRL
                                    120 	.globl _IAP_ADDRH
                                    121 	.globl _IAP_DATA
                                    122 	.globl _SPDAT
                                    123 	.globl _SPSTAT
                                    124 	.globl _SPCTL
                                    125 	.globl _ADC_RESL
                                    126 	.globl _ADC_RES
                                    127 	.globl _ADC_CONTR
                                    128 	.globl _P1ASF
                                    129 	.globl _PCA_PWM1
                                    130 	.globl _PCA_PWM0
                                    131 	.globl _CCAP1H
                                    132 	.globl _CCAP1L
                                    133 	.globl _CCAP0H
                                    134 	.globl _CCAP0L
                                    135 	.globl _CCAPM1
                                    136 	.globl _CCAPM0
                                    137 	.globl _CH
                                    138 	.globl _CL
                                    139 	.globl _CMOD
                                    140 	.globl _CCON
                                    141 	.globl _WDT_CONTR
                                    142 	.globl _BRT
                                    143 	.globl _S2BUF
                                    144 	.globl _S2CON
                                    145 	.globl _SADDR
                                    146 	.globl _SADEN
                                    147 	.globl _P5M1
                                    148 	.globl _P5M0
                                    149 	.globl _P4SW
                                    150 	.globl _P4M1
                                    151 	.globl _P4M0
                                    152 	.globl _P3M1
                                    153 	.globl _P3M0
                                    154 	.globl _P2M1
                                    155 	.globl _P2M0
                                    156 	.globl _P1M1
                                    157 	.globl _P1M0
                                    158 	.globl _P0M1
                                    159 	.globl _P0M0
                                    160 	.globl _P5
                                    161 	.globl _P4
                                    162 	.globl _IP2H
                                    163 	.globl _IP2
                                    164 	.globl _IPH
                                    165 	.globl _IE2
                                    166 	.globl _BUS_SPEED
                                    167 	.globl _CLK_DIV
                                    168 	.globl _WAKE_CLKO
                                    169 	.globl _AUXR1
                                    170 	.globl _AUXR
                                    171 	.globl _B
                                    172 	.globl _ACC
                                    173 	.globl _PSW
                                    174 	.globl _IP
                                    175 	.globl _P3
                                    176 	.globl _IE
                                    177 	.globl _P2
                                    178 	.globl _SBUF
                                    179 	.globl _SCON
                                    180 	.globl _P1
                                    181 	.globl _TH1
                                    182 	.globl _TH0
                                    183 	.globl _TL1
                                    184 	.globl _TL0
                                    185 	.globl _TMOD
                                    186 	.globl _TCON
                                    187 	.globl _PCON
                                    188 	.globl _DPH
                                    189 	.globl _DPL
                                    190 	.globl _SP
                                    191 	.globl _P0
                                    192 	.globl _FLAG_M
                                    193 	.globl _FLAG_D
                                    194 	.globl _FLAG_F
                                    195 	.globl _PassWord_Ent2
                                    196 	.globl _PassWord_Ent1_1
                                    197 	.globl _PassWord_Ent1
                                    198 	.globl _PassWord_Ent
                                    199 	.globl _PassWord2
                                    200 	.globl _PassWord1
                                    201 	.globl _PassWord_Set2
                                    202 	.globl _PassWord_Set1_1
                                    203 	.globl _PassWord_Set1
                                    204 	.globl _PassWord_Set
                                    205 	.globl _Num_Mat
                                    206 	.globl _cont
                                    207 	.globl _FLAG
                                    208 	.globl _K1
                                    209 	.globl _AT24C02_WriteByte_PARM_2
                                    210 	.globl _LCD_ShowBinNum_PARM_4
                                    211 	.globl _LCD_ShowBinNum_PARM_3
                                    212 	.globl _LCD_ShowBinNum_PARM_2
                                    213 	.globl _LCD_ShowHexNum_PARM_4
                                    214 	.globl _LCD_ShowHexNum_PARM_3
                                    215 	.globl _LCD_ShowHexNum_PARM_2
                                    216 	.globl _LCD_ShowSignedNum_PARM_4
                                    217 	.globl _LCD_ShowSignedNum_PARM_3
                                    218 	.globl _LCD_ShowSignedNum_PARM_2
                                    219 	.globl _LCD_ShowNum_PARM_4
                                    220 	.globl _LCD_ShowNum_PARM_3
                                    221 	.globl _LCD_ShowNum_PARM_2
                                    222 	.globl _LCD_Pow_PARM_2
                                    223 	.globl _LCD_ShowString_PARM_3
                                    224 	.globl _LCD_ShowString_PARM_2
                                    225 	.globl _LCD_ShowChar_PARM_3
                                    226 	.globl _LCD_ShowChar_PARM_2
                                    227 	.globl _LCD_SetCursor_PARM_2
                                    228 	.globl _MatrKey
                                    229 	.globl _Delay
                                    230 	.globl _DelayS
                                    231 	.globl _DelayMs
                                    232 	.globl _LCD_Init
                                    233 	.globl _LCD_ShowChar
                                    234 	.globl _LCD_ShowString
                                    235 	.globl _LCD_ShowNum
                                    236 	.globl _LCD_ShowSignedNum
                                    237 	.globl _LCD_ShowHexNum
                                    238 	.globl _LCD_ShowBinNum
                                    239 	.globl _I2C_Start
                                    240 	.globl _I2C_Stop
                                    241 	.globl _I2C_SendByte
                                    242 	.globl _I2C_ReciveByte
                                    243 	.globl _I2C_SendAck
                                    244 	.globl _I2C_ReciveAck
                                    245 	.globl _delay_ATC
                                    246 	.globl _AT24C02_WriteByte
                                    247 	.globl _AT24C02_ReadByte
                                    248 	.globl _Key
                                    249 	.globl _Time_Init
                                    250 ;--------------------------------------------------------
                                    251 ; special function registers
                                    252 ;--------------------------------------------------------
                                    253 	.area RSEG    (ABS,DATA)
      000000                        254 	.org 0x0000
                           000080   255 _P0	=	0x0080
                           000081   256 _SP	=	0x0081
                           000082   257 _DPL	=	0x0082
                           000083   258 _DPH	=	0x0083
                           000087   259 _PCON	=	0x0087
                           000088   260 _TCON	=	0x0088
                           000089   261 _TMOD	=	0x0089
                           00008A   262 _TL0	=	0x008a
                           00008B   263 _TL1	=	0x008b
                           00008C   264 _TH0	=	0x008c
                           00008D   265 _TH1	=	0x008d
                           000090   266 _P1	=	0x0090
                           000098   267 _SCON	=	0x0098
                           000099   268 _SBUF	=	0x0099
                           0000A0   269 _P2	=	0x00a0
                           0000A8   270 _IE	=	0x00a8
                           0000B0   271 _P3	=	0x00b0
                           0000B8   272 _IP	=	0x00b8
                           0000D0   273 _PSW	=	0x00d0
                           0000E0   274 _ACC	=	0x00e0
                           0000F0   275 _B	=	0x00f0
                           00008E   276 _AUXR	=	0x008e
                           0000A2   277 _AUXR1	=	0x00a2
                           00008F   278 _WAKE_CLKO	=	0x008f
                           000097   279 _CLK_DIV	=	0x0097
                           0000A1   280 _BUS_SPEED	=	0x00a1
                           0000AF   281 _IE2	=	0x00af
                           0000B7   282 _IPH	=	0x00b7
                           0000B5   283 _IP2	=	0x00b5
                           0000B6   284 _IP2H	=	0x00b6
                           0000C0   285 _P4	=	0x00c0
                           0000C8   286 _P5	=	0x00c8
                           000094   287 _P0M0	=	0x0094
                           000093   288 _P0M1	=	0x0093
                           000092   289 _P1M0	=	0x0092
                           000091   290 _P1M1	=	0x0091
                           000096   291 _P2M0	=	0x0096
                           000095   292 _P2M1	=	0x0095
                           0000B2   293 _P3M0	=	0x00b2
                           0000B1   294 _P3M1	=	0x00b1
                           0000B4   295 _P4M0	=	0x00b4
                           0000B3   296 _P4M1	=	0x00b3
                           0000BB   297 _P4SW	=	0x00bb
                           0000CA   298 _P5M0	=	0x00ca
                           0000C9   299 _P5M1	=	0x00c9
                           0000B9   300 _SADEN	=	0x00b9
                           0000A9   301 _SADDR	=	0x00a9
                           00009A   302 _S2CON	=	0x009a
                           00009B   303 _S2BUF	=	0x009b
                           00009C   304 _BRT	=	0x009c
                           0000C1   305 _WDT_CONTR	=	0x00c1
                           0000D8   306 _CCON	=	0x00d8
                           0000D9   307 _CMOD	=	0x00d9
                           0000E9   308 _CL	=	0x00e9
                           0000F9   309 _CH	=	0x00f9
                           0000DA   310 _CCAPM0	=	0x00da
                           0000DB   311 _CCAPM1	=	0x00db
                           0000EA   312 _CCAP0L	=	0x00ea
                           0000FA   313 _CCAP0H	=	0x00fa
                           0000EB   314 _CCAP1L	=	0x00eb
                           0000FB   315 _CCAP1H	=	0x00fb
                           0000F2   316 _PCA_PWM0	=	0x00f2
                           0000F3   317 _PCA_PWM1	=	0x00f3
                           00009D   318 _P1ASF	=	0x009d
                           0000BC   319 _ADC_CONTR	=	0x00bc
                           0000BD   320 _ADC_RES	=	0x00bd
                           0000BE   321 _ADC_RESL	=	0x00be
                           0000CE   322 _SPCTL	=	0x00ce
                           0000CD   323 _SPSTAT	=	0x00cd
                           0000CF   324 _SPDAT	=	0x00cf
                           0000C2   325 _IAP_DATA	=	0x00c2
                           0000C3   326 _IAP_ADDRH	=	0x00c3
                           0000C4   327 _IAP_ADDRL	=	0x00c4
                           0000C5   328 _IAP_CMD	=	0x00c5
                           0000C6   329 _IAP_TRIG	=	0x00c6
                           0000C7   330 _IAP_CONTR	=	0x00c7
                                    331 ;--------------------------------------------------------
                                    332 ; special function bits
                                    333 ;--------------------------------------------------------
                                    334 	.area RSEG    (ABS,DATA)
      000000                        335 	.org 0x0000
                           000080   336 _P0_0	=	0x0080
                           000081   337 _P0_1	=	0x0081
                           000082   338 _P0_2	=	0x0082
                           000083   339 _P0_3	=	0x0083
                           000084   340 _P0_4	=	0x0084
                           000085   341 _P0_5	=	0x0085
                           000086   342 _P0_6	=	0x0086
                           000087   343 _P0_7	=	0x0087
                           000088   344 _IT0	=	0x0088
                           000089   345 _IE0	=	0x0089
                           00008A   346 _IT1	=	0x008a
                           00008B   347 _IE1	=	0x008b
                           00008C   348 _TR0	=	0x008c
                           00008D   349 _TF0	=	0x008d
                           00008E   350 _TR1	=	0x008e
                           00008F   351 _TF1	=	0x008f
                           000090   352 _P1_0	=	0x0090
                           000091   353 _P1_1	=	0x0091
                           000092   354 _P1_2	=	0x0092
                           000093   355 _P1_3	=	0x0093
                           000094   356 _P1_4	=	0x0094
                           000095   357 _P1_5	=	0x0095
                           000096   358 _P1_6	=	0x0096
                           000097   359 _P1_7	=	0x0097
                           000098   360 _RI	=	0x0098
                           000099   361 _TI	=	0x0099
                           00009A   362 _RB8	=	0x009a
                           00009B   363 _TB8	=	0x009b
                           00009C   364 _REN	=	0x009c
                           00009D   365 _SM2	=	0x009d
                           00009E   366 _SM1	=	0x009e
                           00009F   367 _SM0	=	0x009f
                           0000A0   368 _P2_0	=	0x00a0
                           0000A1   369 _P2_1	=	0x00a1
                           0000A2   370 _P2_2	=	0x00a2
                           0000A3   371 _P2_3	=	0x00a3
                           0000A4   372 _P2_4	=	0x00a4
                           0000A5   373 _P2_5	=	0x00a5
                           0000A6   374 _P2_6	=	0x00a6
                           0000A7   375 _P2_7	=	0x00a7
                           0000A8   376 _EX0	=	0x00a8
                           0000A9   377 _ET0	=	0x00a9
                           0000AA   378 _EX1	=	0x00aa
                           0000AB   379 _ET1	=	0x00ab
                           0000AC   380 _ES	=	0x00ac
                           0000AF   381 _EA	=	0x00af
                           0000B0   382 _P3_0	=	0x00b0
                           0000B1   383 _P3_1	=	0x00b1
                           0000B2   384 _P3_2	=	0x00b2
                           0000B3   385 _P3_3	=	0x00b3
                           0000B4   386 _P3_4	=	0x00b4
                           0000B5   387 _P3_5	=	0x00b5
                           0000B6   388 _P3_6	=	0x00b6
                           0000B7   389 _P3_7	=	0x00b7
                           0000B0   390 _RXD	=	0x00b0
                           0000B1   391 _TXD	=	0x00b1
                           0000B2   392 _INT0	=	0x00b2
                           0000B3   393 _INT1	=	0x00b3
                           0000B4   394 _T0	=	0x00b4
                           0000B5   395 _T1	=	0x00b5
                           0000B6   396 _WR	=	0x00b6
                           0000B7   397 _RD	=	0x00b7
                           0000B8   398 _PX0	=	0x00b8
                           0000B9   399 _PT0	=	0x00b9
                           0000BA   400 _PX1	=	0x00ba
                           0000BB   401 _PT1	=	0x00bb
                           0000BC   402 _PS	=	0x00bc
                           0000D0   403 _P	=	0x00d0
                           0000D1   404 _F1	=	0x00d1
                           0000D2   405 _OV	=	0x00d2
                           0000D3   406 _RS0	=	0x00d3
                           0000D4   407 _RS1	=	0x00d4
                           0000D5   408 _F0	=	0x00d5
                           0000D6   409 _AC	=	0x00d6
                           0000D7   410 _CY	=	0x00d7
                           0000AE   411 _ELVD	=	0x00ae
                           0000AD   412 _EADC	=	0x00ad
                           0000BF   413 _PPCA	=	0x00bf
                           0000BE   414 _PLVD	=	0x00be
                           0000BD   415 _PADC	=	0x00bd
                           0000C0   416 _P4_0	=	0x00c0
                           0000C1   417 _P4_1	=	0x00c1
                           0000C2   418 _P4_2	=	0x00c2
                           0000C3   419 _P4_3	=	0x00c3
                           0000C4   420 _P4_4	=	0x00c4
                           0000C5   421 _P4_5	=	0x00c5
                           0000C6   422 _P4_6	=	0x00c6
                           0000C7   423 _P4_7	=	0x00c7
                           0000C8   424 _P5_0	=	0x00c8
                           0000C9   425 _P5_1	=	0x00c9
                           0000CA   426 _P5_2	=	0x00ca
                           0000CB   427 _P5_3	=	0x00cb
                           0000DF   428 _CF	=	0x00df
                           0000DE   429 _CR	=	0x00de
                           0000D9   430 _CCF1	=	0x00d9
                           0000D8   431 _CCF0	=	0x00d8
                                    432 ;--------------------------------------------------------
                                    433 ; overlayable register banks
                                    434 ;--------------------------------------------------------
                                    435 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        436 	.ds 8
                                    437 ;--------------------------------------------------------
                                    438 ; overlayable bit register bank
                                    439 ;--------------------------------------------------------
                                    440 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        441 bits:
      000000                        442 	.ds 1
                           008000   443 	b0 = bits[0]
                           008100   444 	b1 = bits[1]
                           008200   445 	b2 = bits[2]
                           008300   446 	b3 = bits[3]
                           008400   447 	b4 = bits[4]
                           008500   448 	b5 = bits[5]
                           008600   449 	b6 = bits[6]
                           008700   450 	b7 = bits[7]
                                    451 ;--------------------------------------------------------
                                    452 ; internal ram data
                                    453 ;--------------------------------------------------------
                                    454 	.area DSEG    (DATA)
      000000                        455 _LCD_SetCursor_PARM_2:
      000000                        456 	.ds 1
      000001                        457 _LCD_ShowChar_PARM_2:
      000001                        458 	.ds 1
      000002                        459 _LCD_ShowChar_PARM_3:
      000002                        460 	.ds 1
      000003                        461 _LCD_ShowString_PARM_2:
      000003                        462 	.ds 1
      000004                        463 _LCD_ShowString_PARM_3:
      000004                        464 	.ds 3
      000007                        465 _LCD_Pow_PARM_2:
      000007                        466 	.ds 2
      000009                        467 _LCD_ShowNum_PARM_2:
      000009                        468 	.ds 1
      00000A                        469 _LCD_ShowNum_PARM_3:
      00000A                        470 	.ds 2
      00000C                        471 _LCD_ShowNum_PARM_4:
      00000C                        472 	.ds 1
      00000D                        473 _LCD_ShowSignedNum_PARM_2:
      00000D                        474 	.ds 1
      00000E                        475 _LCD_ShowSignedNum_PARM_3:
      00000E                        476 	.ds 2
      000010                        477 _LCD_ShowSignedNum_PARM_4:
      000010                        478 	.ds 1
      000011                        479 _LCD_ShowHexNum_PARM_2:
      000011                        480 	.ds 1
      000012                        481 _LCD_ShowHexNum_PARM_3:
      000012                        482 	.ds 2
      000014                        483 _LCD_ShowHexNum_PARM_4:
      000014                        484 	.ds 1
      000015                        485 _LCD_ShowBinNum_PARM_2:
      000015                        486 	.ds 1
      000016                        487 _LCD_ShowBinNum_PARM_3:
      000016                        488 	.ds 2
      000018                        489 _LCD_ShowBinNum_PARM_4:
      000018                        490 	.ds 1
      000019                        491 _AT24C02_WriteByte_PARM_2:
      000019                        492 	.ds 1
      00001A                        493 _K1::
      00001A                        494 	.ds 2
      00001C                        495 _FLAG::
      00001C                        496 	.ds 2
      00001E                        497 _cont::
      00001E                        498 	.ds 2
      000020                        499 _Num_Mat::
      000020                        500 	.ds 1
      000021                        501 _PassWord_Set::
      000021                        502 	.ds 2
      000023                        503 _PassWord_Set1::
      000023                        504 	.ds 2
      000025                        505 _PassWord_Set1_1::
      000025                        506 	.ds 2
      000027                        507 _PassWord_Set2::
      000027                        508 	.ds 2
      000029                        509 _PassWord1::
      000029                        510 	.ds 2
      00002B                        511 _PassWord2::
      00002B                        512 	.ds 2
      00002D                        513 _PassWord_Ent::
      00002D                        514 	.ds 2
      00002F                        515 _PassWord_Ent1::
      00002F                        516 	.ds 2
      000031                        517 _PassWord_Ent1_1::
      000031                        518 	.ds 2
      000033                        519 _PassWord_Ent2::
      000033                        520 	.ds 2
      000035                        521 _FLAG_F::
      000035                        522 	.ds 2
      000037                        523 _FLAG_D::
      000037                        524 	.ds 2
      000039                        525 _FLAG_M::
      000039                        526 	.ds 2
      00003B                        527 _T0_Routine_count_65536_161:
      00003B                        528 	.ds 2
      00003D                        529 _T0_Routine_i_65536_161:
      00003D                        530 	.ds 1
                                    531 ;--------------------------------------------------------
                                    532 ; overlayable items in internal ram 
                                    533 ;--------------------------------------------------------
                                    534 	.area	OSEG    (OVR,DATA)
                                    535 	.area	OSEG    (OVR,DATA)
                                    536 	.area	OSEG    (OVR,DATA)
                                    537 	.area	OSEG    (OVR,DATA)
                                    538 	.area	OSEG    (OVR,DATA)
                                    539 	.area	OSEG    (OVR,DATA)
                                    540 	.area	OSEG    (OVR,DATA)
                                    541 	.area	OSEG    (OVR,DATA)
                                    542 	.area	OSEG    (OVR,DATA)
                                    543 	.area	OSEG    (OVR,DATA)
                                    544 ;--------------------------------------------------------
                                    545 ; Stack segment in internal ram 
                                    546 ;--------------------------------------------------------
                                    547 	.area	SSEG
      000000                        548 __start__stack:
      000000                        549 	.ds	1
                                    550 
                                    551 ;--------------------------------------------------------
                                    552 ; indirectly addressable internal ram data
                                    553 ;--------------------------------------------------------
                                    554 	.area ISEG    (DATA)
                                    555 ;--------------------------------------------------------
                                    556 ; absolute internal ram data
                                    557 ;--------------------------------------------------------
                                    558 	.area IABS    (ABS,DATA)
                                    559 	.area IABS    (ABS,DATA)
                                    560 ;--------------------------------------------------------
                                    561 ; bit data
                                    562 ;--------------------------------------------------------
                                    563 	.area BSEG    (BIT)
                                    564 ;--------------------------------------------------------
                                    565 ; paged external ram data
                                    566 ;--------------------------------------------------------
                                    567 	.area PSEG    (PAG,XDATA)
                                    568 ;--------------------------------------------------------
                                    569 ; external ram data
                                    570 ;--------------------------------------------------------
                                    571 	.area XSEG    (XDATA)
                                    572 ;--------------------------------------------------------
                                    573 ; absolute external ram data
                                    574 ;--------------------------------------------------------
                                    575 	.area XABS    (ABS,XDATA)
                                    576 ;--------------------------------------------------------
                                    577 ; external initialized ram data
                                    578 ;--------------------------------------------------------
                                    579 	.area XISEG   (XDATA)
                                    580 	.area HOME    (CODE)
                                    581 	.area GSINIT0 (CODE)
                                    582 	.area GSINIT1 (CODE)
                                    583 	.area GSINIT2 (CODE)
                                    584 	.area GSINIT3 (CODE)
                                    585 	.area GSINIT4 (CODE)
                                    586 	.area GSINIT5 (CODE)
                                    587 	.area GSINIT  (CODE)
                                    588 	.area GSFINAL (CODE)
                                    589 	.area CSEG    (CODE)
                                    590 ;--------------------------------------------------------
                                    591 ; interrupt vector 
                                    592 ;--------------------------------------------------------
                                    593 	.area HOME    (CODE)
      000000                        594 __interrupt_vect:
      000000 02r00r00         [24]  595 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  596 	reti
      000004                        597 	.ds	7
      00000B 02r0DrB3         [24]  598 	ljmp	_T0_Routine
                                    599 ;--------------------------------------------------------
                                    600 ; global & static initialisations
                                    601 ;--------------------------------------------------------
                                    602 	.area HOME    (CODE)
                                    603 	.area GSINIT  (CODE)
                                    604 	.area GSFINAL (CODE)
                                    605 	.area GSINIT  (CODE)
                                    606 	.globl __sdcc_gsinit_startup
                                    607 	.globl __sdcc_program_startup
                                    608 	.globl __start__stack
                                    609 	.globl __mcs51_genXINIT
                                    610 	.globl __mcs51_genXRAMCLEAR
                                    611 	.globl __mcs51_genRAMCLEAR
                                    612 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  613 	ljmp	__sdcc_program_startup
                                    614 ;--------------------------------------------------------
                                    615 ; Home
                                    616 ;--------------------------------------------------------
                                    617 	.area HOME    (CODE)
                                    618 	.area HOME    (CODE)
      00000E                        619 __sdcc_program_startup:
      00000E 02r05rD5         [24]  620 	ljmp	_main
                                    621 ;	return from main will return to caller
                                    622 ;--------------------------------------------------------
                                    623 ; code
                                    624 ;--------------------------------------------------------
                                    625 	.area CSEG    (CODE)
                                    626 ;------------------------------------------------------------
                                    627 ;Allocation info for local variables in function 'delay_mat'
                                    628 ;------------------------------------------------------------
                                    629 ;a                         Allocated to registers r6 r7 
                                    630 ;b                         Allocated to registers r4 r5 
                                    631 ;------------------------------------------------------------
                                    632 ;	MatKey.h:45: void delay_mat()
                                    633 ;	-----------------------------------------
                                    634 ;	 function delay_mat
                                    635 ;	-----------------------------------------
      000000                        636 _delay_mat:
                           000007   637 	ar7 = 0x07
                           000006   638 	ar6 = 0x06
                           000005   639 	ar5 = 0x05
                           000004   640 	ar4 = 0x04
                           000003   641 	ar3 = 0x03
                           000002   642 	ar2 = 0x02
                           000001   643 	ar1 = 0x01
                           000000   644 	ar0 = 0x00
                                    645 ;	MatKey.h:48: for(a = 50; a > 0; a--)
      000000 7E 32            [12]  646 	mov	r6,#0x32
      000002 7F 00            [12]  647 	mov	r7,#0x00
      000004                        648 00105$:
                                    649 ;	MatKey.h:50: for(b = 400; b > 0; b--);
      000004 7C 90            [12]  650 	mov	r4,#0x90
      000006 7D 01            [12]  651 	mov	r5,#0x01
      000008                        652 00104$:
      000008 EC               [12]  653 	mov	a,r4
      000009 24 FF            [12]  654 	add	a,#0xff
      00000B FA               [12]  655 	mov	r2,a
      00000C ED               [12]  656 	mov	a,r5
      00000D 34 FF            [12]  657 	addc	a,#0xff
      00000F FB               [12]  658 	mov	r3,a
      000010 8A 04            [24]  659 	mov	ar4,r2
      000012 8B 05            [24]  660 	mov	ar5,r3
      000014 EA               [12]  661 	mov	a,r2
      000015 4B               [12]  662 	orl	a,r3
      000016 70 F0            [24]  663 	jnz	00104$
                                    664 ;	MatKey.h:48: for(a = 50; a > 0; a--)
      000018 EE               [12]  665 	mov	a,r6
      000019 24 FF            [12]  666 	add	a,#0xff
      00001B FC               [12]  667 	mov	r4,a
      00001C EF               [12]  668 	mov	a,r7
      00001D 34 FF            [12]  669 	addc	a,#0xff
      00001F FD               [12]  670 	mov	r5,a
      000020 8C 06            [24]  671 	mov	ar6,r4
      000022 8D 07            [24]  672 	mov	ar7,r5
      000024 EC               [12]  673 	mov	a,r4
      000025 4D               [12]  674 	orl	a,r5
      000026 70 DC            [24]  675 	jnz	00105$
                                    676 ;	MatKey.h:52: }
      000028 22               [24]  677 	ret
                                    678 ;------------------------------------------------------------
                                    679 ;Allocation info for local variables in function 'MatrKey'
                                    680 ;------------------------------------------------------------
                                    681 ;KeyNumber                 Allocated to registers r7 
                                    682 ;------------------------------------------------------------
                                    683 ;	MatKey.h:59: unsigned char MatrKey()//列扫描
                                    684 ;	-----------------------------------------
                                    685 ;	 function MatrKey
                                    686 ;	-----------------------------------------
      000029                        687 _MatrKey:
                                    688 ;	MatKey.h:99: unsigned char KeyNumber = 0;
      000029 7F 00            [12]  689 	mov	r7,#0x00
                                    690 ;	MatKey.h:101: P3 = 0xff;
      00002B 75 B0 FF         [24]  691 	mov	_P3,#0xff
                                    692 ;	MatKey.h:102: P3_4 = 0;
                                    693 ;	assignBit
      00002E C2 B4            [12]  694 	clr	_P3_4
                                    695 ;	MatKey.h:103: if(P3_0 == 0){delay_mat();while(P3_0 == 0);delay_mat();KeyNumber = 1;}//第一行
      000030 20 B0 0B         [24]  696 	jb	_P3_0,00105$
      000033 12r00r00         [24]  697 	lcall	_delay_mat
      000036                        698 00101$:
      000036 30 B0 FD         [24]  699 	jnb	_P3_0,00101$
      000039 12r00r00         [24]  700 	lcall	_delay_mat
      00003C 7F 01            [12]  701 	mov	r7,#0x01
      00003E                        702 00105$:
                                    703 ;	MatKey.h:104: if(P3_1 == 0){delay_mat();while(P3_1 == 0);delay_mat();KeyNumber = 4;}//第二行
      00003E 20 B1 0B         [24]  704 	jb	_P3_1,00110$
      000041 12r00r00         [24]  705 	lcall	_delay_mat
      000044                        706 00106$:
      000044 30 B1 FD         [24]  707 	jnb	_P3_1,00106$
      000047 12r00r00         [24]  708 	lcall	_delay_mat
      00004A 7F 04            [12]  709 	mov	r7,#0x04
      00004C                        710 00110$:
                                    711 ;	MatKey.h:105: if(P3_2 == 0){delay_mat();while(P3_2 == 0);delay_mat();KeyNumber = 7;}//第三行
      00004C 20 B2 0B         [24]  712 	jb	_P3_2,00115$
      00004F 12r00r00         [24]  713 	lcall	_delay_mat
      000052                        714 00111$:
      000052 30 B2 FD         [24]  715 	jnb	_P3_2,00111$
      000055 12r00r00         [24]  716 	lcall	_delay_mat
      000058 7F 07            [12]  717 	mov	r7,#0x07
      00005A                        718 00115$:
                                    719 ;	MatKey.h:106: if(P3_3 == 0){delay_mat();while(P3_3 == 0);delay_mat();KeyNumber = 10;}//第四行
      00005A 20 B3 0B         [24]  720 	jb	_P3_3,00120$
      00005D 12r00r00         [24]  721 	lcall	_delay_mat
      000060                        722 00116$:
      000060 30 B3 FD         [24]  723 	jnb	_P3_3,00116$
      000063 12r00r00         [24]  724 	lcall	_delay_mat
      000066 7F 0A            [12]  725 	mov	r7,#0x0a
      000068                        726 00120$:
                                    727 ;	MatKey.h:108: P3 = 0xff;
      000068 75 B0 FF         [24]  728 	mov	_P3,#0xff
                                    729 ;	MatKey.h:109: P3_5 = 0;
                                    730 ;	assignBit
      00006B C2 B5            [12]  731 	clr	_P3_5
                                    732 ;	MatKey.h:110: if(P3_0 == 0){delay_mat();while(P3_0 == 0);delay_mat();KeyNumber = 2;}
      00006D 20 B0 0B         [24]  733 	jb	_P3_0,00125$
      000070 12r00r00         [24]  734 	lcall	_delay_mat
      000073                        735 00121$:
      000073 30 B0 FD         [24]  736 	jnb	_P3_0,00121$
      000076 12r00r00         [24]  737 	lcall	_delay_mat
      000079 7F 02            [12]  738 	mov	r7,#0x02
      00007B                        739 00125$:
                                    740 ;	MatKey.h:111: if(P3_1 == 0){delay_mat();while(P3_1 == 0);delay_mat();KeyNumber = 5;}
      00007B 20 B1 0B         [24]  741 	jb	_P3_1,00130$
      00007E 12r00r00         [24]  742 	lcall	_delay_mat
      000081                        743 00126$:
      000081 30 B1 FD         [24]  744 	jnb	_P3_1,00126$
      000084 12r00r00         [24]  745 	lcall	_delay_mat
      000087 7F 05            [12]  746 	mov	r7,#0x05
      000089                        747 00130$:
                                    748 ;	MatKey.h:112: if(P3_2 == 0){delay_mat();while(P3_2 == 0);delay_mat();KeyNumber = 8;}
      000089 20 B2 0B         [24]  749 	jb	_P3_2,00135$
      00008C 12r00r00         [24]  750 	lcall	_delay_mat
      00008F                        751 00131$:
      00008F 30 B2 FD         [24]  752 	jnb	_P3_2,00131$
      000092 12r00r00         [24]  753 	lcall	_delay_mat
      000095 7F 08            [12]  754 	mov	r7,#0x08
      000097                        755 00135$:
                                    756 ;	MatKey.h:113: if(P3_3 == 0){delay_mat();while(P3_3 == 0);delay_mat();KeyNumber = 11;}
      000097 20 B3 0B         [24]  757 	jb	_P3_3,00140$
      00009A 12r00r00         [24]  758 	lcall	_delay_mat
      00009D                        759 00136$:
      00009D 30 B3 FD         [24]  760 	jnb	_P3_3,00136$
      0000A0 12r00r00         [24]  761 	lcall	_delay_mat
      0000A3 7F 0B            [12]  762 	mov	r7,#0x0b
      0000A5                        763 00140$:
                                    764 ;	MatKey.h:115: P3 = 0xff;
      0000A5 75 B0 FF         [24]  765 	mov	_P3,#0xff
                                    766 ;	MatKey.h:116: P3_6 = 0;
                                    767 ;	assignBit
      0000A8 C2 B6            [12]  768 	clr	_P3_6
                                    769 ;	MatKey.h:117: if(P3_0 == 0){delay_mat();while(P3_0 == 0);delay_mat();KeyNumber = 3;}
      0000AA 20 B0 0B         [24]  770 	jb	_P3_0,00145$
      0000AD 12r00r00         [24]  771 	lcall	_delay_mat
      0000B0                        772 00141$:
      0000B0 30 B0 FD         [24]  773 	jnb	_P3_0,00141$
      0000B3 12r00r00         [24]  774 	lcall	_delay_mat
      0000B6 7F 03            [12]  775 	mov	r7,#0x03
      0000B8                        776 00145$:
                                    777 ;	MatKey.h:118: if(P3_1 == 0){delay_mat();while(P3_1 == 0);delay_mat();KeyNumber = 6;}
      0000B8 20 B1 0B         [24]  778 	jb	_P3_1,00150$
      0000BB 12r00r00         [24]  779 	lcall	_delay_mat
      0000BE                        780 00146$:
      0000BE 30 B1 FD         [24]  781 	jnb	_P3_1,00146$
      0000C1 12r00r00         [24]  782 	lcall	_delay_mat
      0000C4 7F 06            [12]  783 	mov	r7,#0x06
      0000C6                        784 00150$:
                                    785 ;	MatKey.h:119: if(P3_2 == 0){delay_mat();while(P3_2 == 0);delay_mat();KeyNumber = 9;}
      0000C6 20 B2 0B         [24]  786 	jb	_P3_2,00155$
      0000C9 12r00r00         [24]  787 	lcall	_delay_mat
      0000CC                        788 00151$:
      0000CC 30 B2 FD         [24]  789 	jnb	_P3_2,00151$
      0000CF 12r00r00         [24]  790 	lcall	_delay_mat
      0000D2 7F 09            [12]  791 	mov	r7,#0x09
      0000D4                        792 00155$:
                                    793 ;	MatKey.h:120: if(P3_3 == 0){delay_mat();while(P3_3 == 0);delay_mat();KeyNumber = 12;}
      0000D4 20 B3 0B         [24]  794 	jb	_P3_3,00160$
      0000D7 12r00r00         [24]  795 	lcall	_delay_mat
      0000DA                        796 00156$:
      0000DA 30 B3 FD         [24]  797 	jnb	_P3_3,00156$
      0000DD 12r00r00         [24]  798 	lcall	_delay_mat
      0000E0 7F 0C            [12]  799 	mov	r7,#0x0c
      0000E2                        800 00160$:
                                    801 ;	MatKey.h:122: P3 = 0xff;
      0000E2 75 B0 FF         [24]  802 	mov	_P3,#0xff
                                    803 ;	MatKey.h:123: P3_7 = 0;
                                    804 ;	assignBit
      0000E5 C2 B7            [12]  805 	clr	_P3_7
                                    806 ;	MatKey.h:124: if(P3_0 == 0){delay_mat();while(P3_0 == 0);delay_mat();KeyNumber = 13;}
      0000E7 20 B0 0B         [24]  807 	jb	_P3_0,00165$
      0000EA 12r00r00         [24]  808 	lcall	_delay_mat
      0000ED                        809 00161$:
      0000ED 30 B0 FD         [24]  810 	jnb	_P3_0,00161$
      0000F0 12r00r00         [24]  811 	lcall	_delay_mat
      0000F3 7F 0D            [12]  812 	mov	r7,#0x0d
      0000F5                        813 00165$:
                                    814 ;	MatKey.h:125: if(P3_1 == 0){delay_mat();while(P3_1 == 0);delay_mat();KeyNumber = 14;}
      0000F5 20 B1 0B         [24]  815 	jb	_P3_1,00170$
      0000F8 12r00r00         [24]  816 	lcall	_delay_mat
      0000FB                        817 00166$:
      0000FB 30 B1 FD         [24]  818 	jnb	_P3_1,00166$
      0000FE 12r00r00         [24]  819 	lcall	_delay_mat
      000101 7F 0E            [12]  820 	mov	r7,#0x0e
      000103                        821 00170$:
                                    822 ;	MatKey.h:126: if(P3_2 == 0){delay_mat();while(P3_2 == 0);delay_mat();KeyNumber = 15;}
      000103 20 B2 0B         [24]  823 	jb	_P3_2,00175$
      000106 12r00r00         [24]  824 	lcall	_delay_mat
      000109                        825 00171$:
      000109 30 B2 FD         [24]  826 	jnb	_P3_2,00171$
      00010C 12r00r00         [24]  827 	lcall	_delay_mat
      00010F 7F 0F            [12]  828 	mov	r7,#0x0f
      000111                        829 00175$:
                                    830 ;	MatKey.h:127: if(P3_3 == 0){delay_mat();while(P3_3 == 0);delay_mat();KeyNumber = 16;}
      000111 20 B3 0B         [24]  831 	jb	_P3_3,00180$
      000114 12r00r00         [24]  832 	lcall	_delay_mat
      000117                        833 00176$:
      000117 30 B3 FD         [24]  834 	jnb	_P3_3,00176$
      00011A 12r00r00         [24]  835 	lcall	_delay_mat
      00011D 7F 10            [12]  836 	mov	r7,#0x10
      00011F                        837 00180$:
                                    838 ;	MatKey.h:129: return KeyNumber;
      00011F 8F 82            [24]  839 	mov	dpl,r7
                                    840 ;	MatKey.h:130: }
      000121 22               [24]  841 	ret
                                    842 ;------------------------------------------------------------
                                    843 ;Allocation info for local variables in function 'Delay'
                                    844 ;------------------------------------------------------------
                                    845 ;a                         Allocated to registers r6 r7 
                                    846 ;b                         Allocated to registers r4 r5 
                                    847 ;------------------------------------------------------------
                                    848 ;	Delay.h:49: void Delay()
                                    849 ;	-----------------------------------------
                                    850 ;	 function Delay
                                    851 ;	-----------------------------------------
      000122                        852 _Delay:
                                    853 ;	Delay.h:52: for(a = 20; a > 0; a--)
      000122 7E 14            [12]  854 	mov	r6,#0x14
      000124 7F 00            [12]  855 	mov	r7,#0x00
      000126                        856 00105$:
                                    857 ;	Delay.h:54: for(b = 400; b > 0; b--);
      000126 7C 90            [12]  858 	mov	r4,#0x90
      000128 7D 01            [12]  859 	mov	r5,#0x01
      00012A                        860 00104$:
      00012A EC               [12]  861 	mov	a,r4
      00012B 24 FF            [12]  862 	add	a,#0xff
      00012D FA               [12]  863 	mov	r2,a
      00012E ED               [12]  864 	mov	a,r5
      00012F 34 FF            [12]  865 	addc	a,#0xff
      000131 FB               [12]  866 	mov	r3,a
      000132 8A 04            [24]  867 	mov	ar4,r2
      000134 8B 05            [24]  868 	mov	ar5,r3
      000136 EA               [12]  869 	mov	a,r2
      000137 4B               [12]  870 	orl	a,r3
      000138 70 F0            [24]  871 	jnz	00104$
                                    872 ;	Delay.h:52: for(a = 20; a > 0; a--)
      00013A EE               [12]  873 	mov	a,r6
      00013B 24 FF            [12]  874 	add	a,#0xff
      00013D FC               [12]  875 	mov	r4,a
      00013E EF               [12]  876 	mov	a,r7
      00013F 34 FF            [12]  877 	addc	a,#0xff
      000141 FD               [12]  878 	mov	r5,a
      000142 8C 06            [24]  879 	mov	ar6,r4
      000144 8D 07            [24]  880 	mov	ar7,r5
      000146 EC               [12]  881 	mov	a,r4
      000147 4D               [12]  882 	orl	a,r5
      000148 70 DC            [24]  883 	jnz	00105$
                                    884 ;	Delay.h:56: }
      00014A 22               [24]  885 	ret
                                    886 ;------------------------------------------------------------
                                    887 ;Allocation info for local variables in function 'DelayS'
                                    888 ;------------------------------------------------------------
                                    889 ;s                         Allocated to registers 
                                    890 ;a                         Allocated to registers 
                                    891 ;b                         Allocated to registers r4 r5 
                                    892 ;------------------------------------------------------------
                                    893 ;	Delay.h:63: void DelayS(unsigned int s)
                                    894 ;	-----------------------------------------
                                    895 ;	 function DelayS
                                    896 ;	-----------------------------------------
      00014B                        897 _DelayS:
      00014B 85 82*00         [24]  898 	mov	__mulint_PARM_2,dpl
      00014E 85 83*01         [24]  899 	mov	(__mulint_PARM_2 + 1),dph
                                    900 ;	Delay.h:66: for(a = 1000*s; a > 0; a--)
      000151 90 03 E8         [24]  901 	mov	dptr,#0x03e8
      000154 12r00r00         [24]  902 	lcall	__mulint
      000157 AE 82            [24]  903 	mov	r6,dpl
      000159 AF 83            [24]  904 	mov	r7,dph
      00015B                        905 00106$:
      00015B EE               [12]  906 	mov	a,r6
      00015C 4F               [12]  907 	orl	a,r7
      00015D 60 1B            [24]  908 	jz	00108$
                                    909 ;	Delay.h:68: for(b = 400; b > 0; b--);
      00015F 7C 90            [12]  910 	mov	r4,#0x90
      000161 7D 01            [12]  911 	mov	r5,#0x01
      000163                        912 00104$:
      000163 EC               [12]  913 	mov	a,r4
      000164 24 FF            [12]  914 	add	a,#0xff
      000166 FA               [12]  915 	mov	r2,a
      000167 ED               [12]  916 	mov	a,r5
      000168 34 FF            [12]  917 	addc	a,#0xff
      00016A FB               [12]  918 	mov	r3,a
      00016B 8A 04            [24]  919 	mov	ar4,r2
      00016D 8B 05            [24]  920 	mov	ar5,r3
      00016F EA               [12]  921 	mov	a,r2
      000170 4B               [12]  922 	orl	a,r3
      000171 70 F0            [24]  923 	jnz	00104$
                                    924 ;	Delay.h:66: for(a = 1000*s; a > 0; a--)
      000173 1E               [12]  925 	dec	r6
      000174 BE FF 01         [24]  926 	cjne	r6,#0xff,00133$
      000177 1F               [12]  927 	dec	r7
      000178                        928 00133$:
      000178 80 E1            [24]  929 	sjmp	00106$
      00017A                        930 00108$:
                                    931 ;	Delay.h:70: }
      00017A 22               [24]  932 	ret
                                    933 ;------------------------------------------------------------
                                    934 ;Allocation info for local variables in function 'DelayMs'
                                    935 ;------------------------------------------------------------
                                    936 ;ms                        Allocated to registers 
                                    937 ;a                         Allocated to registers r6 r7 
                                    938 ;b                         Allocated to registers r4 r5 
                                    939 ;------------------------------------------------------------
                                    940 ;	Delay.h:77: void DelayMs(int ms)
                                    941 ;	-----------------------------------------
                                    942 ;	 function DelayMs
                                    943 ;	-----------------------------------------
      00017B                        944 _DelayMs:
      00017B AE 82            [24]  945 	mov	r6,dpl
      00017D AF 83            [24]  946 	mov	r7,dph
                                    947 ;	Delay.h:80: for(a = ms; a > 0; a--)
      00017F                        948 00106$:
      00017F EE               [12]  949 	mov	a,r6
      000180 4F               [12]  950 	orl	a,r7
      000181 60 1B            [24]  951 	jz	00108$
                                    952 ;	Delay.h:82: for(b = 400; b > 0; b--);
      000183 7C 90            [12]  953 	mov	r4,#0x90
      000185 7D 01            [12]  954 	mov	r5,#0x01
      000187                        955 00104$:
      000187 EC               [12]  956 	mov	a,r4
      000188 24 FF            [12]  957 	add	a,#0xff
      00018A FA               [12]  958 	mov	r2,a
      00018B ED               [12]  959 	mov	a,r5
      00018C 34 FF            [12]  960 	addc	a,#0xff
      00018E FB               [12]  961 	mov	r3,a
      00018F 8A 04            [24]  962 	mov	ar4,r2
      000191 8B 05            [24]  963 	mov	ar5,r3
      000193 EA               [12]  964 	mov	a,r2
      000194 4B               [12]  965 	orl	a,r3
      000195 70 F0            [24]  966 	jnz	00104$
                                    967 ;	Delay.h:80: for(a = ms; a > 0; a--)
      000197 1E               [12]  968 	dec	r6
      000198 BE FF 01         [24]  969 	cjne	r6,#0xff,00133$
      00019B 1F               [12]  970 	dec	r7
      00019C                        971 00133$:
      00019C 80 E1            [24]  972 	sjmp	00106$
      00019E                        973 00108$:
                                    974 ;	Delay.h:84: }
      00019E 22               [24]  975 	ret
                                    976 ;------------------------------------------------------------
                                    977 ;Allocation info for local variables in function 'LCD_Delay'
                                    978 ;------------------------------------------------------------
                                    979 ;i                         Allocated to registers r7 
                                    980 ;j                         Allocated to registers r6 
                                    981 ;------------------------------------------------------------
                                    982 ;	Lcd.h:61: void LCD_Delay()		//@11.0592MHz 1ms
                                    983 ;	-----------------------------------------
                                    984 ;	 function LCD_Delay
                                    985 ;	-----------------------------------------
      00019F                        986 _LCD_Delay:
                                    987 ;	Lcd.h:65: i = 2;
      00019F 7F 02            [12]  988 	mov	r7,#0x02
                                    989 ;	Lcd.h:66: j = 239;
      0001A1 7E EF            [12]  990 	mov	r6,#0xef
                                    991 ;	Lcd.h:69: while (--j);
      0001A3                        992 00101$:
      0001A3 EE               [12]  993 	mov	a,r6
      0001A4 14               [12]  994 	dec	a
      0001A5 FD               [12]  995 	mov	r5,a
      0001A6 FE               [12]  996 	mov	r6,a
      0001A7 70 FA            [24]  997 	jnz	00101$
                                    998 ;	Lcd.h:70: } while (--i);
      0001A9 EF               [12]  999 	mov	a,r7
      0001AA 14               [12] 1000 	dec	a
      0001AB FD               [12] 1001 	mov	r5,a
      0001AC FF               [12] 1002 	mov	r7,a
      0001AD 70 F4            [24] 1003 	jnz	00101$
                                   1004 ;	Lcd.h:71: }
      0001AF 22               [24] 1005 	ret
                                   1006 ;------------------------------------------------------------
                                   1007 ;Allocation info for local variables in function 'LCD_WriteCommand'
                                   1008 ;------------------------------------------------------------
                                   1009 ;Command                   Allocated to registers r7 
                                   1010 ;------------------------------------------------------------
                                   1011 ;	Lcd.h:78: void LCD_WriteCommand(unsigned char Command)
                                   1012 ;	-----------------------------------------
                                   1013 ;	 function LCD_WriteCommand
                                   1014 ;	-----------------------------------------
      0001B0                       1015 _LCD_WriteCommand:
      0001B0 AF 82            [24] 1016 	mov	r7,dpl
                                   1017 ;	Lcd.h:80: RS=0;
                                   1018 ;	assignBit
      0001B2 C2 90            [12] 1019 	clr	_P1_0
                                   1020 ;	Lcd.h:81: RW=0;
                                   1021 ;	assignBit
      0001B4 C2 91            [12] 1022 	clr	_P1_1
                                   1023 ;	Lcd.h:82: P0=Command;
      0001B6 8F 80            [24] 1024 	mov	_P0,r7
                                   1025 ;	Lcd.h:83: EN=1;
                                   1026 ;	assignBit
      0001B8 D2 A5            [12] 1027 	setb	_P2_5
                                   1028 ;	Lcd.h:84: LCD_Delay();
      0001BA 12r01r9F         [24] 1029 	lcall	_LCD_Delay
                                   1030 ;	Lcd.h:85: EN=0;
                                   1031 ;	assignBit
      0001BD C2 A5            [12] 1032 	clr	_P2_5
                                   1033 ;	Lcd.h:86: LCD_Delay();
                                   1034 ;	Lcd.h:87: }
      0001BF 02r01r9F         [24] 1035 	ljmp	_LCD_Delay
                                   1036 ;------------------------------------------------------------
                                   1037 ;Allocation info for local variables in function 'LCD_WriteData'
                                   1038 ;------------------------------------------------------------
                                   1039 ;Data                      Allocated to registers r7 
                                   1040 ;------------------------------------------------------------
                                   1041 ;	Lcd.h:94: void LCD_WriteData(unsigned char Data)
                                   1042 ;	-----------------------------------------
                                   1043 ;	 function LCD_WriteData
                                   1044 ;	-----------------------------------------
      0001C2                       1045 _LCD_WriteData:
      0001C2 AF 82            [24] 1046 	mov	r7,dpl
                                   1047 ;	Lcd.h:96: RS=1;
                                   1048 ;	assignBit
      0001C4 D2 90            [12] 1049 	setb	_P1_0
                                   1050 ;	Lcd.h:97: RW=0;
                                   1051 ;	assignBit
      0001C6 C2 91            [12] 1052 	clr	_P1_1
                                   1053 ;	Lcd.h:98: P0=Data;
      0001C8 8F 80            [24] 1054 	mov	_P0,r7
                                   1055 ;	Lcd.h:99: EN=1;
                                   1056 ;	assignBit
      0001CA D2 A5            [12] 1057 	setb	_P2_5
                                   1058 ;	Lcd.h:100: LCD_Delay();
      0001CC 12r01r9F         [24] 1059 	lcall	_LCD_Delay
                                   1060 ;	Lcd.h:101: EN=0;
                                   1061 ;	assignBit
      0001CF C2 A5            [12] 1062 	clr	_P2_5
                                   1063 ;	Lcd.h:102: LCD_Delay();
                                   1064 ;	Lcd.h:103: }
      0001D1 02r01r9F         [24] 1065 	ljmp	_LCD_Delay
                                   1066 ;------------------------------------------------------------
                                   1067 ;Allocation info for local variables in function 'LCD_Init'
                                   1068 ;------------------------------------------------------------
                                   1069 ;	Lcd.h:110: void LCD_Init(void)
                                   1070 ;	-----------------------------------------
                                   1071 ;	 function LCD_Init
                                   1072 ;	-----------------------------------------
      0001D4                       1073 _LCD_Init:
                                   1074 ;	Lcd.h:112: LCD_WriteCommand(0x38);
      0001D4 75 82 38         [24] 1075 	mov	dpl,#0x38
      0001D7 12r01rB0         [24] 1076 	lcall	_LCD_WriteCommand
                                   1077 ;	Lcd.h:113: LCD_WriteCommand(0x0C);
      0001DA 75 82 0C         [24] 1078 	mov	dpl,#0x0c
      0001DD 12r01rB0         [24] 1079 	lcall	_LCD_WriteCommand
                                   1080 ;	Lcd.h:114: LCD_WriteCommand(0x06);
      0001E0 75 82 06         [24] 1081 	mov	dpl,#0x06
      0001E3 12r01rB0         [24] 1082 	lcall	_LCD_WriteCommand
                                   1083 ;	Lcd.h:115: LCD_WriteCommand(0x01);
      0001E6 75 82 01         [24] 1084 	mov	dpl,#0x01
                                   1085 ;	Lcd.h:116: }
      0001E9 02r01rB0         [24] 1086 	ljmp	_LCD_WriteCommand
                                   1087 ;------------------------------------------------------------
                                   1088 ;Allocation info for local variables in function 'LCD_SetCursor'
                                   1089 ;------------------------------------------------------------
                                   1090 ;Column                    Allocated with name '_LCD_SetCursor_PARM_2'
                                   1091 ;Line                      Allocated to registers r7 
                                   1092 ;------------------------------------------------------------
                                   1093 ;	Lcd.h:124: void LCD_SetCursor(unsigned char Line,unsigned char Column)
                                   1094 ;	-----------------------------------------
                                   1095 ;	 function LCD_SetCursor
                                   1096 ;	-----------------------------------------
      0001EC                       1097 _LCD_SetCursor:
      0001EC AF 82            [24] 1098 	mov	r7,dpl
                                   1099 ;	Lcd.h:126: if(Line==1)
      0001EE BF 01 0B         [24] 1100 	cjne	r7,#0x01,00102$
                                   1101 ;	Lcd.h:128: LCD_WriteCommand(0x80|(Column-1));
      0001F1 AF*00            [24] 1102 	mov	r7,_LCD_SetCursor_PARM_2
      0001F3 1F               [12] 1103 	dec	r7
      0001F4 74 80            [12] 1104 	mov	a,#0x80
      0001F6 4F               [12] 1105 	orl	a,r7
      0001F7 F5 82            [12] 1106 	mov	dpl,a
      0001F9 02r01rB0         [24] 1107 	ljmp	_LCD_WriteCommand
      0001FC                       1108 00102$:
                                   1109 ;	Lcd.h:132: LCD_WriteCommand(0x80|(Column-1)+0x40);
      0001FC AF*00            [24] 1110 	mov	r7,_LCD_SetCursor_PARM_2
      0001FE 74 3F            [12] 1111 	mov	a,#0x3f
      000200 2F               [12] 1112 	add	a,r7
      000201 FF               [12] 1113 	mov	r7,a
      000202 74 80            [12] 1114 	mov	a,#0x80
      000204 4F               [12] 1115 	orl	a,r7
      000205 F5 82            [12] 1116 	mov	dpl,a
                                   1117 ;	Lcd.h:134: }
      000207 02r01rB0         [24] 1118 	ljmp	_LCD_WriteCommand
                                   1119 ;------------------------------------------------------------
                                   1120 ;Allocation info for local variables in function 'LCD_ShowChar'
                                   1121 ;------------------------------------------------------------
                                   1122 ;Column                    Allocated with name '_LCD_ShowChar_PARM_2'
                                   1123 ;Char                      Allocated with name '_LCD_ShowChar_PARM_3'
                                   1124 ;Line                      Allocated to registers 
                                   1125 ;------------------------------------------------------------
                                   1126 ;	Lcd.h:143: void LCD_ShowChar(unsigned char Line,unsigned char Column,unsigned char Char)
                                   1127 ;	-----------------------------------------
                                   1128 ;	 function LCD_ShowChar
                                   1129 ;	-----------------------------------------
      00020A                       1130 _LCD_ShowChar:
                                   1131 ;	Lcd.h:145: LCD_SetCursor(Line,Column);
      00020A 85*01*00         [24] 1132 	mov	_LCD_SetCursor_PARM_2,_LCD_ShowChar_PARM_2
      00020D 12r01rEC         [24] 1133 	lcall	_LCD_SetCursor
                                   1134 ;	Lcd.h:146: LCD_WriteData(Char);
      000210 85*02 82         [24] 1135 	mov	dpl,_LCD_ShowChar_PARM_3
                                   1136 ;	Lcd.h:147: }
      000213 02r01rC2         [24] 1137 	ljmp	_LCD_WriteData
                                   1138 ;------------------------------------------------------------
                                   1139 ;Allocation info for local variables in function 'LCD_ShowString'
                                   1140 ;------------------------------------------------------------
                                   1141 ;Column                    Allocated with name '_LCD_ShowString_PARM_2'
                                   1142 ;String                    Allocated with name '_LCD_ShowString_PARM_3'
                                   1143 ;Line                      Allocated to registers 
                                   1144 ;i                         Allocated to registers r7 
                                   1145 ;------------------------------------------------------------
                                   1146 ;	Lcd.h:156: void LCD_ShowString(unsigned char Line,unsigned char Column,unsigned char *String)
                                   1147 ;	-----------------------------------------
                                   1148 ;	 function LCD_ShowString
                                   1149 ;	-----------------------------------------
      000216                       1150 _LCD_ShowString:
                                   1151 ;	Lcd.h:159: LCD_SetCursor(Line,Column);
      000216 85*03*00         [24] 1152 	mov	_LCD_SetCursor_PARM_2,_LCD_ShowString_PARM_2
      000219 12r01rEC         [24] 1153 	lcall	_LCD_SetCursor
                                   1154 ;	Lcd.h:160: for(i=0;String[i]!='\0';i++)
      00021C 7F 00            [12] 1155 	mov	r7,#0x00
      00021E                       1156 00103$:
      00021E EF               [12] 1157 	mov	a,r7
      00021F 25*04            [12] 1158 	add	a,_LCD_ShowString_PARM_3
      000221 FC               [12] 1159 	mov	r4,a
      000222 E4               [12] 1160 	clr	a
      000223 35*05            [12] 1161 	addc	a,(_LCD_ShowString_PARM_3 + 1)
      000225 FD               [12] 1162 	mov	r5,a
      000226 AE*06            [24] 1163 	mov	r6,(_LCD_ShowString_PARM_3 + 2)
      000228 8C 82            [24] 1164 	mov	dpl,r4
      00022A 8D 83            [24] 1165 	mov	dph,r5
      00022C 8E F0            [24] 1166 	mov	b,r6
      00022E 12r00r00         [24] 1167 	lcall	__gptrget
      000231 FE               [12] 1168 	mov	r6,a
      000232 60 0C            [24] 1169 	jz	00105$
                                   1170 ;	Lcd.h:162: LCD_WriteData(String[i]);
      000234 8E 82            [24] 1171 	mov	dpl,r6
      000236 C0 07            [24] 1172 	push	ar7
      000238 12r01rC2         [24] 1173 	lcall	_LCD_WriteData
      00023B D0 07            [24] 1174 	pop	ar7
                                   1175 ;	Lcd.h:160: for(i=0;String[i]!='\0';i++)
      00023D 0F               [12] 1176 	inc	r7
      00023E 80 DE            [24] 1177 	sjmp	00103$
      000240                       1178 00105$:
                                   1179 ;	Lcd.h:164: }
      000240 22               [24] 1180 	ret
                                   1181 ;------------------------------------------------------------
                                   1182 ;Allocation info for local variables in function 'LCD_Pow'
                                   1183 ;------------------------------------------------------------
                                   1184 ;Y                         Allocated with name '_LCD_Pow_PARM_2'
                                   1185 ;X                         Allocated to registers r6 r7 
                                   1186 ;i                         Allocated to registers r3 
                                   1187 ;Result                    Allocated to registers r4 r5 
                                   1188 ;------------------------------------------------------------
                                   1189 ;	Lcd.h:169: int LCD_Pow(int X,int Y)
                                   1190 ;	-----------------------------------------
                                   1191 ;	 function LCD_Pow
                                   1192 ;	-----------------------------------------
      000241                       1193 _LCD_Pow:
      000241 AE 82            [24] 1194 	mov	r6,dpl
      000243 AF 83            [24] 1195 	mov	r7,dph
                                   1196 ;	Lcd.h:172: int Result=1;
      000245 7C 01            [12] 1197 	mov	r4,#0x01
      000247 7D 00            [12] 1198 	mov	r5,#0x00
                                   1199 ;	Lcd.h:173: for(i=0;i<Y;i++)
      000249 7B 00            [12] 1200 	mov	r3,#0x00
      00024B                       1201 00103$:
      00024B 8B 01            [24] 1202 	mov	ar1,r3
      00024D 7A 00            [12] 1203 	mov	r2,#0x00
      00024F C3               [12] 1204 	clr	c
      000250 E9               [12] 1205 	mov	a,r1
      000251 95*07            [12] 1206 	subb	a,_LCD_Pow_PARM_2
      000253 EA               [12] 1207 	mov	a,r2
      000254 64 80            [12] 1208 	xrl	a,#0x80
      000256 85*08 F0         [24] 1209 	mov	b,(_LCD_Pow_PARM_2 + 1)
      000259 63 F0 80         [24] 1210 	xrl	b,#0x80
      00025C 95 F0            [12] 1211 	subb	a,b
      00025E 50 1E            [24] 1212 	jnc	00101$
                                   1213 ;	Lcd.h:175: Result*=X;
      000260 8E*00            [24] 1214 	mov	__mulint_PARM_2,r6
      000262 8F*01            [24] 1215 	mov	(__mulint_PARM_2 + 1),r7
      000264 8C 82            [24] 1216 	mov	dpl,r4
      000266 8D 83            [24] 1217 	mov	dph,r5
      000268 C0 07            [24] 1218 	push	ar7
      00026A C0 06            [24] 1219 	push	ar6
      00026C C0 03            [24] 1220 	push	ar3
      00026E 12r00r00         [24] 1221 	lcall	__mulint
      000271 AC 82            [24] 1222 	mov	r4,dpl
      000273 AD 83            [24] 1223 	mov	r5,dph
      000275 D0 03            [24] 1224 	pop	ar3
      000277 D0 06            [24] 1225 	pop	ar6
      000279 D0 07            [24] 1226 	pop	ar7
                                   1227 ;	Lcd.h:173: for(i=0;i<Y;i++)
      00027B 0B               [12] 1228 	inc	r3
      00027C 80 CD            [24] 1229 	sjmp	00103$
      00027E                       1230 00101$:
                                   1231 ;	Lcd.h:177: return Result;
      00027E 8C 82            [24] 1232 	mov	dpl,r4
      000280 8D 83            [24] 1233 	mov	dph,r5
                                   1234 ;	Lcd.h:178: }
      000282 22               [24] 1235 	ret
                                   1236 ;------------------------------------------------------------
                                   1237 ;Allocation info for local variables in function 'LCD_ShowNum'
                                   1238 ;------------------------------------------------------------
                                   1239 ;Column                    Allocated with name '_LCD_ShowNum_PARM_2'
                                   1240 ;Number                    Allocated with name '_LCD_ShowNum_PARM_3'
                                   1241 ;Length                    Allocated with name '_LCD_ShowNum_PARM_4'
                                   1242 ;Line                      Allocated to registers 
                                   1243 ;i                         Allocated to registers 
                                   1244 ;------------------------------------------------------------
                                   1245 ;	Lcd.h:188: void LCD_ShowNum(unsigned char Line,unsigned char Column,unsigned int Number,unsigned char Length)
                                   1246 ;	-----------------------------------------
                                   1247 ;	 function LCD_ShowNum
                                   1248 ;	-----------------------------------------
      000283                       1249 _LCD_ShowNum:
                                   1250 ;	Lcd.h:191: LCD_SetCursor(Line,Column);
      000283 85*09*00         [24] 1251 	mov	_LCD_SetCursor_PARM_2,_LCD_ShowNum_PARM_2
      000286 12r01rEC         [24] 1252 	lcall	_LCD_SetCursor
                                   1253 ;	Lcd.h:192: for(i=Length;i>0;i--)
      000289 AF*0C            [24] 1254 	mov	r7,_LCD_ShowNum_PARM_4
      00028B                       1255 00103$:
      00028B EF               [12] 1256 	mov	a,r7
      00028C 60 3F            [24] 1257 	jz	00105$
                                   1258 ;	Lcd.h:194: LCD_WriteData('0'+Number/LCD_Pow(10,i-1)%10);
      00028E 8F 05            [24] 1259 	mov	ar5,r7
      000290 7E 00            [12] 1260 	mov	r6,#0x00
      000292 ED               [12] 1261 	mov	a,r5
      000293 24 FF            [12] 1262 	add	a,#0xff
      000295 F5*07            [12] 1263 	mov	_LCD_Pow_PARM_2,a
      000297 EE               [12] 1264 	mov	a,r6
      000298 34 FF            [12] 1265 	addc	a,#0xff
      00029A F5*08            [12] 1266 	mov	(_LCD_Pow_PARM_2 + 1),a
      00029C 90 00 0A         [24] 1267 	mov	dptr,#0x000a
      00029F C0 07            [24] 1268 	push	ar7
      0002A1 12r02r41         [24] 1269 	lcall	_LCD_Pow
      0002A4 AD 82            [24] 1270 	mov	r5,dpl
      0002A6 AE 83            [24] 1271 	mov	r6,dph
      0002A8 8D*00            [24] 1272 	mov	__divuint_PARM_2,r5
      0002AA 8E*01            [24] 1273 	mov	(__divuint_PARM_2 + 1),r6
      0002AC 85*0A 82         [24] 1274 	mov	dpl,_LCD_ShowNum_PARM_3
      0002AF 85*0B 83         [24] 1275 	mov	dph,(_LCD_ShowNum_PARM_3 + 1)
      0002B2 12r00r00         [24] 1276 	lcall	__divuint
      0002B5 75*00 0A         [24] 1277 	mov	__moduint_PARM_2,#0x0a
      0002B8 75*01 00         [24] 1278 	mov	(__moduint_PARM_2 + 1),#0x00
      0002BB 12r00r00         [24] 1279 	lcall	__moduint
      0002BE AD 82            [24] 1280 	mov	r5,dpl
      0002C0 74 30            [12] 1281 	mov	a,#0x30
      0002C2 2D               [12] 1282 	add	a,r5
      0002C3 F5 82            [12] 1283 	mov	dpl,a
      0002C5 12r01rC2         [24] 1284 	lcall	_LCD_WriteData
      0002C8 D0 07            [24] 1285 	pop	ar7
                                   1286 ;	Lcd.h:192: for(i=Length;i>0;i--)
      0002CA 1F               [12] 1287 	dec	r7
      0002CB 80 BE            [24] 1288 	sjmp	00103$
      0002CD                       1289 00105$:
                                   1290 ;	Lcd.h:196: }
      0002CD 22               [24] 1291 	ret
                                   1292 ;------------------------------------------------------------
                                   1293 ;Allocation info for local variables in function 'LCD_ShowSignedNum'
                                   1294 ;------------------------------------------------------------
                                   1295 ;Column                    Allocated with name '_LCD_ShowSignedNum_PARM_2'
                                   1296 ;Number                    Allocated with name '_LCD_ShowSignedNum_PARM_3'
                                   1297 ;Length                    Allocated with name '_LCD_ShowSignedNum_PARM_4'
                                   1298 ;Line                      Allocated to registers 
                                   1299 ;i                         Allocated to registers 
                                   1300 ;Number1                   Allocated to registers r6 r7 
                                   1301 ;------------------------------------------------------------
                                   1302 ;	Lcd.h:206: void LCD_ShowSignedNum(unsigned char Line,unsigned char Column,int Number,unsigned char Length)
                                   1303 ;	-----------------------------------------
                                   1304 ;	 function LCD_ShowSignedNum
                                   1305 ;	-----------------------------------------
      0002CE                       1306 _LCD_ShowSignedNum:
                                   1307 ;	Lcd.h:210: LCD_SetCursor(Line,Column);
      0002CE 85*0D*00         [24] 1308 	mov	_LCD_SetCursor_PARM_2,_LCD_ShowSignedNum_PARM_2
      0002D1 12r01rEC         [24] 1309 	lcall	_LCD_SetCursor
                                   1310 ;	Lcd.h:211: if(Number>=0)
      0002D4 E5*0F            [12] 1311 	mov	a,(_LCD_ShowSignedNum_PARM_3 + 1)
      0002D6 20 E7 0C         [24] 1312 	jb	acc.7,00102$
                                   1313 ;	Lcd.h:213: LCD_WriteData('+');
      0002D9 75 82 2B         [24] 1314 	mov	dpl,#0x2b
      0002DC 12r01rC2         [24] 1315 	lcall	_LCD_WriteData
                                   1316 ;	Lcd.h:214: Number1=Number;
      0002DF AE*0E            [24] 1317 	mov	r6,_LCD_ShowSignedNum_PARM_3
      0002E1 AF*0F            [24] 1318 	mov	r7,(_LCD_ShowSignedNum_PARM_3 + 1)
      0002E3 80 0F            [24] 1319 	sjmp	00103$
      0002E5                       1320 00102$:
                                   1321 ;	Lcd.h:218: LCD_WriteData('-');
      0002E5 75 82 2D         [24] 1322 	mov	dpl,#0x2d
      0002E8 12r01rC2         [24] 1323 	lcall	_LCD_WriteData
                                   1324 ;	Lcd.h:219: Number1=-Number;
      0002EB C3               [12] 1325 	clr	c
      0002EC E4               [12] 1326 	clr	a
      0002ED 95*0E            [12] 1327 	subb	a,_LCD_ShowSignedNum_PARM_3
      0002EF FE               [12] 1328 	mov	r6,a
      0002F0 E4               [12] 1329 	clr	a
      0002F1 95*0F            [12] 1330 	subb	a,(_LCD_ShowSignedNum_PARM_3 + 1)
      0002F3 FF               [12] 1331 	mov	r7,a
      0002F4                       1332 00103$:
                                   1333 ;	Lcd.h:221: for(i=Length;i>0;i--)
      0002F4 AD*10            [24] 1334 	mov	r5,_LCD_ShowSignedNum_PARM_4
      0002F6                       1335 00106$:
      0002F6 ED               [12] 1336 	mov	a,r5
      0002F7 60 51            [24] 1337 	jz	00108$
                                   1338 ;	Lcd.h:223: LCD_WriteData('0'+Number1/LCD_Pow(10,i-1)%10);
      0002F9 8D 03            [24] 1339 	mov	ar3,r5
      0002FB 7C 00            [12] 1340 	mov	r4,#0x00
      0002FD EB               [12] 1341 	mov	a,r3
      0002FE 24 FF            [12] 1342 	add	a,#0xff
      000300 F5*07            [12] 1343 	mov	_LCD_Pow_PARM_2,a
      000302 EC               [12] 1344 	mov	a,r4
      000303 34 FF            [12] 1345 	addc	a,#0xff
      000305 F5*08            [12] 1346 	mov	(_LCD_Pow_PARM_2 + 1),a
      000307 90 00 0A         [24] 1347 	mov	dptr,#0x000a
      00030A C0 07            [24] 1348 	push	ar7
      00030C C0 06            [24] 1349 	push	ar6
      00030E C0 05            [24] 1350 	push	ar5
      000310 12r02r41         [24] 1351 	lcall	_LCD_Pow
      000313 AB 82            [24] 1352 	mov	r3,dpl
      000315 AC 83            [24] 1353 	mov	r4,dph
      000317 D0 05            [24] 1354 	pop	ar5
      000319 D0 06            [24] 1355 	pop	ar6
      00031B D0 07            [24] 1356 	pop	ar7
      00031D 8B*00            [24] 1357 	mov	__divuint_PARM_2,r3
      00031F 8C*01            [24] 1358 	mov	(__divuint_PARM_2 + 1),r4
      000321 8E 82            [24] 1359 	mov	dpl,r6
      000323 8F 83            [24] 1360 	mov	dph,r7
      000325 C0 07            [24] 1361 	push	ar7
      000327 C0 06            [24] 1362 	push	ar6
      000329 C0 05            [24] 1363 	push	ar5
      00032B 12r00r00         [24] 1364 	lcall	__divuint
      00032E 75*00 0A         [24] 1365 	mov	__moduint_PARM_2,#0x0a
      000331 75*01 00         [24] 1366 	mov	(__moduint_PARM_2 + 1),#0x00
      000334 12r00r00         [24] 1367 	lcall	__moduint
      000337 AB 82            [24] 1368 	mov	r3,dpl
      000339 74 30            [12] 1369 	mov	a,#0x30
      00033B 2B               [12] 1370 	add	a,r3
      00033C F5 82            [12] 1371 	mov	dpl,a
      00033E 12r01rC2         [24] 1372 	lcall	_LCD_WriteData
      000341 D0 05            [24] 1373 	pop	ar5
      000343 D0 06            [24] 1374 	pop	ar6
      000345 D0 07            [24] 1375 	pop	ar7
                                   1376 ;	Lcd.h:221: for(i=Length;i>0;i--)
      000347 1D               [12] 1377 	dec	r5
      000348 80 AC            [24] 1378 	sjmp	00106$
      00034A                       1379 00108$:
                                   1380 ;	Lcd.h:225: }
      00034A 22               [24] 1381 	ret
                                   1382 ;------------------------------------------------------------
                                   1383 ;Allocation info for local variables in function 'LCD_ShowHexNum'
                                   1384 ;------------------------------------------------------------
                                   1385 ;Column                    Allocated with name '_LCD_ShowHexNum_PARM_2'
                                   1386 ;Number                    Allocated with name '_LCD_ShowHexNum_PARM_3'
                                   1387 ;Length                    Allocated with name '_LCD_ShowHexNum_PARM_4'
                                   1388 ;Line                      Allocated to registers 
                                   1389 ;i                         Allocated to registers 
                                   1390 ;SingleNumber              Allocated to registers r5 
                                   1391 ;------------------------------------------------------------
                                   1392 ;	Lcd.h:235: void LCD_ShowHexNum(unsigned char Line,unsigned char Column,unsigned int Number,unsigned char Length)
                                   1393 ;	-----------------------------------------
                                   1394 ;	 function LCD_ShowHexNum
                                   1395 ;	-----------------------------------------
      00034B                       1396 _LCD_ShowHexNum:
                                   1397 ;	Lcd.h:239: LCD_SetCursor(Line,Column);
      00034B 85*11*00         [24] 1398 	mov	_LCD_SetCursor_PARM_2,_LCD_ShowHexNum_PARM_2
      00034E 12r01rEC         [24] 1399 	lcall	_LCD_SetCursor
                                   1400 ;	Lcd.h:240: for(i=Length;i>0;i--)
      000351 AF*14            [24] 1401 	mov	r7,_LCD_ShowHexNum_PARM_4
      000353                       1402 00106$:
      000353 EF               [12] 1403 	mov	a,r7
      000354 60 55            [24] 1404 	jz	00108$
                                   1405 ;	Lcd.h:242: SingleNumber=Number/LCD_Pow(16,i-1)%16;
      000356 8F 05            [24] 1406 	mov	ar5,r7
      000358 7E 00            [12] 1407 	mov	r6,#0x00
      00035A ED               [12] 1408 	mov	a,r5
      00035B 24 FF            [12] 1409 	add	a,#0xff
      00035D F5*07            [12] 1410 	mov	_LCD_Pow_PARM_2,a
      00035F EE               [12] 1411 	mov	a,r6
      000360 34 FF            [12] 1412 	addc	a,#0xff
      000362 F5*08            [12] 1413 	mov	(_LCD_Pow_PARM_2 + 1),a
      000364 90 00 10         [24] 1414 	mov	dptr,#0x0010
      000367 C0 07            [24] 1415 	push	ar7
      000369 12r02r41         [24] 1416 	lcall	_LCD_Pow
      00036C AD 82            [24] 1417 	mov	r5,dpl
      00036E AE 83            [24] 1418 	mov	r6,dph
      000370 8D*00            [24] 1419 	mov	__divuint_PARM_2,r5
      000372 8E*01            [24] 1420 	mov	(__divuint_PARM_2 + 1),r6
      000374 85*12 82         [24] 1421 	mov	dpl,_LCD_ShowHexNum_PARM_3
      000377 85*13 83         [24] 1422 	mov	dph,(_LCD_ShowHexNum_PARM_3 + 1)
      00037A 12r00r00         [24] 1423 	lcall	__divuint
      00037D E5 82            [12] 1424 	mov	a,dpl
      00037F 85 83 F0         [24] 1425 	mov	b,dph
      000382 D0 07            [24] 1426 	pop	ar7
      000384 54 0F            [12] 1427 	anl	a,#0x0f
      000386 FD               [12] 1428 	mov	r5,a
                                   1429 ;	Lcd.h:243: if(SingleNumber<10)
      000387 BD 0A 00         [24] 1430 	cjne	r5,#0x0a,00126$
      00038A                       1431 00126$:
      00038A 50 10            [24] 1432 	jnc	00102$
                                   1433 ;	Lcd.h:245: LCD_WriteData('0'+SingleNumber);
      00038C 8D 06            [24] 1434 	mov	ar6,r5
      00038E 74 30            [12] 1435 	mov	a,#0x30
      000390 2E               [12] 1436 	add	a,r6
      000391 F5 82            [12] 1437 	mov	dpl,a
      000393 C0 07            [24] 1438 	push	ar7
      000395 12r01rC2         [24] 1439 	lcall	_LCD_WriteData
      000398 D0 07            [24] 1440 	pop	ar7
      00039A 80 0C            [24] 1441 	sjmp	00107$
      00039C                       1442 00102$:
                                   1443 ;	Lcd.h:249: LCD_WriteData('A'+SingleNumber-10);
      00039C 74 37            [12] 1444 	mov	a,#0x37
      00039E 2D               [12] 1445 	add	a,r5
      00039F F5 82            [12] 1446 	mov	dpl,a
      0003A1 C0 07            [24] 1447 	push	ar7
      0003A3 12r01rC2         [24] 1448 	lcall	_LCD_WriteData
      0003A6 D0 07            [24] 1449 	pop	ar7
      0003A8                       1450 00107$:
                                   1451 ;	Lcd.h:240: for(i=Length;i>0;i--)
      0003A8 1F               [12] 1452 	dec	r7
      0003A9 80 A8            [24] 1453 	sjmp	00106$
      0003AB                       1454 00108$:
                                   1455 ;	Lcd.h:252: }
      0003AB 22               [24] 1456 	ret
                                   1457 ;------------------------------------------------------------
                                   1458 ;Allocation info for local variables in function 'LCD_ShowBinNum'
                                   1459 ;------------------------------------------------------------
                                   1460 ;Column                    Allocated with name '_LCD_ShowBinNum_PARM_2'
                                   1461 ;Number                    Allocated with name '_LCD_ShowBinNum_PARM_3'
                                   1462 ;Length                    Allocated with name '_LCD_ShowBinNum_PARM_4'
                                   1463 ;Line                      Allocated to registers 
                                   1464 ;i                         Allocated to registers 
                                   1465 ;------------------------------------------------------------
                                   1466 ;	Lcd.h:262: void LCD_ShowBinNum(unsigned char Line,unsigned char Column,unsigned int Number,unsigned char Length)
                                   1467 ;	-----------------------------------------
                                   1468 ;	 function LCD_ShowBinNum
                                   1469 ;	-----------------------------------------
      0003AC                       1470 _LCD_ShowBinNum:
                                   1471 ;	Lcd.h:265: LCD_SetCursor(Line,Column);
      0003AC 85*15*00         [24] 1472 	mov	_LCD_SetCursor_PARM_2,_LCD_ShowBinNum_PARM_2
      0003AF 12r01rEC         [24] 1473 	lcall	_LCD_SetCursor
                                   1474 ;	Lcd.h:266: for(i=Length;i>0;i--)
      0003B2 AF*18            [24] 1475 	mov	r7,_LCD_ShowBinNum_PARM_4
      0003B4                       1476 00103$:
      0003B4 EF               [12] 1477 	mov	a,r7
      0003B5 60 3A            [24] 1478 	jz	00105$
                                   1479 ;	Lcd.h:268: LCD_WriteData('0'+Number/LCD_Pow(2,i-1)%2);
      0003B7 8F 05            [24] 1480 	mov	ar5,r7
      0003B9 7E 00            [12] 1481 	mov	r6,#0x00
      0003BB ED               [12] 1482 	mov	a,r5
      0003BC 24 FF            [12] 1483 	add	a,#0xff
      0003BE F5*07            [12] 1484 	mov	_LCD_Pow_PARM_2,a
      0003C0 EE               [12] 1485 	mov	a,r6
      0003C1 34 FF            [12] 1486 	addc	a,#0xff
      0003C3 F5*08            [12] 1487 	mov	(_LCD_Pow_PARM_2 + 1),a
      0003C5 90 00 02         [24] 1488 	mov	dptr,#0x0002
      0003C8 C0 07            [24] 1489 	push	ar7
      0003CA 12r02r41         [24] 1490 	lcall	_LCD_Pow
      0003CD AD 82            [24] 1491 	mov	r5,dpl
      0003CF AE 83            [24] 1492 	mov	r6,dph
      0003D1 8D*00            [24] 1493 	mov	__divuint_PARM_2,r5
      0003D3 8E*01            [24] 1494 	mov	(__divuint_PARM_2 + 1),r6
      0003D5 85*16 82         [24] 1495 	mov	dpl,_LCD_ShowBinNum_PARM_3
      0003D8 85*17 83         [24] 1496 	mov	dph,(_LCD_ShowBinNum_PARM_3 + 1)
      0003DB 12r00r00         [24] 1497 	lcall	__divuint
      0003DE E5 82            [12] 1498 	mov	a,dpl
      0003E0 85 83 F0         [24] 1499 	mov	b,dph
      0003E3 54 01            [12] 1500 	anl	a,#0x01
      0003E5 24 30            [12] 1501 	add	a,#0x30
      0003E7 F5 82            [12] 1502 	mov	dpl,a
      0003E9 12r01rC2         [24] 1503 	lcall	_LCD_WriteData
      0003EC D0 07            [24] 1504 	pop	ar7
                                   1505 ;	Lcd.h:266: for(i=Length;i>0;i--)
      0003EE 1F               [12] 1506 	dec	r7
      0003EF 80 C3            [24] 1507 	sjmp	00103$
      0003F1                       1508 00105$:
                                   1509 ;	Lcd.h:270: }
      0003F1 22               [24] 1510 	ret
                                   1511 ;------------------------------------------------------------
                                   1512 ;Allocation info for local variables in function 'I2C_Start'
                                   1513 ;------------------------------------------------------------
                                   1514 ;	I2C.h:49: void I2C_Start(void)
                                   1515 ;	-----------------------------------------
                                   1516 ;	 function I2C_Start
                                   1517 ;	-----------------------------------------
      0003F2                       1518 _I2C_Start:
                                   1519 ;	I2C.h:51: I2C_SDA = 1;  // 设置数据线为高电平
                                   1520 ;	assignBit
      0003F2 D2 92            [12] 1521 	setb	_P1_2
                                   1522 ;	I2C.h:52: I2C_SCL = 1;  // 设置时钟线为高电平
                                   1523 ;	assignBit
      0003F4 D2 97            [12] 1524 	setb	_P1_7
                                   1525 ;	I2C.h:54: I2C_SDA = 0;  // 设置数据线为低电平（启动信号）
                                   1526 ;	assignBit
      0003F6 C2 92            [12] 1527 	clr	_P1_2
                                   1528 ;	I2C.h:55: I2C_SCL = 0;  // 设置时钟线为低电平
                                   1529 ;	assignBit
      0003F8 C2 97            [12] 1530 	clr	_P1_7
                                   1531 ;	I2C.h:56: }
      0003FA 22               [24] 1532 	ret
                                   1533 ;------------------------------------------------------------
                                   1534 ;Allocation info for local variables in function 'I2C_Stop'
                                   1535 ;------------------------------------------------------------
                                   1536 ;	I2C.h:61: void I2C_Stop(void)
                                   1537 ;	-----------------------------------------
                                   1538 ;	 function I2C_Stop
                                   1539 ;	-----------------------------------------
      0003FB                       1540 _I2C_Stop:
                                   1541 ;	I2C.h:63: I2C_SDA = 0;  // 设置数据线为低电平
                                   1542 ;	assignBit
      0003FB C2 92            [12] 1543 	clr	_P1_2
                                   1544 ;	I2C.h:64: I2C_SCL = 1;  // 设置时钟线为高电平
                                   1545 ;	assignBit
      0003FD D2 97            [12] 1546 	setb	_P1_7
                                   1547 ;	I2C.h:65: I2C_SDA = 1;  // 设置数据线为高电平（停止信号）
                                   1548 ;	assignBit
      0003FF D2 92            [12] 1549 	setb	_P1_2
                                   1550 ;	I2C.h:66: }
      000401 22               [24] 1551 	ret
                                   1552 ;------------------------------------------------------------
                                   1553 ;Allocation info for local variables in function 'I2C_SendByte'
                                   1554 ;------------------------------------------------------------
                                   1555 ;Byte                      Allocated to registers r7 
                                   1556 ;i                         Allocated to registers r6 
                                   1557 ;------------------------------------------------------------
                                   1558 ;	I2C.h:71: void I2C_SendByte(unsigned char Byte)
                                   1559 ;	-----------------------------------------
                                   1560 ;	 function I2C_SendByte
                                   1561 ;	-----------------------------------------
      000402                       1562 _I2C_SendByte:
      000402 AF 82            [24] 1563 	mov	r7,dpl
                                   1564 ;	I2C.h:74: for(i=0; i<8; i++)
      000404 7E 00            [12] 1565 	mov	r6,#0x00
      000406                       1566 00102$:
                                   1567 ;	I2C.h:76: I2C_SDA = Byte & (0x80 >> i);  // 根据字节的每一位数据设置数据线
      000406 8E F0            [24] 1568 	mov	b,r6
      000408 05 F0            [12] 1569 	inc	b
      00040A 7C 80            [12] 1570 	mov	r4,#0x80
      00040C E4               [12] 1571 	clr	a
      00040D FD               [12] 1572 	mov	r5,a
      00040E 33               [12] 1573 	rlc	a
      00040F 92 D2            [24] 1574 	mov	ov,c
      000411 80 08            [24] 1575 	sjmp	00112$
      000413                       1576 00111$:
      000413 A2 D2            [12] 1577 	mov	c,ov
      000415 ED               [12] 1578 	mov	a,r5
      000416 13               [12] 1579 	rrc	a
      000417 FD               [12] 1580 	mov	r5,a
      000418 EC               [12] 1581 	mov	a,r4
      000419 13               [12] 1582 	rrc	a
      00041A FC               [12] 1583 	mov	r4,a
      00041B                       1584 00112$:
      00041B D5 F0 F5         [24] 1585 	djnz	b,00111$
      00041E 8F 02            [24] 1586 	mov	ar2,r7
      000420 7B 00            [12] 1587 	mov	r3,#0x00
      000422 EA               [12] 1588 	mov	a,r2
      000423 52 04            [12] 1589 	anl	ar4,a
      000425 EB               [12] 1590 	mov	a,r3
      000426 52 05            [12] 1591 	anl	ar5,a
                                   1592 ;	assignBit
      000428 EC               [12] 1593 	mov	a,r4
      000429 4D               [12] 1594 	orl	a,r5
      00042A 24 FF            [12] 1595 	add	a,#0xff
      00042C 92 92            [24] 1596 	mov	_P1_2,c
                                   1597 ;	I2C.h:77: I2C_SCL = 1;  // 设置时钟线为高电平（数据线稳定）
                                   1598 ;	assignBit
      00042E D2 97            [12] 1599 	setb	_P1_7
                                   1600 ;	I2C.h:78: I2C_SCL = 0;  // 设置时钟线为低电平
                                   1601 ;	assignBit
      000430 C2 97            [12] 1602 	clr	_P1_7
                                   1603 ;	I2C.h:74: for(i=0; i<8; i++)
      000432 0E               [12] 1604 	inc	r6
      000433 BE 08 00         [24] 1605 	cjne	r6,#0x08,00113$
      000436                       1606 00113$:
      000436 40 CE            [24] 1607 	jc	00102$
                                   1608 ;	I2C.h:80: }
      000438 22               [24] 1609 	ret
                                   1610 ;------------------------------------------------------------
                                   1611 ;Allocation info for local variables in function 'I2C_ReciveByte'
                                   1612 ;------------------------------------------------------------
                                   1613 ;i                         Allocated to registers r6 
                                   1614 ;Byte                      Allocated to registers r7 
                                   1615 ;------------------------------------------------------------
                                   1616 ;	I2C.h:85: unsigned char I2C_ReciveByte(void)
                                   1617 ;	-----------------------------------------
                                   1618 ;	 function I2C_ReciveByte
                                   1619 ;	-----------------------------------------
      000439                       1620 _I2C_ReciveByte:
                                   1621 ;	I2C.h:87: unsigned char i, Byte = 0x00;
      000439 7F 00            [12] 1622 	mov	r7,#0x00
                                   1623 ;	I2C.h:88: I2C_SDA = 1;  // 设置数据线为高电平
                                   1624 ;	assignBit
      00043B D2 92            [12] 1625 	setb	_P1_2
                                   1626 ;	I2C.h:89: for (i = 0; i < 8; i++)
      00043D 7E 00            [12] 1627 	mov	r6,#0x00
      00043F                       1628 00104$:
                                   1629 ;	I2C.h:91: I2C_SCL = 1;  // 设置时钟线为高电平（接收数据）
                                   1630 ;	assignBit
      00043F D2 97            [12] 1631 	setb	_P1_7
                                   1632 ;	I2C.h:92: if(I2C_SDA){Byte |= (0x80 >> i);}  // 读取数据线的值并设置字节的对应位 
      000441 30 92 1B         [24] 1633 	jnb	_P1_2,00102$
      000444 8E F0            [24] 1634 	mov	b,r6
      000446 05 F0            [12] 1635 	inc	b
      000448 7C 80            [12] 1636 	mov	r4,#0x80
      00044A E4               [12] 1637 	clr	a
      00044B FD               [12] 1638 	mov	r5,a
      00044C 33               [12] 1639 	rlc	a
      00044D 92 D2            [24] 1640 	mov	ov,c
      00044F 80 08            [24] 1641 	sjmp	00123$
      000451                       1642 00122$:
      000451 A2 D2            [12] 1643 	mov	c,ov
      000453 ED               [12] 1644 	mov	a,r5
      000454 13               [12] 1645 	rrc	a
      000455 FD               [12] 1646 	mov	r5,a
      000456 EC               [12] 1647 	mov	a,r4
      000457 13               [12] 1648 	rrc	a
      000458 FC               [12] 1649 	mov	r4,a
      000459                       1650 00123$:
      000459 D5 F0 F5         [24] 1651 	djnz	b,00122$
      00045C EC               [12] 1652 	mov	a,r4
      00045D 42 07            [12] 1653 	orl	ar7,a
      00045F                       1654 00102$:
                                   1655 ;	I2C.h:93: I2C_SCL = 0;  // 设置时钟线为低电平
                                   1656 ;	assignBit
      00045F C2 97            [12] 1657 	clr	_P1_7
                                   1658 ;	I2C.h:89: for (i = 0; i < 8; i++)
      000461 0E               [12] 1659 	inc	r6
      000462 BE 08 00         [24] 1660 	cjne	r6,#0x08,00124$
      000465                       1661 00124$:
      000465 40 D8            [24] 1662 	jc	00104$
                                   1663 ;	I2C.h:95: return Byte;
      000467 8F 82            [24] 1664 	mov	dpl,r7
                                   1665 ;	I2C.h:96: }
      000469 22               [24] 1666 	ret
                                   1667 ;------------------------------------------------------------
                                   1668 ;Allocation info for local variables in function 'I2C_SendAck'
                                   1669 ;------------------------------------------------------------
                                   1670 ;Ack                       Allocated to registers r7 
                                   1671 ;------------------------------------------------------------
                                   1672 ;	I2C.h:101: void I2C_SendAck(unsigned char Ack)
                                   1673 ;	-----------------------------------------
                                   1674 ;	 function I2C_SendAck
                                   1675 ;	-----------------------------------------
      00046A                       1676 _I2C_SendAck:
                                   1677 ;	I2C.h:103: I2C_SDA = Ack;  // 设置数据线为应答值
                                   1678 ;	assignBit
      00046A E5 82            [12] 1679 	mov	a,dpl
      00046C 24 FF            [12] 1680 	add	a,#0xff
      00046E 92 92            [24] 1681 	mov	_P1_2,c
                                   1682 ;	I2C.h:104: I2C_SCL = 1;  // 设置时钟线为高电平
                                   1683 ;	assignBit
      000470 D2 97            [12] 1684 	setb	_P1_7
                                   1685 ;	I2C.h:105: I2C_SCL = 0;  // 设置时钟线为低电平
                                   1686 ;	assignBit
      000472 C2 97            [12] 1687 	clr	_P1_7
                                   1688 ;	I2C.h:106: }
      000474 22               [24] 1689 	ret
                                   1690 ;------------------------------------------------------------
                                   1691 ;Allocation info for local variables in function 'I2C_ReciveAck'
                                   1692 ;------------------------------------------------------------
                                   1693 ;Ack                       Allocated to registers 
                                   1694 ;------------------------------------------------------------
                                   1695 ;	I2C.h:111: unsigned char I2C_ReciveAck(void)
                                   1696 ;	-----------------------------------------
                                   1697 ;	 function I2C_ReciveAck
                                   1698 ;	-----------------------------------------
      000475                       1699 _I2C_ReciveAck:
                                   1700 ;	I2C.h:114: I2C_SDA = 1;  // 设置数据线为高电平
                                   1701 ;	assignBit
      000475 D2 92            [12] 1702 	setb	_P1_2
                                   1703 ;	I2C.h:115: I2C_SCL = 1;  // 设置时钟线为高电平（接收应答）
                                   1704 ;	assignBit
      000477 D2 97            [12] 1705 	setb	_P1_7
                                   1706 ;	I2C.h:116: Ack = I2C_SDA;  // 读取数据线的值作为应答值
      000479 A2 92            [12] 1707 	mov	c,_P1_2
      00047B E4               [12] 1708 	clr	a
      00047C 33               [12] 1709 	rlc	a
      00047D F5 82            [12] 1710 	mov	dpl,a
                                   1711 ;	I2C.h:117: I2C_SCL = 0;  // 设置时钟线为低电平
                                   1712 ;	assignBit
      00047F C2 97            [12] 1713 	clr	_P1_7
                                   1714 ;	I2C.h:118: return Ack;
                                   1715 ;	I2C.h:119: }
      000481 22               [24] 1716 	ret
                                   1717 ;------------------------------------------------------------
                                   1718 ;Allocation info for local variables in function 'delay_ATC'
                                   1719 ;------------------------------------------------------------
                                   1720 ;a                         Allocated to registers r6 r7 
                                   1721 ;b                         Allocated to registers r4 r5 
                                   1722 ;------------------------------------------------------------
                                   1723 ;	AT24C02.h:46: void delay_ATC()
                                   1724 ;	-----------------------------------------
                                   1725 ;	 function delay_ATC
                                   1726 ;	-----------------------------------------
      000482                       1727 _delay_ATC:
                                   1728 ;	AT24C02.h:49: for(a = 10; a > 0; a--)
      000482 7E 0A            [12] 1729 	mov	r6,#0x0a
      000484 7F 00            [12] 1730 	mov	r7,#0x00
      000486                       1731 00105$:
                                   1732 ;	AT24C02.h:51: for(b = 400; b > 0; b--);
      000486 7C 90            [12] 1733 	mov	r4,#0x90
      000488 7D 01            [12] 1734 	mov	r5,#0x01
      00048A                       1735 00104$:
      00048A EC               [12] 1736 	mov	a,r4
      00048B 24 FF            [12] 1737 	add	a,#0xff
      00048D FA               [12] 1738 	mov	r2,a
      00048E ED               [12] 1739 	mov	a,r5
      00048F 34 FF            [12] 1740 	addc	a,#0xff
      000491 FB               [12] 1741 	mov	r3,a
      000492 8A 04            [24] 1742 	mov	ar4,r2
      000494 8B 05            [24] 1743 	mov	ar5,r3
      000496 EA               [12] 1744 	mov	a,r2
      000497 4B               [12] 1745 	orl	a,r3
      000498 70 F0            [24] 1746 	jnz	00104$
                                   1747 ;	AT24C02.h:49: for(a = 10; a > 0; a--)
      00049A EE               [12] 1748 	mov	a,r6
      00049B 24 FF            [12] 1749 	add	a,#0xff
      00049D FC               [12] 1750 	mov	r4,a
      00049E EF               [12] 1751 	mov	a,r7
      00049F 34 FF            [12] 1752 	addc	a,#0xff
      0004A1 FD               [12] 1753 	mov	r5,a
      0004A2 8C 06            [24] 1754 	mov	ar6,r4
      0004A4 8D 07            [24] 1755 	mov	ar7,r5
      0004A6 EC               [12] 1756 	mov	a,r4
      0004A7 4D               [12] 1757 	orl	a,r5
      0004A8 70 DC            [24] 1758 	jnz	00105$
                                   1759 ;	AT24C02.h:53: }
      0004AA 22               [24] 1760 	ret
                                   1761 ;------------------------------------------------------------
                                   1762 ;Allocation info for local variables in function 'AT24C02_WriteByte'
                                   1763 ;------------------------------------------------------------
                                   1764 ;data                      Allocated with name '_AT24C02_WriteByte_PARM_2'
                                   1765 ;add                       Allocated to registers r7 
                                   1766 ;------------------------------------------------------------
                                   1767 ;	AT24C02.h:58: void AT24C02_WriteByte(unsigned char add,unsigned char data)
                                   1768 ;	-----------------------------------------
                                   1769 ;	 function AT24C02_WriteByte
                                   1770 ;	-----------------------------------------
      0004AB                       1771 _AT24C02_WriteByte:
      0004AB AF 82            [24] 1772 	mov	r7,dpl
                                   1773 ;	AT24C02.h:60: I2C_Start();                         // 发送起始信号
      0004AD C0 07            [24] 1774 	push	ar7
      0004AF 12r03rF2         [24] 1775 	lcall	_I2C_Start
                                   1776 ;	AT24C02.h:61: I2C_SendByte(AT24C02_ADDR);          // 发送EEPROM地址
      0004B2 75 82 A0         [24] 1777 	mov	dpl,#0xa0
      0004B5 12r04r02         [24] 1778 	lcall	_I2C_SendByte
                                   1779 ;	AT24C02.h:62: I2C_ReciveAck();                     // 接收ACK信号
      0004B8 12r04r75         [24] 1780 	lcall	_I2C_ReciveAck
      0004BB D0 07            [24] 1781 	pop	ar7
                                   1782 ;	AT24C02.h:64: I2C_SendByte(add);                   // 发送要写入的地址
      0004BD 8F 82            [24] 1783 	mov	dpl,r7
      0004BF 12r04r02         [24] 1784 	lcall	_I2C_SendByte
                                   1785 ;	AT24C02.h:65: I2C_ReciveAck();                     // 接收ACK信号
      0004C2 12r04r75         [24] 1786 	lcall	_I2C_ReciveAck
                                   1787 ;	AT24C02.h:66: I2C_SendByte(data);                  // 发送要写入的数据
      0004C5 85*19 82         [24] 1788 	mov	dpl,_AT24C02_WriteByte_PARM_2
      0004C8 12r04r02         [24] 1789 	lcall	_I2C_SendByte
                                   1790 ;	AT24C02.h:67: I2C_ReciveAck();                     // 接收ACK信号
      0004CB 12r04r75         [24] 1791 	lcall	_I2C_ReciveAck
                                   1792 ;	AT24C02.h:68: I2C_Stop();                          // 发送停止信号
      0004CE 12r03rFB         [24] 1793 	lcall	_I2C_Stop
                                   1794 ;	AT24C02.h:69: delay_ATC();                         // 等待EEPROM写入完成
                                   1795 ;	AT24C02.h:70: }
      0004D1 02r04r82         [24] 1796 	ljmp	_delay_ATC
                                   1797 ;------------------------------------------------------------
                                   1798 ;Allocation info for local variables in function 'AT24C02_ReadByte'
                                   1799 ;------------------------------------------------------------
                                   1800 ;add                       Allocated to registers r7 
                                   1801 ;data                      Allocated to registers r7 
                                   1802 ;------------------------------------------------------------
                                   1803 ;	AT24C02.h:75: unsigned char AT24C02_ReadByte(unsigned char add)
                                   1804 ;	-----------------------------------------
                                   1805 ;	 function AT24C02_ReadByte
                                   1806 ;	-----------------------------------------
      0004D4                       1807 _AT24C02_ReadByte:
      0004D4 AF 82            [24] 1808 	mov	r7,dpl
                                   1809 ;	AT24C02.h:78: I2C_Start();                         // 发送起始信号
      0004D6 C0 07            [24] 1810 	push	ar7
      0004D8 12r03rF2         [24] 1811 	lcall	_I2C_Start
                                   1812 ;	AT24C02.h:79: I2C_SendByte(AT24C02_ADDR);          // 发送EEPROM地址
      0004DB 75 82 A0         [24] 1813 	mov	dpl,#0xa0
      0004DE 12r04r02         [24] 1814 	lcall	_I2C_SendByte
                                   1815 ;	AT24C02.h:80: I2C_ReciveAck();                     // 接收ACK信号
      0004E1 12r04r75         [24] 1816 	lcall	_I2C_ReciveAck
      0004E4 D0 07            [24] 1817 	pop	ar7
                                   1818 ;	AT24C02.h:81: I2C_SendByte(add);                   // 发送要读取的地址
      0004E6 8F 82            [24] 1819 	mov	dpl,r7
      0004E8 12r04r02         [24] 1820 	lcall	_I2C_SendByte
                                   1821 ;	AT24C02.h:82: I2C_ReciveAck();                     // 接收ACK信号
      0004EB 12r04r75         [24] 1822 	lcall	_I2C_ReciveAck
                                   1823 ;	AT24C02.h:84: I2C_Start();                         // 发送重复起始信号
      0004EE 12r03rF2         [24] 1824 	lcall	_I2C_Start
                                   1825 ;	AT24C02.h:85: I2C_SendByte(AT24C02_ADDR | 0x01);   // 发送带读位的EEPROM地址
      0004F1 75 82 A1         [24] 1826 	mov	dpl,#0xa1
      0004F4 12r04r02         [24] 1827 	lcall	_I2C_SendByte
                                   1828 ;	AT24C02.h:86: I2C_ReciveAck();                     // 接收ACK信号
      0004F7 12r04r75         [24] 1829 	lcall	_I2C_ReciveAck
                                   1830 ;	AT24C02.h:87: data = I2C_ReciveByte();             // 读取数据
      0004FA 12r04r39         [24] 1831 	lcall	_I2C_ReciveByte
      0004FD AF 82            [24] 1832 	mov	r7,dpl
                                   1833 ;	AT24C02.h:88: I2C_SendAck(1);                      // 发送NACK信号
      0004FF 75 82 01         [24] 1834 	mov	dpl,#0x01
      000502 C0 07            [24] 1835 	push	ar7
      000504 12r04r6A         [24] 1836 	lcall	_I2C_SendAck
                                   1837 ;	AT24C02.h:89: I2C_Stop();                          // 发送停止信号
      000507 12r03rFB         [24] 1838 	lcall	_I2C_Stop
      00050A D0 07            [24] 1839 	pop	ar7
                                   1840 ;	AT24C02.h:90: return data;    
      00050C 8F 82            [24] 1841 	mov	dpl,r7
                                   1842 ;	AT24C02.h:91: }
      00050E 22               [24] 1843 	ret
                                   1844 ;------------------------------------------------------------
                                   1845 ;Allocation info for local variables in function 'delay_key'
                                   1846 ;------------------------------------------------------------
                                   1847 ;a                         Allocated to registers r6 r7 
                                   1848 ;b                         Allocated to registers r4 r5 
                                   1849 ;------------------------------------------------------------
                                   1850 ;	Key.h:40: void delay_key()
                                   1851 ;	-----------------------------------------
                                   1852 ;	 function delay_key
                                   1853 ;	-----------------------------------------
      00050F                       1854 _delay_key:
                                   1855 ;	Key.h:43: for(a = 10; a > 0; a--)
      00050F 7E 0A            [12] 1856 	mov	r6,#0x0a
      000511 7F 00            [12] 1857 	mov	r7,#0x00
      000513                       1858 00105$:
                                   1859 ;	Key.h:45: for(b = 400; b > 0; b--);
      000513 7C 90            [12] 1860 	mov	r4,#0x90
      000515 7D 01            [12] 1861 	mov	r5,#0x01
      000517                       1862 00104$:
      000517 EC               [12] 1863 	mov	a,r4
      000518 24 FF            [12] 1864 	add	a,#0xff
      00051A FA               [12] 1865 	mov	r2,a
      00051B ED               [12] 1866 	mov	a,r5
      00051C 34 FF            [12] 1867 	addc	a,#0xff
      00051E FB               [12] 1868 	mov	r3,a
      00051F 8A 04            [24] 1869 	mov	ar4,r2
      000521 8B 05            [24] 1870 	mov	ar5,r3
      000523 EA               [12] 1871 	mov	a,r2
      000524 4B               [12] 1872 	orl	a,r3
      000525 70 F0            [24] 1873 	jnz	00104$
                                   1874 ;	Key.h:43: for(a = 10; a > 0; a--)
      000527 EE               [12] 1875 	mov	a,r6
      000528 24 FF            [12] 1876 	add	a,#0xff
      00052A FC               [12] 1877 	mov	r4,a
      00052B EF               [12] 1878 	mov	a,r7
      00052C 34 FF            [12] 1879 	addc	a,#0xff
      00052E FD               [12] 1880 	mov	r5,a
      00052F 8C 06            [24] 1881 	mov	ar6,r4
      000531 8D 07            [24] 1882 	mov	ar7,r5
      000533 EC               [12] 1883 	mov	a,r4
      000534 4D               [12] 1884 	orl	a,r5
      000535 70 DC            [24] 1885 	jnz	00105$
                                   1886 ;	Key.h:47: }
      000537 22               [24] 1887 	ret
                                   1888 ;------------------------------------------------------------
                                   1889 ;Allocation info for local variables in function 'Key'
                                   1890 ;------------------------------------------------------------
                                   1891 ;KeyNum                    Allocated to registers r6 r7 
                                   1892 ;------------------------------------------------------------
                                   1893 ;	Key.h:54: unsigned int Key()
                                   1894 ;	-----------------------------------------
                                   1895 ;	 function Key
                                   1896 ;	-----------------------------------------
      000538                       1897 _Key:
                                   1898 ;	Key.h:56: unsigned int KeyNum = 0;
      000538 7E 00            [12] 1899 	mov	r6,#0x00
      00053A 7F 00            [12] 1900 	mov	r7,#0x00
                                   1901 ;	Key.h:57: if(P3_0 == 0){delay_key();while(P3_0 == 0);delay_key();KeyNum = 1;}
      00053C 20 B0 0D         [24] 1902 	jb	_P3_0,00105$
      00053F 12r05r0F         [24] 1903 	lcall	_delay_key
      000542                       1904 00101$:
      000542 30 B0 FD         [24] 1905 	jnb	_P3_0,00101$
      000545 12r05r0F         [24] 1906 	lcall	_delay_key
      000548 7E 01            [12] 1907 	mov	r6,#0x01
      00054A 7F 00            [12] 1908 	mov	r7,#0x00
      00054C                       1909 00105$:
                                   1910 ;	Key.h:58: if(P3_1 == 0){delay_key();while(P3_1 == 0);delay_key();KeyNum = 2;}
      00054C 20 B1 0D         [24] 1911 	jb	_P3_1,00110$
      00054F 12r05r0F         [24] 1912 	lcall	_delay_key
      000552                       1913 00106$:
      000552 30 B1 FD         [24] 1914 	jnb	_P3_1,00106$
      000555 12r05r0F         [24] 1915 	lcall	_delay_key
      000558 7E 02            [12] 1916 	mov	r6,#0x02
      00055A 7F 00            [12] 1917 	mov	r7,#0x00
      00055C                       1918 00110$:
                                   1919 ;	Key.h:59: if(P3_2 == 0){delay_key();while(P3_2 == 0);delay_key();KeyNum = 3;}
      00055C 20 B2 0D         [24] 1920 	jb	_P3_2,00115$
      00055F 12r05r0F         [24] 1921 	lcall	_delay_key
      000562                       1922 00111$:
      000562 30 B2 FD         [24] 1923 	jnb	_P3_2,00111$
      000565 12r05r0F         [24] 1924 	lcall	_delay_key
      000568 7E 03            [12] 1925 	mov	r6,#0x03
      00056A 7F 00            [12] 1926 	mov	r7,#0x00
      00056C                       1927 00115$:
                                   1928 ;	Key.h:60: if(P3_3 == 0){delay_key();while(P3_3 == 0);delay_key();KeyNum = 4;}
      00056C 20 B3 0D         [24] 1929 	jb	_P3_3,00120$
      00056F 12r05r0F         [24] 1930 	lcall	_delay_key
      000572                       1931 00116$:
      000572 30 B3 FD         [24] 1932 	jnb	_P3_3,00116$
      000575 12r05r0F         [24] 1933 	lcall	_delay_key
      000578 7E 04            [12] 1934 	mov	r6,#0x04
      00057A 7F 00            [12] 1935 	mov	r7,#0x00
      00057C                       1936 00120$:
                                   1937 ;	Key.h:61: if(P3_4 == 0){delay_key();while(P3_4 == 0);delay_key();KeyNum = 5;}
      00057C 20 B4 0D         [24] 1938 	jb	_P3_4,00125$
      00057F 12r05r0F         [24] 1939 	lcall	_delay_key
      000582                       1940 00121$:
      000582 30 B4 FD         [24] 1941 	jnb	_P3_4,00121$
      000585 12r05r0F         [24] 1942 	lcall	_delay_key
      000588 7E 05            [12] 1943 	mov	r6,#0x05
      00058A 7F 00            [12] 1944 	mov	r7,#0x00
      00058C                       1945 00125$:
                                   1946 ;	Key.h:62: if(P3_5 == 0){delay_key();while(P3_5 == 0);delay_key();KeyNum = 6;}
      00058C 20 B5 0D         [24] 1947 	jb	_P3_5,00130$
      00058F 12r05r0F         [24] 1948 	lcall	_delay_key
      000592                       1949 00126$:
      000592 30 B5 FD         [24] 1950 	jnb	_P3_5,00126$
      000595 12r05r0F         [24] 1951 	lcall	_delay_key
      000598 7E 06            [12] 1952 	mov	r6,#0x06
      00059A 7F 00            [12] 1953 	mov	r7,#0x00
      00059C                       1954 00130$:
                                   1955 ;	Key.h:63: if(P3_6 == 0){delay_key();while(P3_6 == 0);delay_key();KeyNum = 7;}
      00059C 20 B6 0D         [24] 1956 	jb	_P3_6,00135$
      00059F 12r05r0F         [24] 1957 	lcall	_delay_key
      0005A2                       1958 00131$:
      0005A2 30 B6 FD         [24] 1959 	jnb	_P3_6,00131$
      0005A5 12r05r0F         [24] 1960 	lcall	_delay_key
      0005A8 7E 07            [12] 1961 	mov	r6,#0x07
      0005AA 7F 00            [12] 1962 	mov	r7,#0x00
      0005AC                       1963 00135$:
                                   1964 ;	Key.h:64: if(P3_7 == 0){delay_key();while(P3_7 == 0);delay_key();KeyNum = 8;}
      0005AC 20 B7 0D         [24] 1965 	jb	_P3_7,00140$
      0005AF 12r05r0F         [24] 1966 	lcall	_delay_key
      0005B2                       1967 00136$:
      0005B2 30 B7 FD         [24] 1968 	jnb	_P3_7,00136$
      0005B5 12r05r0F         [24] 1969 	lcall	_delay_key
      0005B8 7E 08            [12] 1970 	mov	r6,#0x08
      0005BA 7F 00            [12] 1971 	mov	r7,#0x00
      0005BC                       1972 00140$:
                                   1973 ;	Key.h:65: return KeyNum;
      0005BC 8E 82            [24] 1974 	mov	dpl,r6
      0005BE 8F 83            [24] 1975 	mov	dph,r7
                                   1976 ;	Key.h:66: }
      0005C0 22               [24] 1977 	ret
                                   1978 ;------------------------------------------------------------
                                   1979 ;Allocation info for local variables in function 'Time_Init'
                                   1980 ;------------------------------------------------------------
                                   1981 ;	Timer0.h:46: void Time_Init()
                                   1982 ;	-----------------------------------------
                                   1983 ;	 function Time_Init
                                   1984 ;	-----------------------------------------
      0005C1                       1985 _Time_Init:
                                   1986 ;	Timer0.h:48: TMOD |= 0x01;//定时器模式  16位计数器
      0005C1 43 89 01         [24] 1987 	orl	_TMOD,#0x01
                                   1988 ;	Timer0.h:49: TF0 = 0;     //标志位
                                   1989 ;	assignBit
      0005C4 C2 8D            [12] 1990 	clr	_TF0
                                   1991 ;	Timer0.h:50: TR0 = 1;     //计时开始
                                   1992 ;	assignBit
      0005C6 D2 8C            [12] 1993 	setb	_TR0
                                   1994 ;	Timer0.h:51: TH0 = 0xfc;  //初值
      0005C8 75 8C FC         [24] 1995 	mov	_TH0,#0xfc
                                   1996 ;	Timer0.h:52: TL0 = 0x18;
      0005CB 75 8A 18         [24] 1997 	mov	_TL0,#0x18
                                   1998 ;	Timer0.h:54: EA = 1; //总中断开关
                                   1999 ;	assignBit
      0005CE D2 AF            [12] 2000 	setb	_EA
                                   2001 ;	Timer0.h:55: ET0 = 1; //分钟短开关
                                   2002 ;	assignBit
      0005D0 D2 A9            [12] 2003 	setb	_ET0
                                   2004 ;	Timer0.h:56: PT0 = 0; //终端优先级
                                   2005 ;	assignBit
      0005D2 C2 B9            [12] 2006 	clr	_PT0
                                   2007 ;	Timer0.h:57: }
      0005D4 22               [24] 2008 	ret
                                   2009 ;------------------------------------------------------------
                                   2010 ;Allocation info for local variables in function 'main'
                                   2011 ;------------------------------------------------------------
                                   2012 ;	Main.c:68: void main()
                                   2013 ;	-----------------------------------------
                                   2014 ;	 function main
                                   2015 ;	-----------------------------------------
      0005D5                       2016 _main:
                                   2017 ;	Main.c:72: LCD_Init();
      0005D5 12r01rD4         [24] 2018 	lcall	_LCD_Init
                                   2019 ;	Main.c:73: Time_Init();
      0005D8 12r05rC1         [24] 2020 	lcall	_Time_Init
                                   2021 ;	Main.c:74: CS88 = 0;
                                   2022 ;	assignBit
      0005DB C2 A2            [12] 2023 	clr	_P2_2
                                   2024 ;	Main.c:75: DU = 0;
                                   2025 ;	assignBit
      0005DD C2 A0            [12] 2026 	clr	_P2_0
                                   2027 ;	Main.c:76: WE = 0;
                                   2028 ;	assignBit
      0005DF C2 A1            [12] 2029 	clr	_P2_1
                                   2030 ;	Main.c:77: LCD_ShowString(1,1,"L:LWH"); // 在LCD上显示字符串
      0005E1 75*04r00         [24] 2031 	mov	_LCD_ShowString_PARM_3,#___str_0
      0005E4 75*05s00         [24] 2032 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_0 >> 8)
      0005E7 75*06 80         [24] 2033 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0005EA 75*03 01         [24] 2034 	mov	_LCD_ShowString_PARM_2,#0x01
      0005ED 75 82 01         [24] 2035 	mov	dpl,#0x01
      0005F0 12r02r16         [24] 2036 	lcall	_LCD_ShowString
                                   2037 ;	Main.c:78: LCD_ShowString(2,1,"C:CXL & JM");
      0005F3 75*04r06         [24] 2038 	mov	_LCD_ShowString_PARM_3,#___str_1
      0005F6 75*05s00         [24] 2039 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_1 >> 8)
      0005F9 75*06 80         [24] 2040 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0005FC 75*03 01         [24] 2041 	mov	_LCD_ShowString_PARM_2,#0x01
      0005FF 75 82 02         [24] 2042 	mov	dpl,#0x02
      000602 12r02r16         [24] 2043 	lcall	_LCD_ShowString
                                   2044 ;	Main.c:80: if(((AT24C02_ReadByte(0)|AT24C02_ReadByte(1) << 8) != 0) || ((AT24C02_ReadByte(2)|AT24C02_ReadByte(3) << 8) != 0))
      000605 75 82 00         [24] 2045 	mov	dpl,#0x00
      000608 12r04rD4         [24] 2046 	lcall	_AT24C02_ReadByte
      00060B AF 82            [24] 2047 	mov	r7,dpl
      00060D 75 82 01         [24] 2048 	mov	dpl,#0x01
      000610 C0 07            [24] 2049 	push	ar7
      000612 12r04rD4         [24] 2050 	lcall	_AT24C02_ReadByte
      000615 AE 82            [24] 2051 	mov	r6,dpl
      000617 D0 07            [24] 2052 	pop	ar7
      000619 8E 05            [24] 2053 	mov	ar5,r6
      00061B E4               [12] 2054 	clr	a
      00061C FE               [12] 2055 	mov	r6,a
      00061D FC               [12] 2056 	mov	r4,a
      00061E EF               [12] 2057 	mov	a,r7
      00061F 42 06            [12] 2058 	orl	ar6,a
      000621 EC               [12] 2059 	mov	a,r4
      000622 42 05            [12] 2060 	orl	ar5,a
      000624 EE               [12] 2061 	mov	a,r6
      000625 4D               [12] 2062 	orl	a,r5
      000626 70 23            [24] 2063 	jnz	00101$
      000628 75 82 02         [24] 2064 	mov	dpl,#0x02
      00062B 12r04rD4         [24] 2065 	lcall	_AT24C02_ReadByte
      00062E AF 82            [24] 2066 	mov	r7,dpl
      000630 75 82 03         [24] 2067 	mov	dpl,#0x03
      000633 C0 07            [24] 2068 	push	ar7
      000635 12r04rD4         [24] 2069 	lcall	_AT24C02_ReadByte
      000638 AE 82            [24] 2070 	mov	r6,dpl
      00063A D0 07            [24] 2071 	pop	ar7
      00063C 8E 05            [24] 2072 	mov	ar5,r6
      00063E E4               [12] 2073 	clr	a
      00063F FE               [12] 2074 	mov	r6,a
      000640 FC               [12] 2075 	mov	r4,a
      000641 EF               [12] 2076 	mov	a,r7
      000642 42 06            [12] 2077 	orl	ar6,a
      000644 EC               [12] 2078 	mov	a,r4
      000645 42 05            [12] 2079 	orl	ar5,a
      000647 EE               [12] 2080 	mov	a,r6
      000648 4D               [12] 2081 	orl	a,r5
      000649 60 09            [24] 2082 	jz	00173$
      00064B                       2083 00101$:
                                   2084 ;	Main.c:82: LCD_Init(); // 初始化LCD
      00064B 12r01rD4         [24] 2085 	lcall	_LCD_Init
                                   2086 ;	Main.c:83: FLAG = 1; // 设置标志位为1
      00064E 75*1C 01         [24] 2087 	mov	_FLAG,#0x01
      000651 75*1D 00         [24] 2088 	mov	(_FLAG + 1),#0x00
                                   2089 ;	Main.c:86: while(1)
      000654                       2090 00173$:
                                   2091 ;	Main.c:89: if(K1 >= 3)
      000654 C3               [12] 2092 	clr	c
      000655 E5*1A            [12] 2093 	mov	a,_K1
      000657 94 03            [12] 2094 	subb	a,#0x03
      000659 E5*1B            [12] 2095 	mov	a,(_K1 + 1)
      00065B 94 00            [12] 2096 	subb	a,#0x00
      00065D 50 03            [24] 2097 	jnc	00307$
      00065F 02r0Ar6A         [24] 2098 	ljmp	00146$
      000662                       2099 00307$:
                                   2100 ;	Main.c:91: LCD_Init(); // 初始化LCD
      000662 12r01rD4         [24] 2101 	lcall	_LCD_Init
                                   2102 ;	Main.c:92: while(1)
      000665                       2103 00143$:
                                   2104 ;	Main.c:94: Num_Mat = MatrKey(); // 获取矩阵键盘按键值
      000665 12r00r29         [24] 2105 	lcall	_MatrKey
      000668 85 82*20         [24] 2106 	mov	_Num_Mat,dpl
                                   2107 ;	Main.c:96: if(Num_Mat == 13)
      00066B 74 0D            [12] 2108 	mov	a,#0x0d
      00066D B5*20 06         [24] 2109 	cjne	a,_Num_Mat,00105$
                                   2110 ;	Main.c:98: FLAG_M = 1;
      000670 75*39 01         [24] 2111 	mov	_FLAG_M,#0x01
      000673 75*3A 00         [24] 2112 	mov	(_FLAG_M + 1),#0x00
      000676                       2113 00105$:
                                   2114 ;	Main.c:101: if(FLAG_M == 0)
      000676 E5*39            [12] 2115 	mov	a,_FLAG_M
      000678 45*3A            [12] 2116 	orl	a,(_FLAG_M + 1)
      00067A 60 03            [24] 2117 	jz	00310$
      00067C 02r08r38         [24] 2118 	ljmp	00116$
      00067F                       2119 00310$:
                                   2120 ;	Main.c:103: LCD_ShowString(1,9,"     ");
      00067F 75*04r11         [24] 2121 	mov	_LCD_ShowString_PARM_3,#___str_2
      000682 75*05s00         [24] 2122 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_2 >> 8)
      000685 75*06 80         [24] 2123 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000688 75*03 09         [24] 2124 	mov	_LCD_ShowString_PARM_2,#0x09
      00068B 75 82 01         [24] 2125 	mov	dpl,#0x01
      00068E 12r02r16         [24] 2126 	lcall	_LCD_ShowString
                                   2127 ;	Main.c:104: LCD_ShowString(1,1,"MODE:S"); // 在LCD上显示字符串
      000691 75*04r17         [24] 2128 	mov	_LCD_ShowString_PARM_3,#___str_3
      000694 75*05s00         [24] 2129 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_3 >> 8)
      000697 75*06 80         [24] 2130 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      00069A 75*03 01         [24] 2131 	mov	_LCD_ShowString_PARM_2,#0x01
      00069D 75 82 01         [24] 2132 	mov	dpl,#0x01
      0006A0 12r02r16         [24] 2133 	lcall	_LCD_ShowString
                                   2134 ;	Main.c:105: LCD_ShowString(2,1,"PD:"); // 在LCD上显示字符串
      0006A3 75*04r1E         [24] 2135 	mov	_LCD_ShowString_PARM_3,#___str_4
      0006A6 75*05s00         [24] 2136 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_4 >> 8)
      0006A9 75*06 80         [24] 2137 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0006AC 75*03 01         [24] 2138 	mov	_LCD_ShowString_PARM_2,#0x01
      0006AF 75 82 02         [24] 2139 	mov	dpl,#0x02
      0006B2 12r02r16         [24] 2140 	lcall	_LCD_ShowString
                                   2141 ;	Main.c:106: if(Num_Mat != 0 && Num_Mat <= 10)
      0006B5 E5*20            [12] 2142 	mov	a,_Num_Mat
      0006B7 70 03            [24] 2143 	jnz	00311$
      0006B9 02r07r7E         [24] 2144 	ljmp	00109$
      0006BC                       2145 00311$:
      0006BC E5*20            [12] 2146 	mov	a,_Num_Mat
      0006BE 24 F5            [12] 2147 	add	a,#0xff - 0x0a
      0006C0 50 03            [24] 2148 	jnc	00312$
      0006C2 02r07r7E         [24] 2149 	ljmp	00109$
      0006C5                       2150 00312$:
                                   2151 ;	Main.c:108: if (cont < 6)
      0006C5 C3               [12] 2152 	clr	c
      0006C6 E5*1E            [12] 2153 	mov	a,_cont
      0006C8 94 06            [12] 2154 	subb	a,#0x06
      0006CA E5*1F            [12] 2155 	mov	a,(_cont + 1)
      0006CC 94 00            [12] 2156 	subb	a,#0x00
      0006CE 40 03            [24] 2157 	jc	00313$
      0006D0 02r07r7E         [24] 2158 	ljmp	00109$
      0006D3                       2159 00313$:
                                   2160 ;	Main.c:110: PassWord_Set = PassWord_Set * 10 + Num_Mat%10;
      0006D3 85*21*00         [24] 2161 	mov	__mulint_PARM_2,_PassWord_Set
      0006D6 85*22*01         [24] 2162 	mov	(__mulint_PARM_2 + 1),(_PassWord_Set + 1)
      0006D9 90 00 0A         [24] 2163 	mov	dptr,#0x000a
      0006DC 12r00r00         [24] 2164 	lcall	__mulint
      0006DF AE 82            [24] 2165 	mov	r6,dpl
      0006E1 AF 83            [24] 2166 	mov	r7,dph
      0006E3 AC*20            [24] 2167 	mov	r4,_Num_Mat
      0006E5 7D 00            [12] 2168 	mov	r5,#0x00
      0006E7 75*00 0A         [24] 2169 	mov	__modsint_PARM_2,#0x0a
                                   2170 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      0006EA 8D*01            [24] 2171 	mov	(__modsint_PARM_2 + 1),r5
      0006EC 8C 82            [24] 2172 	mov	dpl,r4
      0006EE 8D 83            [24] 2173 	mov	dph,r5
      0006F0 C0 07            [24] 2174 	push	ar7
      0006F2 C0 06            [24] 2175 	push	ar6
      0006F4 12r00r00         [24] 2176 	lcall	__modsint
      0006F7 AC 82            [24] 2177 	mov	r4,dpl
      0006F9 AD 83            [24] 2178 	mov	r5,dph
      0006FB D0 06            [24] 2179 	pop	ar6
      0006FD D0 07            [24] 2180 	pop	ar7
      0006FF EC               [12] 2181 	mov	a,r4
      000700 2E               [12] 2182 	add	a,r6
      000701 F5*21            [12] 2183 	mov	_PassWord_Set,a
      000703 ED               [12] 2184 	mov	a,r5
      000704 3F               [12] 2185 	addc	a,r7
      000705 F5*22            [12] 2186 	mov	(_PassWord_Set + 1),a
                                   2187 ;	Main.c:111: PassWord_Set1_1 = PassWord_Set / 1000;
      000707 75*00 E8         [24] 2188 	mov	__divuint_PARM_2,#0xe8
      00070A 75*01 03         [24] 2189 	mov	(__divuint_PARM_2 + 1),#0x03
      00070D 85*21 82         [24] 2190 	mov	dpl,_PassWord_Set
      000710 85*22 83         [24] 2191 	mov	dph,(_PassWord_Set + 1)
      000713 12r00r00         [24] 2192 	lcall	__divuint
      000716 85 82*25         [24] 2193 	mov	_PassWord_Set1_1,dpl
      000719 85 83*26         [24] 2194 	mov	(_PassWord_Set1_1 + 1),dph
                                   2195 ;	Main.c:112: PassWord_Set1 = PassWord_Set1 *10 + PassWord_Set1_1;
      00071C 85*23*00         [24] 2196 	mov	__mulint_PARM_2,_PassWord_Set1
      00071F 85*24*01         [24] 2197 	mov	(__mulint_PARM_2 + 1),(_PassWord_Set1 + 1)
      000722 90 00 0A         [24] 2198 	mov	dptr,#0x000a
      000725 12r00r00         [24] 2199 	lcall	__mulint
      000728 E5 82            [12] 2200 	mov	a,dpl
      00072A 85 83 F0         [24] 2201 	mov	b,dph
      00072D 25*25            [12] 2202 	add	a,_PassWord_Set1_1
      00072F F5*23            [12] 2203 	mov	_PassWord_Set1,a
      000731 E5*26            [12] 2204 	mov	a,(_PassWord_Set1_1 + 1)
      000733 35 F0            [12] 2205 	addc	a,b
      000735 F5*24            [12] 2206 	mov	(_PassWord_Set1 + 1),a
                                   2207 ;	Main.c:113: PassWord_Set2 = PassWord_Set % 1000;
      000737 75*00 E8         [24] 2208 	mov	__moduint_PARM_2,#0xe8
      00073A 75*01 03         [24] 2209 	mov	(__moduint_PARM_2 + 1),#0x03
      00073D 85*21 82         [24] 2210 	mov	dpl,_PassWord_Set
      000740 85*22 83         [24] 2211 	mov	dph,(_PassWord_Set + 1)
      000743 12r00r00         [24] 2212 	lcall	__moduint
      000746 85 82*27         [24] 2213 	mov	_PassWord_Set2,dpl
      000749 85 83*28         [24] 2214 	mov	(_PassWord_Set2 + 1),dph
                                   2215 ;	Main.c:114: PassWord_Set = PassWord_Set2;
      00074C 85*27*21         [24] 2216 	mov	_PassWord_Set,_PassWord_Set2
      00074F 85*28*22         [24] 2217 	mov	(_PassWord_Set + 1),(_PassWord_Set2 + 1)
                                   2218 ;	Main.c:115: cont++;
      000752 05*1E            [12] 2219 	inc	_cont
      000754 E4               [12] 2220 	clr	a
      000755 B5*1E 02         [24] 2221 	cjne	a,_cont,00314$
      000758 05*1F            [12] 2222 	inc	(_cont + 1)
      00075A                       2223 00314$:
                                   2224 ;	Main.c:117: LCD_ShowNum(2,4,PassWord_Set1,3);
      00075A 75*09 04         [24] 2225 	mov	_LCD_ShowNum_PARM_2,#0x04
      00075D 85*23*0A         [24] 2226 	mov	_LCD_ShowNum_PARM_3,_PassWord_Set1
      000760 85*24*0B         [24] 2227 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Set1 + 1)
      000763 75*0C 03         [24] 2228 	mov	_LCD_ShowNum_PARM_4,#0x03
      000766 75 82 02         [24] 2229 	mov	dpl,#0x02
      000769 12r02r83         [24] 2230 	lcall	_LCD_ShowNum
                                   2231 ;	Main.c:118: LCD_ShowNum(2,7,PassWord_Set2,3);
      00076C 75*09 07         [24] 2232 	mov	_LCD_ShowNum_PARM_2,#0x07
      00076F 85*27*0A         [24] 2233 	mov	_LCD_ShowNum_PARM_3,_PassWord_Set2
      000772 85*28*0B         [24] 2234 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Set2 + 1)
      000775 75*0C 03         [24] 2235 	mov	_LCD_ShowNum_PARM_4,#0x03
      000778 75 82 02         [24] 2236 	mov	dpl,#0x02
      00077B 12r02r83         [24] 2237 	lcall	_LCD_ShowNum
      00077E                       2238 00109$:
                                   2239 ;	Main.c:122: if(Num_Mat == 11)
      00077E 74 0B            [12] 2240 	mov	a,#0x0b
      000780 B5*20 02         [24] 2241 	cjne	a,_Num_Mat,00315$
      000783 80 02            [24] 2242 	sjmp	00316$
      000785                       2243 00315$:
      000785 80 79            [24] 2244 	sjmp	00112$
      000787                       2245 00316$:
                                   2246 ;	Main.c:124: LCD_Init(); // 初始化LCD
      000787 12r01rD4         [24] 2247 	lcall	_LCD_Init
                                   2248 ;	Main.c:126: AT24C02_WriteByte(0,PassWord_Set1 % 256);// 低字节
      00078A AE*23            [24] 2249 	mov	r6,_PassWord_Set1
      00078C 8E*19            [24] 2250 	mov	_AT24C02_WriteByte_PARM_2,r6
      00078E 75 82 00         [24] 2251 	mov	dpl,#0x00
      000791 12r04rAB         [24] 2252 	lcall	_AT24C02_WriteByte
                                   2253 ;	Main.c:127: AT24C02_WriteByte(1,PassWord_Set1 / 256);// 高字节
      000794 AE*24            [24] 2254 	mov	r6,(_PassWord_Set1 + 1)
      000796 8E*19            [24] 2255 	mov	_AT24C02_WriteByte_PARM_2,r6
      000798 75 82 01         [24] 2256 	mov	dpl,#0x01
      00079B 12r04rAB         [24] 2257 	lcall	_AT24C02_WriteByte
                                   2258 ;	Main.c:129: AT24C02_WriteByte(2,PassWord_Set2 % 256);// 低字节
      00079E AE*27            [24] 2259 	mov	r6,_PassWord_Set2
      0007A0 8E*19            [24] 2260 	mov	_AT24C02_WriteByte_PARM_2,r6
      0007A2 75 82 02         [24] 2261 	mov	dpl,#0x02
      0007A5 12r04rAB         [24] 2262 	lcall	_AT24C02_WriteByte
                                   2263 ;	Main.c:130: AT24C02_WriteByte(3,PassWord_Set2 / 256);
      0007A8 AE*28            [24] 2264 	mov	r6,(_PassWord_Set2 + 1)
      0007AA 8E*19            [24] 2265 	mov	_AT24C02_WriteByte_PARM_2,r6
      0007AC 75 82 03         [24] 2266 	mov	dpl,#0x03
      0007AF 12r04rAB         [24] 2267 	lcall	_AT24C02_WriteByte
                                   2268 ;	Main.c:133: LCD_ShowString(2,4,"Success"); // 在LCD上显示字符串
      0007B2 75*04r22         [24] 2269 	mov	_LCD_ShowString_PARM_3,#___str_5
      0007B5 75*05s00         [24] 2270 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_5 >> 8)
      0007B8 75*06 80         [24] 2271 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0007BB 75*03 04         [24] 2272 	mov	_LCD_ShowString_PARM_2,#0x04
      0007BE 75 82 02         [24] 2273 	mov	dpl,#0x02
      0007C1 12r02r16         [24] 2274 	lcall	_LCD_ShowString
                                   2275 ;	Main.c:134: DelayS(1); // 延时1秒
      0007C4 90 00 01         [24] 2276 	mov	dptr,#0x0001
      0007C7 12r01r4B         [24] 2277 	lcall	_DelayS
                                   2278 ;	Main.c:135: LCD_ShowString(2,1,"              "); // 在LCD上显示空格字符
      0007CA 75*04r2A         [24] 2279 	mov	_LCD_ShowString_PARM_3,#___str_6
      0007CD 75*05s00         [24] 2280 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_6 >> 8)
      0007D0 75*06 80         [24] 2281 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0007D3 75*03 01         [24] 2282 	mov	_LCD_ShowString_PARM_2,#0x01
      0007D6 75 82 02         [24] 2283 	mov	dpl,#0x02
      0007D9 12r02r16         [24] 2284 	lcall	_LCD_ShowString
                                   2285 ;	Main.c:136: LCD_Init(); // 初始化LCD
      0007DC 12r01rD4         [24] 2286 	lcall	_LCD_Init
                                   2287 ;	Main.c:137: PassWord_Set = 0; // 清零密码
      0007DF E4               [12] 2288 	clr	a
      0007E0 F5*21            [12] 2289 	mov	_PassWord_Set,a
      0007E2 F5*22            [12] 2290 	mov	(_PassWord_Set + 1),a
                                   2291 ;	Main.c:138: PassWord_Set1 = 0; // 清零密码
      0007E4 F5*23            [12] 2292 	mov	_PassWord_Set1,a
      0007E6 F5*24            [12] 2293 	mov	(_PassWord_Set1 + 1),a
                                   2294 ;	Main.c:139: PassWord_Set2 = 0; // 清零密码
      0007E8 F5*27            [12] 2295 	mov	_PassWord_Set2,a
      0007EA F5*28            [12] 2296 	mov	(_PassWord_Set2 + 1),a
                                   2297 ;	Main.c:140: FLAG = 1; // 设置标志位为1
      0007EC 75*1C 01         [24] 2298 	mov	_FLAG,#0x01
                                   2299 ;	1-genFromRTrack replaced	mov	(_FLAG + 1),#0x00
      0007EF F5*1D            [12] 2300 	mov	(_FLAG + 1),a
                                   2301 ;	Main.c:141: cont = 0; // 计数清零
      0007F1 F5*1E            [12] 2302 	mov	_cont,a
      0007F3 F5*1F            [12] 2303 	mov	(_cont + 1),a
                                   2304 ;	Main.c:142: K1 = 0; // K1计数清零
      0007F5 F5*1A            [12] 2305 	mov	_K1,a
      0007F7 F5*1B            [12] 2306 	mov	(_K1 + 1),a
                                   2307 ;	Main.c:143: FLAG_M = 0; // 状态标志位清零
      0007F9 F5*39            [12] 2308 	mov	_FLAG_M,a
      0007FB F5*3A            [12] 2309 	mov	(_FLAG_M + 1),a
                                   2310 ;	Main.c:144: break; // 退出循环
      0007FD 02r0Ar6A         [24] 2311 	ljmp	00146$
      000800                       2312 00112$:
                                   2313 ;	Main.c:147: if(Num_Mat == 12)
      000800 74 0C            [12] 2314 	mov	a,#0x0c
      000802 B5*20 33         [24] 2315 	cjne	a,_Num_Mat,00116$
                                   2316 ;	Main.c:149: cont = 0; // 计数清零
      000805 E4               [12] 2317 	clr	a
      000806 F5*1E            [12] 2318 	mov	_cont,a
      000808 F5*1F            [12] 2319 	mov	(_cont + 1),a
                                   2320 ;	Main.c:150: PassWord_Set = 0; // 清零密码
      00080A F5*21            [12] 2321 	mov	_PassWord_Set,a
      00080C F5*22            [12] 2322 	mov	(_PassWord_Set + 1),a
                                   2323 ;	Main.c:151: PassWord_Set1 = 0; // 清零密码
      00080E F5*23            [12] 2324 	mov	_PassWord_Set1,a
      000810 F5*24            [12] 2325 	mov	(_PassWord_Set1 + 1),a
                                   2326 ;	Main.c:152: PassWord_Set2 = 0;
      000812 F5*27            [12] 2327 	mov	_PassWord_Set2,a
      000814 F5*28            [12] 2328 	mov	(_PassWord_Set2 + 1),a
                                   2329 ;	Main.c:153: LCD_ShowNum(2,4,PassWord_Set1,3);
      000816 75*09 04         [24] 2330 	mov	_LCD_ShowNum_PARM_2,#0x04
      000819 F5*0A            [12] 2331 	mov	_LCD_ShowNum_PARM_3,a
      00081B F5*0B            [12] 2332 	mov	(_LCD_ShowNum_PARM_3 + 1),a
      00081D 75*0C 03         [24] 2333 	mov	_LCD_ShowNum_PARM_4,#0x03
      000820 75 82 02         [24] 2334 	mov	dpl,#0x02
      000823 12r02r83         [24] 2335 	lcall	_LCD_ShowNum
                                   2336 ;	Main.c:154: LCD_ShowNum(2,7,PassWord_Set2,3);// 在LCD上显示数字
      000826 75*09 07         [24] 2337 	mov	_LCD_ShowNum_PARM_2,#0x07
      000829 85*27*0A         [24] 2338 	mov	_LCD_ShowNum_PARM_3,_PassWord_Set2
      00082C 85*28*0B         [24] 2339 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Set2 + 1)
      00082F 75*0C 03         [24] 2340 	mov	_LCD_ShowNum_PARM_4,#0x03
      000832 75 82 02         [24] 2341 	mov	dpl,#0x02
      000835 12r02r83         [24] 2342 	lcall	_LCD_ShowNum
      000838                       2343 00116$:
                                   2344 ;	Main.c:157: if(FLAG_M == 1)
      000838 74 01            [12] 2345 	mov	a,#0x01
      00083A B5*39 06         [24] 2346 	cjne	a,_FLAG_M,00319$
      00083D 14               [12] 2347 	dec	a
      00083E B5*3A 02         [24] 2348 	cjne	a,(_FLAG_M + 1),00319$
      000841 80 03            [24] 2349 	sjmp	00320$
      000843                       2350 00319$:
      000843 02r0Ar58         [24] 2351 	ljmp	00139$
      000846                       2352 00320$:
                                   2353 ;	Main.c:159: LCD_ShowString(1,9,"DOOR:");
      000846 75*04r39         [24] 2354 	mov	_LCD_ShowString_PARM_3,#___str_7
      000849 75*05s00         [24] 2355 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_7 >> 8)
      00084C 75*06 80         [24] 2356 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      00084F 75*03 09         [24] 2357 	mov	_LCD_ShowString_PARM_2,#0x09
      000852 75 82 01         [24] 2358 	mov	dpl,#0x01
      000855 12r02r16         [24] 2359 	lcall	_LCD_ShowString
                                   2360 ;	Main.c:160: LCD_ShowString(1,14,"C");
      000858 75*04r3F         [24] 2361 	mov	_LCD_ShowString_PARM_3,#___str_8
      00085B 75*05s00         [24] 2362 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_8 >> 8)
      00085E 75*06 80         [24] 2363 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000861 75*03 0E         [24] 2364 	mov	_LCD_ShowString_PARM_2,#0x0e
      000864 75 82 01         [24] 2365 	mov	dpl,#0x01
      000867 12r02r16         [24] 2366 	lcall	_LCD_ShowString
                                   2367 ;	Main.c:161: LCD_ShowString(1,1,"MODE:M"); // 在LCD上显示字符串
      00086A 75*04r41         [24] 2368 	mov	_LCD_ShowString_PARM_3,#___str_9
      00086D 75*05s00         [24] 2369 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_9 >> 8)
      000870 75*06 80         [24] 2370 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000873 75*03 01         [24] 2371 	mov	_LCD_ShowString_PARM_2,#0x01
      000876 75 82 01         [24] 2372 	mov	dpl,#0x01
      000879 12r02r16         [24] 2373 	lcall	_LCD_ShowString
                                   2374 ;	Main.c:162: LCD_ShowString(2,1,"PD:"); // 在LCD上显示字符串
      00087C 75*04r1E         [24] 2375 	mov	_LCD_ShowString_PARM_3,#___str_4
      00087F 75*05s00         [24] 2376 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_4 >> 8)
      000882 75*06 80         [24] 2377 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000885 75*03 01         [24] 2378 	mov	_LCD_ShowString_PARM_2,#0x01
      000888 75 82 02         [24] 2379 	mov	dpl,#0x02
      00088B 12r02r16         [24] 2380 	lcall	_LCD_ShowString
                                   2381 ;	Main.c:163: if(Num_Mat != 0 && Num_Mat <= 10)
      00088E E5*20            [12] 2382 	mov	a,_Num_Mat
      000890 70 03            [24] 2383 	jnz	00321$
      000892 02r09r98         [24] 2384 	ljmp	00127$
      000895                       2385 00321$:
      000895 E5*20            [12] 2386 	mov	a,_Num_Mat
      000897 24 F5            [12] 2387 	add	a,#0xff - 0x0a
      000899 50 03            [24] 2388 	jnc	00322$
      00089B 02r09r98         [24] 2389 	ljmp	00127$
      00089E                       2390 00322$:
                                   2391 ;	Main.c:166: if(cont < 5)
      00089E C3               [12] 2392 	clr	c
      00089F E5*1E            [12] 2393 	mov	a,_cont
      0008A1 94 05            [12] 2394 	subb	a,#0x05
      0008A3 E5*1F            [12] 2395 	mov	a,(_cont + 1)
      0008A5 94 00            [12] 2396 	subb	a,#0x00
      0008A7 50 38            [24] 2397 	jnc	00118$
                                   2398 ;	Main.c:168: PassWord_Ent *= 10;
      0008A9 85*2D*00         [24] 2399 	mov	__mulint_PARM_2,_PassWord_Ent
      0008AC 85*2E*01         [24] 2400 	mov	(__mulint_PARM_2 + 1),(_PassWord_Ent + 1)
      0008AF 90 00 0A         [24] 2401 	mov	dptr,#0x000a
      0008B2 12r00r00         [24] 2402 	lcall	__mulint
      0008B5 85 82*2D         [24] 2403 	mov	_PassWord_Ent,dpl
      0008B8 85 83*2E         [24] 2404 	mov	(_PassWord_Ent + 1),dph
                                   2405 ;	Main.c:169: PassWord_Ent += Num_Mat%10; // 更新密码值
      0008BB AE*20            [24] 2406 	mov	r6,_Num_Mat
      0008BD 7F 00            [12] 2407 	mov	r7,#0x00
      0008BF 75*00 0A         [24] 2408 	mov	__modsint_PARM_2,#0x0a
                                   2409 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      0008C2 8F*01            [24] 2410 	mov	(__modsint_PARM_2 + 1),r7
      0008C4 8E 82            [24] 2411 	mov	dpl,r6
      0008C6 8F 83            [24] 2412 	mov	dph,r7
      0008C8 12r00r00         [24] 2413 	lcall	__modsint
      0008CB AE 82            [24] 2414 	mov	r6,dpl
      0008CD AF 83            [24] 2415 	mov	r7,dph
      0008CF EE               [12] 2416 	mov	a,r6
      0008D0 25*2D            [12] 2417 	add	a,_PassWord_Ent
      0008D2 F5*2D            [12] 2418 	mov	_PassWord_Ent,a
      0008D4 EF               [12] 2419 	mov	a,r7
      0008D5 35*2E            [12] 2420 	addc	a,(_PassWord_Ent + 1)
      0008D7 F5*2E            [12] 2421 	mov	(_PassWord_Ent + 1),a
                                   2422 ;	Main.c:170: cont++; // 计数加一
      0008D9 05*1E            [12] 2423 	inc	_cont
      0008DB E4               [12] 2424 	clr	a
      0008DC B5*1E 02         [24] 2425 	cjne	a,_cont,00324$
      0008DF 05*1F            [12] 2426 	inc	(_cont + 1)
      0008E1                       2427 00324$:
      0008E1                       2428 00118$:
                                   2429 ;	Main.c:172: LCD_ShowNum(2,4,PassWord_Ent,5); // 在LCD上显示数字
      0008E1 75*09 04         [24] 2430 	mov	_LCD_ShowNum_PARM_2,#0x04
      0008E4 85*2D*0A         [24] 2431 	mov	_LCD_ShowNum_PARM_3,_PassWord_Ent
      0008E7 85*2E*0B         [24] 2432 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Ent + 1)
      0008EA 75*0C 05         [24] 2433 	mov	_LCD_ShowNum_PARM_4,#0x05
      0008ED 75 82 02         [24] 2434 	mov	dpl,#0x02
      0008F0 12r02r83         [24] 2435 	lcall	_LCD_ShowNum
                                   2436 ;	Main.c:173: DelayMs(700);
      0008F3 90 02 BC         [24] 2437 	mov	dptr,#0x02bc
      0008F6 12r01r7B         [24] 2438 	lcall	_DelayMs
                                   2439 ;	Main.c:174: switch(cont)
      0008F9 C3               [12] 2440 	clr	c
      0008FA 74 05            [12] 2441 	mov	a,#0x05
      0008FC 95*1E            [12] 2442 	subb	a,_cont
      0008FE E4               [12] 2443 	clr	a
      0008FF 95*1F            [12] 2444 	subb	a,(_cont + 1)
      000901 50 03            [24] 2445 	jnc	00325$
      000903 02r09r98         [24] 2446 	ljmp	00127$
      000906                       2447 00325$:
      000906 E5*1E            [12] 2448 	mov	a,_cont
      000908 75 F0 03         [24] 2449 	mov	b,#0x03
      00090B A4               [48] 2450 	mul	ab
      00090C 90r09r10         [24] 2451 	mov	dptr,#00326$
      00090F 73               [24] 2452 	jmp	@a+dptr
      000910                       2453 00326$:
      000910 02r09r22         [24] 2454 	ljmp	00119$
      000913 02r09r36         [24] 2455 	ljmp	00120$
      000916 02r09r4A         [24] 2456 	ljmp	00121$
      000919 02r09r5E         [24] 2457 	ljmp	00122$
      00091C 02r09r72         [24] 2458 	ljmp	00123$
      00091F 02r09r86         [24] 2459 	ljmp	00124$
                                   2460 ;	Main.c:176: case 0:LCD_ShowString(2,4,"00000");break;
      000922                       2461 00119$:
      000922 75*04r48         [24] 2462 	mov	_LCD_ShowString_PARM_3,#___str_10
      000925 75*05s00         [24] 2463 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_10 >> 8)
      000928 75*06 80         [24] 2464 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      00092B 75*03 04         [24] 2465 	mov	_LCD_ShowString_PARM_2,#0x04
      00092E 75 82 02         [24] 2466 	mov	dpl,#0x02
      000931 12r02r16         [24] 2467 	lcall	_LCD_ShowString
                                   2468 ;	Main.c:177: case 1:LCD_ShowString(2,4,"0000*");break;
      000934 80 62            [24] 2469 	sjmp	00127$
      000936                       2470 00120$:
      000936 75*04r4E         [24] 2471 	mov	_LCD_ShowString_PARM_3,#___str_11
      000939 75*05s00         [24] 2472 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_11 >> 8)
      00093C 75*06 80         [24] 2473 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      00093F 75*03 04         [24] 2474 	mov	_LCD_ShowString_PARM_2,#0x04
      000942 75 82 02         [24] 2475 	mov	dpl,#0x02
      000945 12r02r16         [24] 2476 	lcall	_LCD_ShowString
                                   2477 ;	Main.c:178: case 2:LCD_ShowString(2,4,"000**");break;
      000948 80 4E            [24] 2478 	sjmp	00127$
      00094A                       2479 00121$:
      00094A 75*04r54         [24] 2480 	mov	_LCD_ShowString_PARM_3,#___str_12
      00094D 75*05s00         [24] 2481 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_12 >> 8)
      000950 75*06 80         [24] 2482 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000953 75*03 04         [24] 2483 	mov	_LCD_ShowString_PARM_2,#0x04
      000956 75 82 02         [24] 2484 	mov	dpl,#0x02
      000959 12r02r16         [24] 2485 	lcall	_LCD_ShowString
                                   2486 ;	Main.c:179: case 3:LCD_ShowString(2,4,"00***");break;
      00095C 80 3A            [24] 2487 	sjmp	00127$
      00095E                       2488 00122$:
      00095E 75*04r5A         [24] 2489 	mov	_LCD_ShowString_PARM_3,#___str_13
      000961 75*05s00         [24] 2490 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_13 >> 8)
      000964 75*06 80         [24] 2491 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000967 75*03 04         [24] 2492 	mov	_LCD_ShowString_PARM_2,#0x04
      00096A 75 82 02         [24] 2493 	mov	dpl,#0x02
      00096D 12r02r16         [24] 2494 	lcall	_LCD_ShowString
                                   2495 ;	Main.c:180: case 4:LCD_ShowString(2,4,"0****");break;
      000970 80 26            [24] 2496 	sjmp	00127$
      000972                       2497 00123$:
      000972 75*04r60         [24] 2498 	mov	_LCD_ShowString_PARM_3,#___str_14
      000975 75*05s00         [24] 2499 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_14 >> 8)
      000978 75*06 80         [24] 2500 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      00097B 75*03 04         [24] 2501 	mov	_LCD_ShowString_PARM_2,#0x04
      00097E 75 82 02         [24] 2502 	mov	dpl,#0x02
      000981 12r02r16         [24] 2503 	lcall	_LCD_ShowString
                                   2504 ;	Main.c:181: case 5:LCD_ShowString(2,4,"*****");break;
      000984 80 12            [24] 2505 	sjmp	00127$
      000986                       2506 00124$:
      000986 75*04r66         [24] 2507 	mov	_LCD_ShowString_PARM_3,#___str_15
      000989 75*05s00         [24] 2508 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_15 >> 8)
      00098C 75*06 80         [24] 2509 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      00098F 75*03 04         [24] 2510 	mov	_LCD_ShowString_PARM_2,#0x04
      000992 75 82 02         [24] 2511 	mov	dpl,#0x02
      000995 12r02r16         [24] 2512 	lcall	_LCD_ShowString
                                   2513 ;	Main.c:182: }
      000998                       2514 00127$:
                                   2515 ;	Main.c:186: if(Num_Mat == 11)
      000998 74 0B            [12] 2516 	mov	a,#0x0b
      00099A B5*20 02         [24] 2517 	cjne	a,_Num_Mat,00327$
      00099D 80 03            [24] 2518 	sjmp	00328$
      00099F                       2519 00327$:
      00099F 02r0Ar3A         [24] 2520 	ljmp	00135$
      0009A2                       2521 00328$:
                                   2522 ;	Main.c:189: if(PassWord_Ent == 33333)
      0009A2 74 35            [12] 2523 	mov	a,#0x35
      0009A4 B5*2D 4E         [24] 2524 	cjne	a,_PassWord_Ent,00130$
      0009A7 74 82            [12] 2525 	mov	a,#0x82
      0009A9 B5*2E 49         [24] 2526 	cjne	a,(_PassWord_Ent + 1),00130$
                                   2527 ;	Main.c:191: cont = 0; // 计数清零
      0009AC E4               [12] 2528 	clr	a
      0009AD F5*1E            [12] 2529 	mov	_cont,a
      0009AF F5*1F            [12] 2530 	mov	(_cont + 1),a
                                   2531 ;	Main.c:192: PassWord_Ent = 0; // 清零密码
      0009B1 F5*2D            [12] 2532 	mov	_PassWord_Ent,a
      0009B3 F5*2E            [12] 2533 	mov	(_PassWord_Ent + 1),a
                                   2534 ;	Main.c:193: LCD_ShowNum(2,4,PassWord_Ent,4); // 在LCD上显示数字
      0009B5 75*09 04         [24] 2535 	mov	_LCD_ShowNum_PARM_2,#0x04
      0009B8 F5*0A            [12] 2536 	mov	_LCD_ShowNum_PARM_3,a
      0009BA F5*0B            [12] 2537 	mov	(_LCD_ShowNum_PARM_3 + 1),a
      0009BC 75*0C 04         [24] 2538 	mov	_LCD_ShowNum_PARM_4,#0x04
      0009BF 75 82 02         [24] 2539 	mov	dpl,#0x02
      0009C2 12r02r83         [24] 2540 	lcall	_LCD_ShowNum
                                   2541 ;	Main.c:194: LCD_ShowString(1,14,"O"); // 在LCD上显示字符串
      0009C5 75*04r6C         [24] 2542 	mov	_LCD_ShowString_PARM_3,#___str_16
      0009C8 75*05s00         [24] 2543 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_16 >> 8)
      0009CB 75*06 80         [24] 2544 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0009CE 75*03 0E         [24] 2545 	mov	_LCD_ShowString_PARM_2,#0x0e
      0009D1 75 82 01         [24] 2546 	mov	dpl,#0x01
      0009D4 12r02r16         [24] 2547 	lcall	_LCD_ShowString
                                   2548 ;	Main.c:195: DelayS(2); // 延时2秒
      0009D7 90 00 02         [24] 2549 	mov	dptr,#0x0002
      0009DA 12r01r4B         [24] 2550 	lcall	_DelayS
                                   2551 ;	Main.c:196: FLAG_D = 1; // 门状态标志位为1
      0009DD 75*37 01         [24] 2552 	mov	_FLAG_D,#0x01
      0009E0 75*38 00         [24] 2553 	mov	(_FLAG_D + 1),#0x00
                                   2554 ;	Main.c:197: LCD_ShowString(1,14,"C"); // 在LCD上显示字符串
      0009E3 75*04r3F         [24] 2555 	mov	_LCD_ShowString_PARM_3,#___str_8
      0009E6 75*05s00         [24] 2556 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_8 >> 8)
      0009E9 75*06 80         [24] 2557 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0009EC 75*03 0E         [24] 2558 	mov	_LCD_ShowString_PARM_2,#0x0e
      0009EF 75 82 01         [24] 2559 	mov	dpl,#0x01
      0009F2 12r02r16         [24] 2560 	lcall	_LCD_ShowString
      0009F5                       2561 00130$:
                                   2562 ;	Main.c:199: if(PassWord_Ent != 33333 && PassWord_Ent != 0)
      0009F5 74 35            [12] 2563 	mov	a,#0x35
      0009F7 B5*2D 07         [24] 2564 	cjne	a,_PassWord_Ent,00331$
      0009FA 74 82            [12] 2565 	mov	a,#0x82
      0009FC B5*2E 02         [24] 2566 	cjne	a,(_PassWord_Ent + 1),00331$
      0009FF 80 39            [24] 2567 	sjmp	00135$
      000A01                       2568 00331$:
      000A01 E5*2D            [12] 2569 	mov	a,_PassWord_Ent
      000A03 45*2E            [12] 2570 	orl	a,(_PassWord_Ent + 1)
      000A05 60 33            [24] 2571 	jz	00135$
                                   2572 ;	Main.c:201: LCD_ShowString(1,14,"C"); // 在LCD上显示字符串
      000A07 75*04r3F         [24] 2573 	mov	_LCD_ShowString_PARM_3,#___str_8
      000A0A 75*05s00         [24] 2574 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_8 >> 8)
      000A0D 75*06 80         [24] 2575 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000A10 75*03 0E         [24] 2576 	mov	_LCD_ShowString_PARM_2,#0x0e
      000A13 75 82 01         [24] 2577 	mov	dpl,#0x01
      000A16 12r02r16         [24] 2578 	lcall	_LCD_ShowString
                                   2579 ;	Main.c:203: PassWord_Ent = 0; // 清零密码
      000A19 E4               [12] 2580 	clr	a
      000A1A F5*2D            [12] 2581 	mov	_PassWord_Ent,a
      000A1C F5*2E            [12] 2582 	mov	(_PassWord_Ent + 1),a
                                   2583 ;	Main.c:204: LCD_ShowNum(2,4,PassWord_Ent,5); // 在LCD上显示数字
      000A1E 75*09 04         [24] 2584 	mov	_LCD_ShowNum_PARM_2,#0x04
      000A21 F5*0A            [12] 2585 	mov	_LCD_ShowNum_PARM_3,a
      000A23 F5*0B            [12] 2586 	mov	(_LCD_ShowNum_PARM_3 + 1),a
      000A25 75*0C 05         [24] 2587 	mov	_LCD_ShowNum_PARM_4,#0x05
      000A28 75 82 02         [24] 2588 	mov	dpl,#0x02
      000A2B 12r02r83         [24] 2589 	lcall	_LCD_ShowNum
                                   2590 ;	Main.c:205: cont = 0; // 计数清零
      000A2E E4               [12] 2591 	clr	a
      000A2F F5*1E            [12] 2592 	mov	_cont,a
      000A31 F5*1F            [12] 2593 	mov	(_cont + 1),a
                                   2594 ;	Main.c:206: FLAG_F++;
      000A33 05*35            [12] 2595 	inc	_FLAG_F
                                   2596 ;	genFromRTrack removed	clr	a
      000A35 B5*35 02         [24] 2597 	cjne	a,_FLAG_F,00333$
      000A38 05*36            [12] 2598 	inc	(_FLAG_F + 1)
      000A3A                       2599 00333$:
      000A3A                       2600 00135$:
                                   2601 ;	Main.c:210: if(Num_Mat == 12)
      000A3A 74 0C            [12] 2602 	mov	a,#0x0c
      000A3C B5*20 19         [24] 2603 	cjne	a,_Num_Mat,00139$
                                   2604 ;	Main.c:212: cont = 0; // 计数清零
      000A3F E4               [12] 2605 	clr	a
      000A40 F5*1E            [12] 2606 	mov	_cont,a
      000A42 F5*1F            [12] 2607 	mov	(_cont + 1),a
                                   2608 ;	Main.c:213: PassWord_Ent = 0; // 清零密码
      000A44 F5*2D            [12] 2609 	mov	_PassWord_Ent,a
      000A46 F5*2E            [12] 2610 	mov	(_PassWord_Ent + 1),a
                                   2611 ;	Main.c:214: LCD_ShowNum(2,4,PassWord_Ent,5); // 在LCD上显示数字
      000A48 75*09 04         [24] 2612 	mov	_LCD_ShowNum_PARM_2,#0x04
      000A4B F5*0A            [12] 2613 	mov	_LCD_ShowNum_PARM_3,a
      000A4D F5*0B            [12] 2614 	mov	(_LCD_ShowNum_PARM_3 + 1),a
      000A4F 75*0C 05         [24] 2615 	mov	_LCD_ShowNum_PARM_4,#0x05
      000A52 75 82 02         [24] 2616 	mov	dpl,#0x02
      000A55 12r02r83         [24] 2617 	lcall	_LCD_ShowNum
      000A58                       2618 00139$:
                                   2619 ;	Main.c:217: if(Num_Mat == 14)FLAG_M = 0; // 状态标志位清零
      000A58 74 0E            [12] 2620 	mov	a,#0x0e
      000A5A B5*20 02         [24] 2621 	cjne	a,_Num_Mat,00336$
      000A5D 80 03            [24] 2622 	sjmp	00337$
      000A5F                       2623 00336$:
      000A5F 02r06r65         [24] 2624 	ljmp	00143$
      000A62                       2625 00337$:
      000A62 E4               [12] 2626 	clr	a
      000A63 F5*39            [12] 2627 	mov	_FLAG_M,a
      000A65 F5*3A            [12] 2628 	mov	(_FLAG_M + 1),a
      000A67 02r06r65         [24] 2629 	ljmp	00143$
      000A6A                       2630 00146$:
                                   2631 ;	Main.c:221: Num_Mat = MatrKey();
      000A6A 12r00r29         [24] 2632 	lcall	_MatrKey
      000A6D 85 82*20         [24] 2633 	mov	_Num_Mat,dpl
                                   2634 ;	Main.c:223: if(FLAG == 1)
      000A70 74 01            [12] 2635 	mov	a,#0x01
      000A72 B5*1C 06         [24] 2636 	cjne	a,_FLAG,00338$
      000A75 14               [12] 2637 	dec	a
      000A76 B5*1D 02         [24] 2638 	cjne	a,(_FLAG + 1),00338$
      000A79 80 03            [24] 2639 	sjmp	00339$
      000A7B                       2640 00338$:
      000A7B 02r06r54         [24] 2641 	ljmp	00173$
      000A7E                       2642 00339$:
                                   2643 ;	Main.c:225: LCD_ShowString(1,1,"MODE:E"); // 在LCD上显示字符串
      000A7E 75*04r6E         [24] 2644 	mov	_LCD_ShowString_PARM_3,#___str_17
      000A81 75*05s00         [24] 2645 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_17 >> 8)
      000A84 75*06 80         [24] 2646 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000A87 75*03 01         [24] 2647 	mov	_LCD_ShowString_PARM_2,#0x01
      000A8A 75 82 01         [24] 2648 	mov	dpl,#0x01
      000A8D 12r02r16         [24] 2649 	lcall	_LCD_ShowString
                                   2650 ;	Main.c:226: LCD_ShowString(2,1,"PD:");
      000A90 75*04r1E         [24] 2651 	mov	_LCD_ShowString_PARM_3,#___str_4
      000A93 75*05s00         [24] 2652 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_4 >> 8)
      000A96 75*06 80         [24] 2653 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000A99 75*03 01         [24] 2654 	mov	_LCD_ShowString_PARM_2,#0x01
      000A9C 75 82 02         [24] 2655 	mov	dpl,#0x02
      000A9F 12r02r16         [24] 2656 	lcall	_LCD_ShowString
                                   2657 ;	Main.c:227: LCD_ShowString(1,9,"DOOR:");
      000AA2 75*04r39         [24] 2658 	mov	_LCD_ShowString_PARM_3,#___str_7
      000AA5 75*05s00         [24] 2659 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_7 >> 8)
      000AA8 75*06 80         [24] 2660 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000AAB 75*03 09         [24] 2661 	mov	_LCD_ShowString_PARM_2,#0x09
      000AAE 75 82 01         [24] 2662 	mov	dpl,#0x01
      000AB1 12r02r16         [24] 2663 	lcall	_LCD_ShowString
                                   2664 ;	Main.c:228: LCD_ShowString(1,14,"C"); // 在LCD上显示字符串
      000AB4 75*04r3F         [24] 2665 	mov	_LCD_ShowString_PARM_3,#___str_8
      000AB7 75*05s00         [24] 2666 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_8 >> 8)
      000ABA 75*06 80         [24] 2667 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000ABD 75*03 0E         [24] 2668 	mov	_LCD_ShowString_PARM_2,#0x0e
      000AC0 75 82 01         [24] 2669 	mov	dpl,#0x01
      000AC3 12r02r16         [24] 2670 	lcall	_LCD_ShowString
                                   2671 ;	Main.c:231: PassWord1 = (AT24C02_ReadByte(0)|AT24C02_ReadByte(1) << 8); // 读取EEPROM中的密码
      000AC6 75 82 00         [24] 2672 	mov	dpl,#0x00
      000AC9 12r04rD4         [24] 2673 	lcall	_AT24C02_ReadByte
      000ACC AF 82            [24] 2674 	mov	r7,dpl
      000ACE 75 82 01         [24] 2675 	mov	dpl,#0x01
      000AD1 C0 07            [24] 2676 	push	ar7
      000AD3 12r04rD4         [24] 2677 	lcall	_AT24C02_ReadByte
      000AD6 AE 82            [24] 2678 	mov	r6,dpl
      000AD8 D0 07            [24] 2679 	pop	ar7
      000ADA 8E 05            [24] 2680 	mov	ar5,r6
      000ADC E4               [12] 2681 	clr	a
      000ADD FC               [12] 2682 	mov	r4,a
      000ADE 4F               [12] 2683 	orl	a,r7
      000ADF F5*29            [12] 2684 	mov	_PassWord1,a
      000AE1 ED               [12] 2685 	mov	a,r5
      000AE2 4C               [12] 2686 	orl	a,r4
      000AE3 F5*2A            [12] 2687 	mov	(_PassWord1 + 1),a
                                   2688 ;	Main.c:232: PassWord2 = (AT24C02_ReadByte(2)|AT24C02_ReadByte(3) << 8); 
      000AE5 75 82 02         [24] 2689 	mov	dpl,#0x02
      000AE8 12r04rD4         [24] 2690 	lcall	_AT24C02_ReadByte
      000AEB AF 82            [24] 2691 	mov	r7,dpl
      000AED 75 82 03         [24] 2692 	mov	dpl,#0x03
      000AF0 C0 07            [24] 2693 	push	ar7
      000AF2 12r04rD4         [24] 2694 	lcall	_AT24C02_ReadByte
      000AF5 AE 82            [24] 2695 	mov	r6,dpl
      000AF7 D0 07            [24] 2696 	pop	ar7
      000AF9 8E 05            [24] 2697 	mov	ar5,r6
      000AFB E4               [12] 2698 	clr	a
      000AFC FE               [12] 2699 	mov	r6,a
      000AFD FC               [12] 2700 	mov	r4,a
      000AFE 4F               [12] 2701 	orl	a,r7
      000AFF F5*2B            [12] 2702 	mov	_PassWord2,a
      000B01 ED               [12] 2703 	mov	a,r5
      000B02 4C               [12] 2704 	orl	a,r4
      000B03 F5*2C            [12] 2705 	mov	(_PassWord2 + 1),a
                                   2706 ;	Main.c:234: if(Num_Mat != 0 && Num_Mat <= 10)
      000B05 E5*20            [12] 2707 	mov	a,_Num_Mat
      000B07 70 03            [24] 2708 	jnz	00340$
      000B09 02r0Cr8A         [24] 2709 	ljmp	00158$
      000B0C                       2710 00340$:
      000B0C E5*20            [12] 2711 	mov	a,_Num_Mat
      000B0E 24 F5            [12] 2712 	add	a,#0xff - 0x0a
      000B10 50 03            [24] 2713 	jnc	00341$
      000B12 02r0Cr8A         [24] 2714 	ljmp	00158$
      000B15                       2715 00341$:
                                   2716 ;	Main.c:238: if (cont < 6)
      000B15 C3               [12] 2717 	clr	c
      000B16 E5*1E            [12] 2718 	mov	a,_cont
      000B18 94 06            [12] 2719 	subb	a,#0x06
      000B1A E5*1F            [12] 2720 	mov	a,(_cont + 1)
      000B1C 94 00            [12] 2721 	subb	a,#0x00
      000B1E 40 03            [24] 2722 	jc	00342$
      000B20 02r0BrCE         [24] 2723 	ljmp	00148$
      000B23                       2724 00342$:
                                   2725 ;	Main.c:240: PassWord_Ent = PassWord_Ent * 10 + Num_Mat%10;
      000B23 85*2D*00         [24] 2726 	mov	__mulint_PARM_2,_PassWord_Ent
      000B26 85*2E*01         [24] 2727 	mov	(__mulint_PARM_2 + 1),(_PassWord_Ent + 1)
      000B29 90 00 0A         [24] 2728 	mov	dptr,#0x000a
      000B2C 12r00r00         [24] 2729 	lcall	__mulint
      000B2F AE 82            [24] 2730 	mov	r6,dpl
      000B31 AF 83            [24] 2731 	mov	r7,dph
      000B33 AC*20            [24] 2732 	mov	r4,_Num_Mat
      000B35 7D 00            [12] 2733 	mov	r5,#0x00
      000B37 75*00 0A         [24] 2734 	mov	__modsint_PARM_2,#0x0a
                                   2735 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000B3A 8D*01            [24] 2736 	mov	(__modsint_PARM_2 + 1),r5
      000B3C 8C 82            [24] 2737 	mov	dpl,r4
      000B3E 8D 83            [24] 2738 	mov	dph,r5
      000B40 C0 07            [24] 2739 	push	ar7
      000B42 C0 06            [24] 2740 	push	ar6
      000B44 12r00r00         [24] 2741 	lcall	__modsint
      000B47 AC 82            [24] 2742 	mov	r4,dpl
      000B49 AD 83            [24] 2743 	mov	r5,dph
      000B4B D0 06            [24] 2744 	pop	ar6
      000B4D D0 07            [24] 2745 	pop	ar7
      000B4F EC               [12] 2746 	mov	a,r4
      000B50 2E               [12] 2747 	add	a,r6
      000B51 F5*2D            [12] 2748 	mov	_PassWord_Ent,a
      000B53 ED               [12] 2749 	mov	a,r5
      000B54 3F               [12] 2750 	addc	a,r7
      000B55 F5*2E            [12] 2751 	mov	(_PassWord_Ent + 1),a
                                   2752 ;	Main.c:241: PassWord_Ent1_1 = PassWord_Ent / 1000;
      000B57 75*00 E8         [24] 2753 	mov	__divuint_PARM_2,#0xe8
      000B5A 75*01 03         [24] 2754 	mov	(__divuint_PARM_2 + 1),#0x03
      000B5D 85*2D 82         [24] 2755 	mov	dpl,_PassWord_Ent
      000B60 85*2E 83         [24] 2756 	mov	dph,(_PassWord_Ent + 1)
      000B63 12r00r00         [24] 2757 	lcall	__divuint
      000B66 85 82*31         [24] 2758 	mov	_PassWord_Ent1_1,dpl
      000B69 85 83*32         [24] 2759 	mov	(_PassWord_Ent1_1 + 1),dph
                                   2760 ;	Main.c:242: PassWord_Ent1 = PassWord_Ent1 *10 + PassWord_Ent1_1;
      000B6C 85*2F*00         [24] 2761 	mov	__mulint_PARM_2,_PassWord_Ent1
      000B6F 85*30*01         [24] 2762 	mov	(__mulint_PARM_2 + 1),(_PassWord_Ent1 + 1)
      000B72 90 00 0A         [24] 2763 	mov	dptr,#0x000a
      000B75 12r00r00         [24] 2764 	lcall	__mulint
      000B78 E5 82            [12] 2765 	mov	a,dpl
      000B7A 85 83 F0         [24] 2766 	mov	b,dph
      000B7D 25*31            [12] 2767 	add	a,_PassWord_Ent1_1
      000B7F F5*2F            [12] 2768 	mov	_PassWord_Ent1,a
      000B81 E5*32            [12] 2769 	mov	a,(_PassWord_Ent1_1 + 1)
      000B83 35 F0            [12] 2770 	addc	a,b
      000B85 F5*30            [12] 2771 	mov	(_PassWord_Ent1 + 1),a
                                   2772 ;	Main.c:243: PassWord_Ent2 = PassWord_Ent % 1000;
      000B87 75*00 E8         [24] 2773 	mov	__moduint_PARM_2,#0xe8
      000B8A 75*01 03         [24] 2774 	mov	(__moduint_PARM_2 + 1),#0x03
      000B8D 85*2D 82         [24] 2775 	mov	dpl,_PassWord_Ent
      000B90 85*2E 83         [24] 2776 	mov	dph,(_PassWord_Ent + 1)
      000B93 12r00r00         [24] 2777 	lcall	__moduint
      000B96 85 82*33         [24] 2778 	mov	_PassWord_Ent2,dpl
      000B99 85 83*34         [24] 2779 	mov	(_PassWord_Ent2 + 1),dph
                                   2780 ;	Main.c:244: PassWord_Ent = PassWord_Ent2;
      000B9C 85*33*2D         [24] 2781 	mov	_PassWord_Ent,_PassWord_Ent2
      000B9F 85*34*2E         [24] 2782 	mov	(_PassWord_Ent + 1),(_PassWord_Ent2 + 1)
                                   2783 ;	Main.c:245: cont++;
      000BA2 05*1E            [12] 2784 	inc	_cont
      000BA4 E4               [12] 2785 	clr	a
      000BA5 B5*1E 02         [24] 2786 	cjne	a,_cont,00343$
      000BA8 05*1F            [12] 2787 	inc	(_cont + 1)
      000BAA                       2788 00343$:
                                   2789 ;	Main.c:247: LCD_ShowNum(2,4,PassWord_Ent1,3);
      000BAA 75*09 04         [24] 2790 	mov	_LCD_ShowNum_PARM_2,#0x04
      000BAD 85*2F*0A         [24] 2791 	mov	_LCD_ShowNum_PARM_3,_PassWord_Ent1
      000BB0 85*30*0B         [24] 2792 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Ent1 + 1)
      000BB3 75*0C 03         [24] 2793 	mov	_LCD_ShowNum_PARM_4,#0x03
      000BB6 75 82 02         [24] 2794 	mov	dpl,#0x02
      000BB9 12r02r83         [24] 2795 	lcall	_LCD_ShowNum
                                   2796 ;	Main.c:248: LCD_ShowNum(2,7,PassWord_Ent2,3);
      000BBC 75*09 07         [24] 2797 	mov	_LCD_ShowNum_PARM_2,#0x07
      000BBF 85*33*0A         [24] 2798 	mov	_LCD_ShowNum_PARM_3,_PassWord_Ent2
      000BC2 85*34*0B         [24] 2799 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Ent2 + 1)
      000BC5 75*0C 03         [24] 2800 	mov	_LCD_ShowNum_PARM_4,#0x03
      000BC8 75 82 02         [24] 2801 	mov	dpl,#0x02
      000BCB 12r02r83         [24] 2802 	lcall	_LCD_ShowNum
      000BCE                       2803 00148$:
                                   2804 ;	Main.c:250: DelayMs(700);
      000BCE 90 02 BC         [24] 2805 	mov	dptr,#0x02bc
      000BD1 12r01r7B         [24] 2806 	lcall	_DelayMs
                                   2807 ;	Main.c:251: switch(cont)
      000BD4 C3               [12] 2808 	clr	c
      000BD5 74 06            [12] 2809 	mov	a,#0x06
      000BD7 95*1E            [12] 2810 	subb	a,_cont
      000BD9 E4               [12] 2811 	clr	a
      000BDA 95*1F            [12] 2812 	subb	a,(_cont + 1)
      000BDC 50 03            [24] 2813 	jnc	00344$
      000BDE 02r0Cr8A         [24] 2814 	ljmp	00158$
      000BE1                       2815 00344$:
      000BE1 E5*1E            [12] 2816 	mov	a,_cont
      000BE3 75 F0 03         [24] 2817 	mov	b,#0x03
      000BE6 A4               [48] 2818 	mul	ab
      000BE7 90r0BrEB         [24] 2819 	mov	dptr,#00345$
      000BEA 73               [24] 2820 	jmp	@a+dptr
      000BEB                       2821 00345$:
      000BEB 02r0Cr00         [24] 2822 	ljmp	00149$
      000BEE 02r0Cr14         [24] 2823 	ljmp	00150$
      000BF1 02r0Cr28         [24] 2824 	ljmp	00151$
      000BF4 02r0Cr3C         [24] 2825 	ljmp	00152$
      000BF7 02r0Cr50         [24] 2826 	ljmp	00153$
      000BFA 02r0Cr64         [24] 2827 	ljmp	00154$
      000BFD 02r0Cr78         [24] 2828 	ljmp	00155$
                                   2829 ;	Main.c:253: case 0:LCD_ShowString(2,4,"000000");break;
      000C00                       2830 00149$:
      000C00 75*04r75         [24] 2831 	mov	_LCD_ShowString_PARM_3,#___str_18
      000C03 75*05s00         [24] 2832 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_18 >> 8)
      000C06 75*06 80         [24] 2833 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000C09 75*03 04         [24] 2834 	mov	_LCD_ShowString_PARM_2,#0x04
      000C0C 75 82 02         [24] 2835 	mov	dpl,#0x02
      000C0F 12r02r16         [24] 2836 	lcall	_LCD_ShowString
                                   2837 ;	Main.c:254: case 1:LCD_ShowString(2,4,"00000*");break;
      000C12 80 76            [24] 2838 	sjmp	00158$
      000C14                       2839 00150$:
      000C14 75*04r7C         [24] 2840 	mov	_LCD_ShowString_PARM_3,#___str_19
      000C17 75*05s00         [24] 2841 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_19 >> 8)
      000C1A 75*06 80         [24] 2842 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000C1D 75*03 04         [24] 2843 	mov	_LCD_ShowString_PARM_2,#0x04
      000C20 75 82 02         [24] 2844 	mov	dpl,#0x02
      000C23 12r02r16         [24] 2845 	lcall	_LCD_ShowString
                                   2846 ;	Main.c:255: case 2:LCD_ShowString(2,4,"0000**");break;
      000C26 80 62            [24] 2847 	sjmp	00158$
      000C28                       2848 00151$:
      000C28 75*04r83         [24] 2849 	mov	_LCD_ShowString_PARM_3,#___str_20
      000C2B 75*05s00         [24] 2850 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_20 >> 8)
      000C2E 75*06 80         [24] 2851 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000C31 75*03 04         [24] 2852 	mov	_LCD_ShowString_PARM_2,#0x04
      000C34 75 82 02         [24] 2853 	mov	dpl,#0x02
      000C37 12r02r16         [24] 2854 	lcall	_LCD_ShowString
                                   2855 ;	Main.c:256: case 3:LCD_ShowString(2,4,"000***");break;
      000C3A 80 4E            [24] 2856 	sjmp	00158$
      000C3C                       2857 00152$:
      000C3C 75*04r8A         [24] 2858 	mov	_LCD_ShowString_PARM_3,#___str_21
      000C3F 75*05s00         [24] 2859 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_21 >> 8)
      000C42 75*06 80         [24] 2860 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000C45 75*03 04         [24] 2861 	mov	_LCD_ShowString_PARM_2,#0x04
      000C48 75 82 02         [24] 2862 	mov	dpl,#0x02
      000C4B 12r02r16         [24] 2863 	lcall	_LCD_ShowString
                                   2864 ;	Main.c:257: case 4:LCD_ShowString(2,4,"00****");break;
      000C4E 80 3A            [24] 2865 	sjmp	00158$
      000C50                       2866 00153$:
      000C50 75*04r91         [24] 2867 	mov	_LCD_ShowString_PARM_3,#___str_22
      000C53 75*05s00         [24] 2868 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_22 >> 8)
      000C56 75*06 80         [24] 2869 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000C59 75*03 04         [24] 2870 	mov	_LCD_ShowString_PARM_2,#0x04
      000C5C 75 82 02         [24] 2871 	mov	dpl,#0x02
      000C5F 12r02r16         [24] 2872 	lcall	_LCD_ShowString
                                   2873 ;	Main.c:258: case 5:LCD_ShowString(2,4,"0*****");break;
      000C62 80 26            [24] 2874 	sjmp	00158$
      000C64                       2875 00154$:
      000C64 75*04r98         [24] 2876 	mov	_LCD_ShowString_PARM_3,#___str_23
      000C67 75*05s00         [24] 2877 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_23 >> 8)
      000C6A 75*06 80         [24] 2878 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000C6D 75*03 04         [24] 2879 	mov	_LCD_ShowString_PARM_2,#0x04
      000C70 75 82 02         [24] 2880 	mov	dpl,#0x02
      000C73 12r02r16         [24] 2881 	lcall	_LCD_ShowString
                                   2882 ;	Main.c:259: case 6:LCD_ShowString(2,4,"******");break;
      000C76 80 12            [24] 2883 	sjmp	00158$
      000C78                       2884 00155$:
      000C78 75*04r9F         [24] 2885 	mov	_LCD_ShowString_PARM_3,#___str_24
      000C7B 75*05s00         [24] 2886 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_24 >> 8)
      000C7E 75*06 80         [24] 2887 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000C81 75*03 04         [24] 2888 	mov	_LCD_ShowString_PARM_2,#0x04
      000C84 75 82 02         [24] 2889 	mov	dpl,#0x02
      000C87 12r02r16         [24] 2890 	lcall	_LCD_ShowString
                                   2891 ;	Main.c:260: }
      000C8A                       2892 00158$:
                                   2893 ;	Main.c:263: if(Num_Mat == 11)
      000C8A 74 0B            [12] 2894 	mov	a,#0x0b
      000C8C B5*20 02         [24] 2895 	cjne	a,_Num_Mat,00346$
      000C8F 80 03            [24] 2896 	sjmp	00347$
      000C91                       2897 00346$:
      000C91 02r0Dr4C         [24] 2898 	ljmp	00165$
      000C94                       2899 00347$:
                                   2900 ;	Main.c:266: if(PassWord1 == PassWord_Ent1 && PassWord2 == PassWord_Ent2)
      000C94 E5*2F            [12] 2901 	mov	a,_PassWord_Ent1
      000C96 B5*29 76         [24] 2902 	cjne	a,_PassWord1,00161$
      000C99 E5*30            [12] 2903 	mov	a,(_PassWord_Ent1 + 1)
      000C9B B5*2A 71         [24] 2904 	cjne	a,(_PassWord1 + 1),00161$
      000C9E E5*33            [12] 2905 	mov	a,_PassWord_Ent2
      000CA0 B5*2B 6C         [24] 2906 	cjne	a,_PassWord2,00161$
      000CA3 E5*34            [12] 2907 	mov	a,(_PassWord_Ent2 + 1)
      000CA5 B5*2C 67         [24] 2908 	cjne	a,(_PassWord2 + 1),00161$
                                   2909 ;	Main.c:268: LCD_ShowString(1,14,"O"); // 在LCD上显示字符串
      000CA8 75*04r6C         [24] 2910 	mov	_LCD_ShowString_PARM_3,#___str_16
      000CAB 75*05s00         [24] 2911 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_16 >> 8)
      000CAE 75*06 80         [24] 2912 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000CB1 75*03 0E         [24] 2913 	mov	_LCD_ShowString_PARM_2,#0x0e
      000CB4 75 82 01         [24] 2914 	mov	dpl,#0x01
      000CB7 12r02r16         [24] 2915 	lcall	_LCD_ShowString
                                   2916 ;	Main.c:270: cont = 0; // 计数清零
      000CBA E4               [12] 2917 	clr	a
      000CBB F5*1E            [12] 2918 	mov	_cont,a
      000CBD F5*1F            [12] 2919 	mov	(_cont + 1),a
                                   2920 ;	Main.c:271: PassWord_Ent = 0; // 清零密码
      000CBF F5*2D            [12] 2921 	mov	_PassWord_Ent,a
      000CC1 F5*2E            [12] 2922 	mov	(_PassWord_Ent + 1),a
                                   2923 ;	Main.c:272: PassWord_Ent1 = 0; // 清零密码
      000CC3 F5*2F            [12] 2924 	mov	_PassWord_Ent1,a
      000CC5 F5*30            [12] 2925 	mov	(_PassWord_Ent1 + 1),a
                                   2926 ;	Main.c:273: PassWord_Ent2 = 0; // 清零密码
      000CC7 F5*33            [12] 2927 	mov	_PassWord_Ent2,a
      000CC9 F5*34            [12] 2928 	mov	(_PassWord_Ent2 + 1),a
                                   2929 ;	Main.c:274: DelayS(2); // 延时2秒
      000CCB 90 00 02         [24] 2930 	mov	dptr,#0x0002
      000CCE 12r01r4B         [24] 2931 	lcall	_DelayS
                                   2932 ;	Main.c:275: FLAG_D = 1; // 门状态标志位为1
      000CD1 75*37 01         [24] 2933 	mov	_FLAG_D,#0x01
      000CD4 75*38 00         [24] 2934 	mov	(_FLAG_D + 1),#0x00
                                   2935 ;	Main.c:276: LCD_ShowNum(2,4,PassWord_Ent1,3);
      000CD7 75*09 04         [24] 2936 	mov	_LCD_ShowNum_PARM_2,#0x04
      000CDA 85*2F*0A         [24] 2937 	mov	_LCD_ShowNum_PARM_3,_PassWord_Ent1
      000CDD 85*30*0B         [24] 2938 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Ent1 + 1)
      000CE0 75*0C 03         [24] 2939 	mov	_LCD_ShowNum_PARM_4,#0x03
      000CE3 75 82 02         [24] 2940 	mov	dpl,#0x02
      000CE6 12r02r83         [24] 2941 	lcall	_LCD_ShowNum
                                   2942 ;	Main.c:277: LCD_ShowNum(2,7,PassWord_Ent2,3);
      000CE9 75*09 07         [24] 2943 	mov	_LCD_ShowNum_PARM_2,#0x07
      000CEC 85*33*0A         [24] 2944 	mov	_LCD_ShowNum_PARM_3,_PassWord_Ent2
      000CEF 85*34*0B         [24] 2945 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Ent2 + 1)
      000CF2 75*0C 03         [24] 2946 	mov	_LCD_ShowNum_PARM_4,#0x03
      000CF5 75 82 02         [24] 2947 	mov	dpl,#0x02
      000CF8 12r02r83         [24] 2948 	lcall	_LCD_ShowNum
                                   2949 ;	Main.c:278: LCD_ShowString(1,14,"C"); // 在LCD上显示字符串
      000CFB 75*04r3F         [24] 2950 	mov	_LCD_ShowString_PARM_3,#___str_8
      000CFE 75*05s00         [24] 2951 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_8 >> 8)
      000D01 75*06 80         [24] 2952 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000D04 75*03 0E         [24] 2953 	mov	_LCD_ShowString_PARM_2,#0x0e
      000D07 75 82 01         [24] 2954 	mov	dpl,#0x01
      000D0A 12r02r16         [24] 2955 	lcall	_LCD_ShowString
      000D0D 80 3D            [24] 2956 	sjmp	00165$
      000D0F                       2957 00161$:
                                   2958 ;	Main.c:282: LCD_ShowString(1,14,"C"); // 在LCD上显示字符串
      000D0F 75*04r3F         [24] 2959 	mov	_LCD_ShowString_PARM_3,#___str_8
      000D12 75*05s00         [24] 2960 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_8 >> 8)
      000D15 75*06 80         [24] 2961 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000D18 75*03 0E         [24] 2962 	mov	_LCD_ShowString_PARM_2,#0x0e
      000D1B 75 82 01         [24] 2963 	mov	dpl,#0x01
      000D1E 12r02r16         [24] 2964 	lcall	_LCD_ShowString
                                   2965 ;	Main.c:284: PassWord_Ent = 0; // 清零密码
      000D21 E4               [12] 2966 	clr	a
      000D22 F5*2D            [12] 2967 	mov	_PassWord_Ent,a
      000D24 F5*2E            [12] 2968 	mov	(_PassWord_Ent + 1),a
                                   2969 ;	Main.c:285: PassWord_Ent1 = 0; // 清零密码
      000D26 F5*2F            [12] 2970 	mov	_PassWord_Ent1,a
      000D28 F5*30            [12] 2971 	mov	(_PassWord_Ent1 + 1),a
                                   2972 ;	Main.c:286: PassWord_Ent2 = 0; // 清零密码
      000D2A F5*33            [12] 2973 	mov	_PassWord_Ent2,a
      000D2C F5*34            [12] 2974 	mov	(_PassWord_Ent2 + 1),a
                                   2975 ;	Main.c:287: LCD_ShowString(2,4,"000000");
      000D2E 75*04r75         [24] 2976 	mov	_LCD_ShowString_PARM_3,#___str_18
      000D31 75*05s00         [24] 2977 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_18 >> 8)
      000D34 75*06 80         [24] 2978 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000D37 75*03 04         [24] 2979 	mov	_LCD_ShowString_PARM_2,#0x04
      000D3A 75 82 02         [24] 2980 	mov	dpl,#0x02
      000D3D 12r02r16         [24] 2981 	lcall	_LCD_ShowString
                                   2982 ;	Main.c:288: cont = 0; // 计数清零
      000D40 E4               [12] 2983 	clr	a
      000D41 F5*1E            [12] 2984 	mov	_cont,a
      000D43 F5*1F            [12] 2985 	mov	(_cont + 1),a
                                   2986 ;	Main.c:289: FLAG_F++;
      000D45 05*35            [12] 2987 	inc	_FLAG_F
                                   2988 ;	genFromRTrack removed	clr	a
      000D47 B5*35 02         [24] 2989 	cjne	a,_FLAG_F,00352$
      000D4A 05*36            [12] 2990 	inc	(_FLAG_F + 1)
      000D4C                       2991 00352$:
      000D4C                       2992 00165$:
                                   2993 ;	Main.c:293: if(Num_Mat == 12)
      000D4C 74 0C            [12] 2994 	mov	a,#0x0c
      000D4E B5*20 33         [24] 2995 	cjne	a,_Num_Mat,00167$
                                   2996 ;	Main.c:295: cont = 0; // 计数清零
      000D51 E4               [12] 2997 	clr	a
      000D52 F5*1E            [12] 2998 	mov	_cont,a
      000D54 F5*1F            [12] 2999 	mov	(_cont + 1),a
                                   3000 ;	Main.c:296: PassWord_Ent = 0; // 清零密码
      000D56 F5*2D            [12] 3001 	mov	_PassWord_Ent,a
      000D58 F5*2E            [12] 3002 	mov	(_PassWord_Ent + 1),a
                                   3003 ;	Main.c:297: PassWord_Ent1 = 0; // 清零密码
      000D5A F5*2F            [12] 3004 	mov	_PassWord_Ent1,a
      000D5C F5*30            [12] 3005 	mov	(_PassWord_Ent1 + 1),a
                                   3006 ;	Main.c:298: PassWord_Ent2 = 0; // 清零密码
      000D5E F5*33            [12] 3007 	mov	_PassWord_Ent2,a
      000D60 F5*34            [12] 3008 	mov	(_PassWord_Ent2 + 1),a
                                   3009 ;	Main.c:299: LCD_ShowNum(2,4,PassWord_Ent1,3);
      000D62 75*09 04         [24] 3010 	mov	_LCD_ShowNum_PARM_2,#0x04
      000D65 F5*0A            [12] 3011 	mov	_LCD_ShowNum_PARM_3,a
      000D67 F5*0B            [12] 3012 	mov	(_LCD_ShowNum_PARM_3 + 1),a
      000D69 75*0C 03         [24] 3013 	mov	_LCD_ShowNum_PARM_4,#0x03
      000D6C 75 82 02         [24] 3014 	mov	dpl,#0x02
      000D6F 12r02r83         [24] 3015 	lcall	_LCD_ShowNum
                                   3016 ;	Main.c:300: LCD_ShowNum(2,7,PassWord_Ent2,3);// 在LCD上显示数字
      000D72 75*09 07         [24] 3017 	mov	_LCD_ShowNum_PARM_2,#0x07
      000D75 85*33*0A         [24] 3018 	mov	_LCD_ShowNum_PARM_3,_PassWord_Ent2
      000D78 85*34*0B         [24] 3019 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Ent2 + 1)
      000D7B 75*0C 03         [24] 3020 	mov	_LCD_ShowNum_PARM_4,#0x03
      000D7E 75 82 02         [24] 3021 	mov	dpl,#0x02
      000D81 12r02r83         [24] 3022 	lcall	_LCD_ShowNum
      000D84                       3023 00167$:
                                   3024 ;	Main.c:302: if(FLAG_F >= 3)
      000D84 C3               [12] 3025 	clr	c
      000D85 E5*35            [12] 3026 	mov	a,_FLAG_F
      000D87 94 03            [12] 3027 	subb	a,#0x03
      000D89 E5*36            [12] 3028 	mov	a,(_FLAG_F + 1)
      000D8B 94 00            [12] 3029 	subb	a,#0x00
      000D8D 40 0F            [24] 3030 	jc	00169$
                                   3031 ;	Main.c:304: DARGER = 0;
                                   3032 ;	assignBit
      000D8F C2 A3            [12] 3033 	clr	_P2_3
                                   3034 ;	Main.c:305: DelayMs(500);
      000D91 90 01 F4         [24] 3035 	mov	dptr,#0x01f4
      000D94 12r01r7B         [24] 3036 	lcall	_DelayMs
                                   3037 ;	Main.c:306: DARGER = 1;
                                   3038 ;	assignBit
      000D97 D2 A3            [12] 3039 	setb	_P2_3
                                   3040 ;	Main.c:307: FLAG_F = 0;
      000D99 E4               [12] 3041 	clr	a
      000D9A F5*35            [12] 3042 	mov	_FLAG_F,a
      000D9C F5*36            [12] 3043 	mov	(_FLAG_F + 1),a
      000D9E                       3044 00169$:
                                   3045 ;	Main.c:310: LCD_ShowNum(2,15,FLAG_F,2);
      000D9E 75*09 0F         [24] 3046 	mov	_LCD_ShowNum_PARM_2,#0x0f
      000DA1 85*35*0A         [24] 3047 	mov	_LCD_ShowNum_PARM_3,_FLAG_F
      000DA4 85*36*0B         [24] 3048 	mov	(_LCD_ShowNum_PARM_3 + 1),(_FLAG_F + 1)
      000DA7 75*0C 02         [24] 3049 	mov	_LCD_ShowNum_PARM_4,#0x02
      000DAA 75 82 02         [24] 3050 	mov	dpl,#0x02
      000DAD 12r02r83         [24] 3051 	lcall	_LCD_ShowNum
                                   3052 ;	Main.c:313: }
      000DB0 02r06r54         [24] 3053 	ljmp	00173$
                                   3054 ;------------------------------------------------------------
                                   3055 ;Allocation info for local variables in function 'T0_Routine'
                                   3056 ;------------------------------------------------------------
                                   3057 ;count                     Allocated with name '_T0_Routine_count_65536_161'
                                   3058 ;i                         Allocated with name '_T0_Routine_i_65536_161'
                                   3059 ;------------------------------------------------------------
                                   3060 ;	Main.c:316: void T0_Routine() __interrupt 1
                                   3061 ;	-----------------------------------------
                                   3062 ;	 function T0_Routine
                                   3063 ;	-----------------------------------------
      000DB3                       3064 _T0_Routine:
      000DB3 C0*00            [24] 3065 	push	bits
      000DB5 C0 E0            [24] 3066 	push	acc
      000DB7 C0 F0            [24] 3067 	push	b
      000DB9 C0 82            [24] 3068 	push	dpl
      000DBB C0 83            [24] 3069 	push	dph
      000DBD C0 07            [24] 3070 	push	(0+7)
      000DBF C0 06            [24] 3071 	push	(0+6)
      000DC1 C0 05            [24] 3072 	push	(0+5)
      000DC3 C0 04            [24] 3073 	push	(0+4)
      000DC5 C0 03            [24] 3074 	push	(0+3)
      000DC7 C0 02            [24] 3075 	push	(0+2)
      000DC9 C0 01            [24] 3076 	push	(0+1)
      000DCB C0 00            [24] 3077 	push	(0+0)
      000DCD C0 D0            [24] 3078 	push	psw
      000DCF 75 D0 00         [24] 3079 	mov	psw,#0x00
                                   3080 ;	Main.c:320: TH0 = 0xfc; // 设置定时器初值高8位
      000DD2 75 8C FC         [24] 3081 	mov	_TH0,#0xfc
                                   3082 ;	Main.c:321: TL0 = 0x18; // 设置定时器初值低8位
      000DD5 75 8A 18         [24] 3083 	mov	_TL0,#0x18
                                   3084 ;	Main.c:322: count++; // 计数加一
      000DD8 05*3B            [12] 3085 	inc	_T0_Routine_count_65536_161
      000DDA E4               [12] 3086 	clr	a
      000DDB B5*3B 02         [24] 3087 	cjne	a,_T0_Routine_count_65536_161,00159$
      000DDE 05*3C            [12] 3088 	inc	(_T0_Routine_count_65536_161 + 1)
      000DE0                       3089 00159$:
                                   3090 ;	Main.c:324: if(count == 100)
      000DE0 74 64            [12] 3091 	mov	a,#0x64
      000DE2 B5*3B 06         [24] 3092 	cjne	a,_T0_Routine_count_65536_161,00160$
      000DE5 E4               [12] 3093 	clr	a
      000DE6 B5*3C 02         [24] 3094 	cjne	a,(_T0_Routine_count_65536_161 + 1),00160$
      000DE9 80 03            [24] 3095 	sjmp	00161$
      000DEB                       3096 00160$:
      000DEB 02r0Er7F         [24] 3097 	ljmp	00117$
      000DEE                       3098 00161$:
                                   3099 ;	Main.c:327: if(P3_4 == 0 && P3_5 == 0)
      000DEE 20 B4 17         [24] 3100 	jb	_P3_4,00105$
      000DF1 20 B5 14         [24] 3101 	jb	_P3_5,00105$
                                   3102 ;	Main.c:330: if(P3_4 == 0 && P3_5 == 0)
      000DF4 20 B4 11         [24] 3103 	jb	_P3_4,00105$
      000DF7 20 B5 0E         [24] 3104 	jb	_P3_5,00105$
                                   3105 ;	Main.c:332: DelayS(1); // 延时1秒
      000DFA 90 00 01         [24] 3106 	mov	dptr,#0x0001
      000DFD 12r01r4B         [24] 3107 	lcall	_DelayS
                                   3108 ;	Main.c:333: K1++; // K1计数加一
      000E00 05*1A            [12] 3109 	inc	_K1
      000E02 E4               [12] 3110 	clr	a
      000E03 B5*1A 02         [24] 3111 	cjne	a,_K1,00166$
      000E06 05*1B            [12] 3112 	inc	(_K1 + 1)
      000E08                       3113 00166$:
      000E08                       3114 00105$:
                                   3115 ;	Main.c:336: if(FLAG_D)
      000E08 E5*37            [12] 3116 	mov	a,_FLAG_D
      000E0A 45*38            [12] 3117 	orl	a,(_FLAG_D + 1)
      000E0C 70 03            [24] 3118 	jnz	00167$
      000E0E 02r0Er7A         [24] 3119 	ljmp	00110$
      000E11                       3120 00167$:
                                   3121 ;	Main.c:338: for(i=0;i<200;i++)
      000E11 75*3D 00         [24] 3122 	mov	_T0_Routine_i_65536_161,#0x00
      000E14                       3123 00113$:
                                   3124 ;	Main.c:340: P3 = 0x80;
      000E14 75 B0 80         [24] 3125 	mov	_P3,#0x80
                                   3126 ;	Main.c:341: DelayMs(3);
      000E17 90 00 03         [24] 3127 	mov	dptr,#0x0003
      000E1A 12r01r7B         [24] 3128 	lcall	_DelayMs
                                   3129 ;	Main.c:342: P3 = 0x40;
      000E1D 75 B0 40         [24] 3130 	mov	_P3,#0x40
                                   3131 ;	Main.c:343: DelayMs(3);
      000E20 90 00 03         [24] 3132 	mov	dptr,#0x0003
      000E23 12r01r7B         [24] 3133 	lcall	_DelayMs
                                   3134 ;	Main.c:344: P3 = 0x20;
      000E26 75 B0 20         [24] 3135 	mov	_P3,#0x20
                                   3136 ;	Main.c:345: DelayMs(3);
      000E29 90 00 03         [24] 3137 	mov	dptr,#0x0003
      000E2C 12r01r7B         [24] 3138 	lcall	_DelayMs
                                   3139 ;	Main.c:346: P3 = 0x10;
      000E2F 75 B0 10         [24] 3140 	mov	_P3,#0x10
                                   3141 ;	Main.c:347: DelayMs(3);
      000E32 90 00 03         [24] 3142 	mov	dptr,#0x0003
      000E35 12r01r7B         [24] 3143 	lcall	_DelayMs
                                   3144 ;	Main.c:338: for(i=0;i<200;i++)
      000E38 05*3D            [12] 3145 	inc	_T0_Routine_i_65536_161
      000E3A 74 38            [12] 3146 	mov	a,#0x100 - 0xc8
      000E3C 25*3D            [12] 3147 	add	a,_T0_Routine_i_65536_161
      000E3E 50 D4            [24] 3148 	jnc	00113$
                                   3149 ;	Main.c:349: DelayS(2);
      000E40 90 00 02         [24] 3150 	mov	dptr,#0x0002
      000E43 12r01r4B         [24] 3151 	lcall	_DelayS
                                   3152 ;	Main.c:350: for(i=0;i<130;i++)
      000E46 75*3D 00         [24] 3153 	mov	_T0_Routine_i_65536_161,#0x00
      000E49                       3154 00115$:
                                   3155 ;	Main.c:352: P3 = 0x10;
      000E49 75 B0 10         [24] 3156 	mov	_P3,#0x10
                                   3157 ;	Main.c:353: DelayMs(3);
      000E4C 90 00 03         [24] 3158 	mov	dptr,#0x0003
      000E4F 12r01r7B         [24] 3159 	lcall	_DelayMs
                                   3160 ;	Main.c:354: P3 = 0x20;
      000E52 75 B0 20         [24] 3161 	mov	_P3,#0x20
                                   3162 ;	Main.c:355: DelayMs(3);
      000E55 90 00 03         [24] 3163 	mov	dptr,#0x0003
      000E58 12r01r7B         [24] 3164 	lcall	_DelayMs
                                   3165 ;	Main.c:356: P3 = 0x40;
      000E5B 75 B0 40         [24] 3166 	mov	_P3,#0x40
                                   3167 ;	Main.c:357: DelayMs(3);
      000E5E 90 00 03         [24] 3168 	mov	dptr,#0x0003
      000E61 12r01r7B         [24] 3169 	lcall	_DelayMs
                                   3170 ;	Main.c:358: P3 = 0x80;
      000E64 75 B0 80         [24] 3171 	mov	_P3,#0x80
                                   3172 ;	Main.c:359: DelayMs(3);
      000E67 90 00 03         [24] 3173 	mov	dptr,#0x0003
      000E6A 12r01r7B         [24] 3174 	lcall	_DelayMs
                                   3175 ;	Main.c:350: for(i=0;i<130;i++)
      000E6D 05*3D            [12] 3176 	inc	_T0_Routine_i_65536_161
      000E6F 74 7E            [12] 3177 	mov	a,#0x100 - 0x82
      000E71 25*3D            [12] 3178 	add	a,_T0_Routine_i_65536_161
      000E73 50 D4            [24] 3179 	jnc	00115$
                                   3180 ;	Main.c:361: FLAG_D = 0;
      000E75 E4               [12] 3181 	clr	a
      000E76 F5*37            [12] 3182 	mov	_FLAG_D,a
      000E78 F5*38            [12] 3183 	mov	(_FLAG_D + 1),a
      000E7A                       3184 00110$:
                                   3185 ;	Main.c:363: count = 0; // 计数清零
      000E7A E4               [12] 3186 	clr	a
      000E7B F5*3B            [12] 3187 	mov	_T0_Routine_count_65536_161,a
      000E7D F5*3C            [12] 3188 	mov	(_T0_Routine_count_65536_161 + 1),a
      000E7F                       3189 00117$:
                                   3190 ;	Main.c:365: }
      000E7F D0 D0            [24] 3191 	pop	psw
      000E81 D0 00            [24] 3192 	pop	(0+0)
      000E83 D0 01            [24] 3193 	pop	(0+1)
      000E85 D0 02            [24] 3194 	pop	(0+2)
      000E87 D0 03            [24] 3195 	pop	(0+3)
      000E89 D0 04            [24] 3196 	pop	(0+4)
      000E8B D0 05            [24] 3197 	pop	(0+5)
      000E8D D0 06            [24] 3198 	pop	(0+6)
      000E8F D0 07            [24] 3199 	pop	(0+7)
      000E91 D0 83            [24] 3200 	pop	dph
      000E93 D0 82            [24] 3201 	pop	dpl
      000E95 D0 F0            [24] 3202 	pop	b
      000E97 D0 E0            [24] 3203 	pop	acc
      000E99 D0*00            [24] 3204 	pop	bits
      000E9B 32               [24] 3205 	reti
                                   3206 	.area CSEG    (CODE)
                                   3207 	.area CONST   (CODE)
                                   3208 	.area CONST   (CODE)
      000000                       3209 ___str_0:
      000000 4C 3A 4C 57 48        3210 	.ascii "L:LWH"
      000005 00                    3211 	.db 0x00
                                   3212 	.area CSEG    (CODE)
                                   3213 	.area CONST   (CODE)
      000006                       3214 ___str_1:
      000006 43 3A 43 58 4C 20 26  3215 	.ascii "C:CXL & JM"
             20 4A 4D
      000010 00                    3216 	.db 0x00
                                   3217 	.area CSEG    (CODE)
                                   3218 	.area CONST   (CODE)
      000011                       3219 ___str_2:
      000011 20 20 20 20 20        3220 	.ascii "     "
      000016 00                    3221 	.db 0x00
                                   3222 	.area CSEG    (CODE)
                                   3223 	.area CONST   (CODE)
      000017                       3224 ___str_3:
      000017 4D 4F 44 45 3A 53     3225 	.ascii "MODE:S"
      00001D 00                    3226 	.db 0x00
                                   3227 	.area CSEG    (CODE)
                                   3228 	.area CONST   (CODE)
      00001E                       3229 ___str_4:
      00001E 50 44 3A              3230 	.ascii "PD:"
      000021 00                    3231 	.db 0x00
                                   3232 	.area CSEG    (CODE)
                                   3233 	.area CONST   (CODE)
      000022                       3234 ___str_5:
      000022 53 75 63 63 65 73 73  3235 	.ascii "Success"
      000029 00                    3236 	.db 0x00
                                   3237 	.area CSEG    (CODE)
                                   3238 	.area CONST   (CODE)
      00002A                       3239 ___str_6:
      00002A 20 20 20 20 20 20 20  3240 	.ascii "              "
             20 20 20 20 20 20 20
      000038 00                    3241 	.db 0x00
                                   3242 	.area CSEG    (CODE)
                                   3243 	.area CONST   (CODE)
      000039                       3244 ___str_7:
      000039 44 4F 4F 52 3A        3245 	.ascii "DOOR:"
      00003E 00                    3246 	.db 0x00
                                   3247 	.area CSEG    (CODE)
                                   3248 	.area CONST   (CODE)
      00003F                       3249 ___str_8:
      00003F 43                    3250 	.ascii "C"
      000040 00                    3251 	.db 0x00
                                   3252 	.area CSEG    (CODE)
                                   3253 	.area CONST   (CODE)
      000041                       3254 ___str_9:
      000041 4D 4F 44 45 3A 4D     3255 	.ascii "MODE:M"
      000047 00                    3256 	.db 0x00
                                   3257 	.area CSEG    (CODE)
                                   3258 	.area CONST   (CODE)
      000048                       3259 ___str_10:
      000048 30 30 30 30 30        3260 	.ascii "00000"
      00004D 00                    3261 	.db 0x00
                                   3262 	.area CSEG    (CODE)
                                   3263 	.area CONST   (CODE)
      00004E                       3264 ___str_11:
      00004E 30 30 30 30 2A        3265 	.ascii "0000*"
      000053 00                    3266 	.db 0x00
                                   3267 	.area CSEG    (CODE)
                                   3268 	.area CONST   (CODE)
      000054                       3269 ___str_12:
      000054 30 30 30 2A 2A        3270 	.ascii "000**"
      000059 00                    3271 	.db 0x00
                                   3272 	.area CSEG    (CODE)
                                   3273 	.area CONST   (CODE)
      00005A                       3274 ___str_13:
      00005A 30 30 2A 2A 2A        3275 	.ascii "00***"
      00005F 00                    3276 	.db 0x00
                                   3277 	.area CSEG    (CODE)
                                   3278 	.area CONST   (CODE)
      000060                       3279 ___str_14:
      000060 30 2A 2A 2A 2A        3280 	.ascii "0****"
      000065 00                    3281 	.db 0x00
                                   3282 	.area CSEG    (CODE)
                                   3283 	.area CONST   (CODE)
      000066                       3284 ___str_15:
      000066 2A 2A 2A 2A 2A        3285 	.ascii "*****"
      00006B 00                    3286 	.db 0x00
                                   3287 	.area CSEG    (CODE)
                                   3288 	.area CONST   (CODE)
      00006C                       3289 ___str_16:
      00006C 4F                    3290 	.ascii "O"
      00006D 00                    3291 	.db 0x00
                                   3292 	.area CSEG    (CODE)
                                   3293 	.area CONST   (CODE)
      00006E                       3294 ___str_17:
      00006E 4D 4F 44 45 3A 45     3295 	.ascii "MODE:E"
      000074 00                    3296 	.db 0x00
                                   3297 	.area CSEG    (CODE)
                                   3298 	.area CONST   (CODE)
      000075                       3299 ___str_18:
      000075 30 30 30 30 30 30     3300 	.ascii "000000"
      00007B 00                    3301 	.db 0x00
                                   3302 	.area CSEG    (CODE)
                                   3303 	.area CONST   (CODE)
      00007C                       3304 ___str_19:
      00007C 30 30 30 30 30 2A     3305 	.ascii "00000*"
      000082 00                    3306 	.db 0x00
                                   3307 	.area CSEG    (CODE)
                                   3308 	.area CONST   (CODE)
      000083                       3309 ___str_20:
      000083 30 30 30 30 2A 2A     3310 	.ascii "0000**"
      000089 00                    3311 	.db 0x00
                                   3312 	.area CSEG    (CODE)
                                   3313 	.area CONST   (CODE)
      00008A                       3314 ___str_21:
      00008A 30 30 30 2A 2A 2A     3315 	.ascii "000***"
      000090 00                    3316 	.db 0x00
                                   3317 	.area CSEG    (CODE)
                                   3318 	.area CONST   (CODE)
      000091                       3319 ___str_22:
      000091 30 30 2A 2A 2A 2A     3320 	.ascii "00****"
      000097 00                    3321 	.db 0x00
                                   3322 	.area CSEG    (CODE)
                                   3323 	.area CONST   (CODE)
      000098                       3324 ___str_23:
      000098 30 2A 2A 2A 2A 2A     3325 	.ascii "0*****"
      00009E 00                    3326 	.db 0x00
                                   3327 	.area CSEG    (CODE)
                                   3328 	.area CONST   (CODE)
      00009F                       3329 ___str_24:
      00009F 2A 2A 2A 2A 2A 2A     3330 	.ascii "******"
      0000A5 00                    3331 	.db 0x00
                                   3332 	.area CSEG    (CODE)
                                   3333 	.area XINIT   (CODE)
                                   3334 	.area CABS    (ABS,CODE)
