                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module Main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _T0_Routine
                                     12 	.globl _main
                                     13 	.globl _delay_key
                                     14 	.globl _LCD_Pow
                                     15 	.globl _LCD_SetCursor
                                     16 	.globl _LCD_WriteData
                                     17 	.globl _LCD_WriteCommand
                                     18 	.globl _LCD_Delay
                                     19 	.globl _delay_mat
                                     20 	.globl _CCF0
                                     21 	.globl _CCF1
                                     22 	.globl _CR
                                     23 	.globl _CF
                                     24 	.globl _P5_3
                                     25 	.globl _P5_2
                                     26 	.globl _P5_1
                                     27 	.globl _P5_0
                                     28 	.globl _P4_7
                                     29 	.globl _P4_6
                                     30 	.globl _P4_5
                                     31 	.globl _P4_4
                                     32 	.globl _P4_3
                                     33 	.globl _P4_2
                                     34 	.globl _P4_1
                                     35 	.globl _P4_0
                                     36 	.globl _PADC
                                     37 	.globl _PLVD
                                     38 	.globl _PPCA
                                     39 	.globl _EADC
                                     40 	.globl _ELVD
                                     41 	.globl _CY
                                     42 	.globl _AC
                                     43 	.globl _F0
                                     44 	.globl _RS1
                                     45 	.globl _RS0
                                     46 	.globl _OV
                                     47 	.globl _F1
                                     48 	.globl _P
                                     49 	.globl _PS
                                     50 	.globl _PT1
                                     51 	.globl _PX1
                                     52 	.globl _PT0
                                     53 	.globl _PX0
                                     54 	.globl _RD
                                     55 	.globl _WR
                                     56 	.globl _T1
                                     57 	.globl _T0
                                     58 	.globl _INT1
                                     59 	.globl _INT0
                                     60 	.globl _TXD
                                     61 	.globl _RXD
                                     62 	.globl _P3_7
                                     63 	.globl _P3_6
                                     64 	.globl _P3_5
                                     65 	.globl _P3_4
                                     66 	.globl _P3_3
                                     67 	.globl _P3_2
                                     68 	.globl _P3_1
                                     69 	.globl _P3_0
                                     70 	.globl _EA
                                     71 	.globl _ES
                                     72 	.globl _ET1
                                     73 	.globl _EX1
                                     74 	.globl _ET0
                                     75 	.globl _EX0
                                     76 	.globl _P2_7
                                     77 	.globl _P2_6
                                     78 	.globl _P2_5
                                     79 	.globl _P2_4
                                     80 	.globl _P2_3
                                     81 	.globl _P2_2
                                     82 	.globl _P2_1
                                     83 	.globl _P2_0
                                     84 	.globl _SM0
                                     85 	.globl _SM1
                                     86 	.globl _SM2
                                     87 	.globl _REN
                                     88 	.globl _TB8
                                     89 	.globl _RB8
                                     90 	.globl _TI
                                     91 	.globl _RI
                                     92 	.globl _P1_7
                                     93 	.globl _P1_6
                                     94 	.globl _P1_5
                                     95 	.globl _P1_4
                                     96 	.globl _P1_3
                                     97 	.globl _P1_2
                                     98 	.globl _P1_1
                                     99 	.globl _P1_0
                                    100 	.globl _TF1
                                    101 	.globl _TR1
                                    102 	.globl _TF0
                                    103 	.globl _TR0
                                    104 	.globl _IE1
                                    105 	.globl _IT1
                                    106 	.globl _IE0
                                    107 	.globl _IT0
                                    108 	.globl _P0_7
                                    109 	.globl _P0_6
                                    110 	.globl _P0_5
                                    111 	.globl _P0_4
                                    112 	.globl _P0_3
                                    113 	.globl _P0_2
                                    114 	.globl _P0_1
                                    115 	.globl _P0_0
                                    116 	.globl _IAP_CONTR
                                    117 	.globl _IAP_TRIG
                                    118 	.globl _IAP_CMD
                                    119 	.globl _IAP_ADDRL
                                    120 	.globl _IAP_ADDRH
                                    121 	.globl _IAP_DATA
                                    122 	.globl _SPDAT
                                    123 	.globl _SPSTAT
                                    124 	.globl _SPCTL
                                    125 	.globl _ADC_RESL
                                    126 	.globl _ADC_RES
                                    127 	.globl _ADC_CONTR
                                    128 	.globl _P1ASF
                                    129 	.globl _PCA_PWM1
                                    130 	.globl _PCA_PWM0
                                    131 	.globl _CCAP1H
                                    132 	.globl _CCAP1L
                                    133 	.globl _CCAP0H
                                    134 	.globl _CCAP0L
                                    135 	.globl _CCAPM1
                                    136 	.globl _CCAPM0
                                    137 	.globl _CH
                                    138 	.globl _CL
                                    139 	.globl _CMOD
                                    140 	.globl _CCON
                                    141 	.globl _WDT_CONTR
                                    142 	.globl _BRT
                                    143 	.globl _S2BUF
                                    144 	.globl _S2CON
                                    145 	.globl _SADDR
                                    146 	.globl _SADEN
                                    147 	.globl _P5M1
                                    148 	.globl _P5M0
                                    149 	.globl _P4SW
                                    150 	.globl _P4M1
                                    151 	.globl _P4M0
                                    152 	.globl _P3M1
                                    153 	.globl _P3M0
                                    154 	.globl _P2M1
                                    155 	.globl _P2M0
                                    156 	.globl _P1M1
                                    157 	.globl _P1M0
                                    158 	.globl _P0M1
                                    159 	.globl _P0M0
                                    160 	.globl _P5
                                    161 	.globl _P4
                                    162 	.globl _IP2H
                                    163 	.globl _IP2
                                    164 	.globl _IPH
                                    165 	.globl _IE2
                                    166 	.globl _BUS_SPEED
                                    167 	.globl _CLK_DIV
                                    168 	.globl _WAKE_CLKO
                                    169 	.globl _AUXR1
                                    170 	.globl _AUXR
                                    171 	.globl _B
                                    172 	.globl _ACC
                                    173 	.globl _PSW
                                    174 	.globl _IP
                                    175 	.globl _P3
                                    176 	.globl _IE
                                    177 	.globl _P2
                                    178 	.globl _SBUF
                                    179 	.globl _SCON
                                    180 	.globl _P1
                                    181 	.globl _TH1
                                    182 	.globl _TH0
                                    183 	.globl _TL1
                                    184 	.globl _TL0
                                    185 	.globl _TMOD
                                    186 	.globl _TCON
                                    187 	.globl _PCON
                                    188 	.globl _DPH
                                    189 	.globl _DPL
                                    190 	.globl _SP
                                    191 	.globl _P0
                                    192 	.globl _FLAG_E
                                    193 	.globl _FLAG_M
                                    194 	.globl _FLAG_D
                                    195 	.globl _FLAG_F
                                    196 	.globl _PassWord_Ent2
                                    197 	.globl _PassWord_Ent1_1
                                    198 	.globl _PassWord_Ent1
                                    199 	.globl _PassWord_Ent
                                    200 	.globl _PassWord2
                                    201 	.globl _PassWord1
                                    202 	.globl _PassWord_Set2
                                    203 	.globl _PassWord_Set1_1
                                    204 	.globl _PassWord_Set1
                                    205 	.globl _PassWord_Set
                                    206 	.globl _Num_Mat
                                    207 	.globl _cont
                                    208 	.globl _FLAG
                                    209 	.globl _K1
                                    210 	.globl _AT24C02_WriteByte_PARM_2
                                    211 	.globl _LCD_ShowBinNum_PARM_4
                                    212 	.globl _LCD_ShowBinNum_PARM_3
                                    213 	.globl _LCD_ShowBinNum_PARM_2
                                    214 	.globl _LCD_ShowHexNum_PARM_4
                                    215 	.globl _LCD_ShowHexNum_PARM_3
                                    216 	.globl _LCD_ShowHexNum_PARM_2
                                    217 	.globl _LCD_ShowSignedNum_PARM_4
                                    218 	.globl _LCD_ShowSignedNum_PARM_3
                                    219 	.globl _LCD_ShowSignedNum_PARM_2
                                    220 	.globl _LCD_ShowNum_PARM_4
                                    221 	.globl _LCD_ShowNum_PARM_3
                                    222 	.globl _LCD_ShowNum_PARM_2
                                    223 	.globl _LCD_Pow_PARM_2
                                    224 	.globl _LCD_ShowString_PARM_3
                                    225 	.globl _LCD_ShowString_PARM_2
                                    226 	.globl _LCD_ShowChar_PARM_3
                                    227 	.globl _LCD_ShowChar_PARM_2
                                    228 	.globl _LCD_SetCursor_PARM_2
                                    229 	.globl _MatrKey
                                    230 	.globl _Delay
                                    231 	.globl _DelayS
                                    232 	.globl _DelayMs
                                    233 	.globl _LCD_Init
                                    234 	.globl _LCD_ShowChar
                                    235 	.globl _LCD_ShowString
                                    236 	.globl _LCD_ShowNum
                                    237 	.globl _LCD_ShowSignedNum
                                    238 	.globl _LCD_ShowHexNum
                                    239 	.globl _LCD_ShowBinNum
                                    240 	.globl _I2C_Start
                                    241 	.globl _I2C_Stop
                                    242 	.globl _I2C_SendByte
                                    243 	.globl _I2C_ReciveByte
                                    244 	.globl _I2C_SendAck
                                    245 	.globl _I2C_ReciveAck
                                    246 	.globl _delay_ATC
                                    247 	.globl _AT24C02_WriteByte
                                    248 	.globl _AT24C02_ReadByte
                                    249 	.globl _Key
                                    250 	.globl _Time_Init
                                    251 ;--------------------------------------------------------
                                    252 ; special function registers
                                    253 ;--------------------------------------------------------
                                    254 	.area RSEG    (ABS,DATA)
      000000                        255 	.org 0x0000
                           000080   256 _P0	=	0x0080
                           000081   257 _SP	=	0x0081
                           000082   258 _DPL	=	0x0082
                           000083   259 _DPH	=	0x0083
                           000087   260 _PCON	=	0x0087
                           000088   261 _TCON	=	0x0088
                           000089   262 _TMOD	=	0x0089
                           00008A   263 _TL0	=	0x008a
                           00008B   264 _TL1	=	0x008b
                           00008C   265 _TH0	=	0x008c
                           00008D   266 _TH1	=	0x008d
                           000090   267 _P1	=	0x0090
                           000098   268 _SCON	=	0x0098
                           000099   269 _SBUF	=	0x0099
                           0000A0   270 _P2	=	0x00a0
                           0000A8   271 _IE	=	0x00a8
                           0000B0   272 _P3	=	0x00b0
                           0000B8   273 _IP	=	0x00b8
                           0000D0   274 _PSW	=	0x00d0
                           0000E0   275 _ACC	=	0x00e0
                           0000F0   276 _B	=	0x00f0
                           00008E   277 _AUXR	=	0x008e
                           0000A2   278 _AUXR1	=	0x00a2
                           00008F   279 _WAKE_CLKO	=	0x008f
                           000097   280 _CLK_DIV	=	0x0097
                           0000A1   281 _BUS_SPEED	=	0x00a1
                           0000AF   282 _IE2	=	0x00af
                           0000B7   283 _IPH	=	0x00b7
                           0000B5   284 _IP2	=	0x00b5
                           0000B6   285 _IP2H	=	0x00b6
                           0000C0   286 _P4	=	0x00c0
                           0000C8   287 _P5	=	0x00c8
                           000094   288 _P0M0	=	0x0094
                           000093   289 _P0M1	=	0x0093
                           000092   290 _P1M0	=	0x0092
                           000091   291 _P1M1	=	0x0091
                           000096   292 _P2M0	=	0x0096
                           000095   293 _P2M1	=	0x0095
                           0000B2   294 _P3M0	=	0x00b2
                           0000B1   295 _P3M1	=	0x00b1
                           0000B4   296 _P4M0	=	0x00b4
                           0000B3   297 _P4M1	=	0x00b3
                           0000BB   298 _P4SW	=	0x00bb
                           0000CA   299 _P5M0	=	0x00ca
                           0000C9   300 _P5M1	=	0x00c9
                           0000B9   301 _SADEN	=	0x00b9
                           0000A9   302 _SADDR	=	0x00a9
                           00009A   303 _S2CON	=	0x009a
                           00009B   304 _S2BUF	=	0x009b
                           00009C   305 _BRT	=	0x009c
                           0000C1   306 _WDT_CONTR	=	0x00c1
                           0000D8   307 _CCON	=	0x00d8
                           0000D9   308 _CMOD	=	0x00d9
                           0000E9   309 _CL	=	0x00e9
                           0000F9   310 _CH	=	0x00f9
                           0000DA   311 _CCAPM0	=	0x00da
                           0000DB   312 _CCAPM1	=	0x00db
                           0000EA   313 _CCAP0L	=	0x00ea
                           0000FA   314 _CCAP0H	=	0x00fa
                           0000EB   315 _CCAP1L	=	0x00eb
                           0000FB   316 _CCAP1H	=	0x00fb
                           0000F2   317 _PCA_PWM0	=	0x00f2
                           0000F3   318 _PCA_PWM1	=	0x00f3
                           00009D   319 _P1ASF	=	0x009d
                           0000BC   320 _ADC_CONTR	=	0x00bc
                           0000BD   321 _ADC_RES	=	0x00bd
                           0000BE   322 _ADC_RESL	=	0x00be
                           0000CE   323 _SPCTL	=	0x00ce
                           0000CD   324 _SPSTAT	=	0x00cd
                           0000CF   325 _SPDAT	=	0x00cf
                           0000C2   326 _IAP_DATA	=	0x00c2
                           0000C3   327 _IAP_ADDRH	=	0x00c3
                           0000C4   328 _IAP_ADDRL	=	0x00c4
                           0000C5   329 _IAP_CMD	=	0x00c5
                           0000C6   330 _IAP_TRIG	=	0x00c6
                           0000C7   331 _IAP_CONTR	=	0x00c7
                                    332 ;--------------------------------------------------------
                                    333 ; special function bits
                                    334 ;--------------------------------------------------------
                                    335 	.area RSEG    (ABS,DATA)
      000000                        336 	.org 0x0000
                           000080   337 _P0_0	=	0x0080
                           000081   338 _P0_1	=	0x0081
                           000082   339 _P0_2	=	0x0082
                           000083   340 _P0_3	=	0x0083
                           000084   341 _P0_4	=	0x0084
                           000085   342 _P0_5	=	0x0085
                           000086   343 _P0_6	=	0x0086
                           000087   344 _P0_7	=	0x0087
                           000088   345 _IT0	=	0x0088
                           000089   346 _IE0	=	0x0089
                           00008A   347 _IT1	=	0x008a
                           00008B   348 _IE1	=	0x008b
                           00008C   349 _TR0	=	0x008c
                           00008D   350 _TF0	=	0x008d
                           00008E   351 _TR1	=	0x008e
                           00008F   352 _TF1	=	0x008f
                           000090   353 _P1_0	=	0x0090
                           000091   354 _P1_1	=	0x0091
                           000092   355 _P1_2	=	0x0092
                           000093   356 _P1_3	=	0x0093
                           000094   357 _P1_4	=	0x0094
                           000095   358 _P1_5	=	0x0095
                           000096   359 _P1_6	=	0x0096
                           000097   360 _P1_7	=	0x0097
                           000098   361 _RI	=	0x0098
                           000099   362 _TI	=	0x0099
                           00009A   363 _RB8	=	0x009a
                           00009B   364 _TB8	=	0x009b
                           00009C   365 _REN	=	0x009c
                           00009D   366 _SM2	=	0x009d
                           00009E   367 _SM1	=	0x009e
                           00009F   368 _SM0	=	0x009f
                           0000A0   369 _P2_0	=	0x00a0
                           0000A1   370 _P2_1	=	0x00a1
                           0000A2   371 _P2_2	=	0x00a2
                           0000A3   372 _P2_3	=	0x00a3
                           0000A4   373 _P2_4	=	0x00a4
                           0000A5   374 _P2_5	=	0x00a5
                           0000A6   375 _P2_6	=	0x00a6
                           0000A7   376 _P2_7	=	0x00a7
                           0000A8   377 _EX0	=	0x00a8
                           0000A9   378 _ET0	=	0x00a9
                           0000AA   379 _EX1	=	0x00aa
                           0000AB   380 _ET1	=	0x00ab
                           0000AC   381 _ES	=	0x00ac
                           0000AF   382 _EA	=	0x00af
                           0000B0   383 _P3_0	=	0x00b0
                           0000B1   384 _P3_1	=	0x00b1
                           0000B2   385 _P3_2	=	0x00b2
                           0000B3   386 _P3_3	=	0x00b3
                           0000B4   387 _P3_4	=	0x00b4
                           0000B5   388 _P3_5	=	0x00b5
                           0000B6   389 _P3_6	=	0x00b6
                           0000B7   390 _P3_7	=	0x00b7
                           0000B0   391 _RXD	=	0x00b0
                           0000B1   392 _TXD	=	0x00b1
                           0000B2   393 _INT0	=	0x00b2
                           0000B3   394 _INT1	=	0x00b3
                           0000B4   395 _T0	=	0x00b4
                           0000B5   396 _T1	=	0x00b5
                           0000B6   397 _WR	=	0x00b6
                           0000B7   398 _RD	=	0x00b7
                           0000B8   399 _PX0	=	0x00b8
                           0000B9   400 _PT0	=	0x00b9
                           0000BA   401 _PX1	=	0x00ba
                           0000BB   402 _PT1	=	0x00bb
                           0000BC   403 _PS	=	0x00bc
                           0000D0   404 _P	=	0x00d0
                           0000D1   405 _F1	=	0x00d1
                           0000D2   406 _OV	=	0x00d2
                           0000D3   407 _RS0	=	0x00d3
                           0000D4   408 _RS1	=	0x00d4
                           0000D5   409 _F0	=	0x00d5
                           0000D6   410 _AC	=	0x00d6
                           0000D7   411 _CY	=	0x00d7
                           0000AE   412 _ELVD	=	0x00ae
                           0000AD   413 _EADC	=	0x00ad
                           0000BF   414 _PPCA	=	0x00bf
                           0000BE   415 _PLVD	=	0x00be
                           0000BD   416 _PADC	=	0x00bd
                           0000C0   417 _P4_0	=	0x00c0
                           0000C1   418 _P4_1	=	0x00c1
                           0000C2   419 _P4_2	=	0x00c2
                           0000C3   420 _P4_3	=	0x00c3
                           0000C4   421 _P4_4	=	0x00c4
                           0000C5   422 _P4_5	=	0x00c5
                           0000C6   423 _P4_6	=	0x00c6
                           0000C7   424 _P4_7	=	0x00c7
                           0000C8   425 _P5_0	=	0x00c8
                           0000C9   426 _P5_1	=	0x00c9
                           0000CA   427 _P5_2	=	0x00ca
                           0000CB   428 _P5_3	=	0x00cb
                           0000DF   429 _CF	=	0x00df
                           0000DE   430 _CR	=	0x00de
                           0000D9   431 _CCF1	=	0x00d9
                           0000D8   432 _CCF0	=	0x00d8
                                    433 ;--------------------------------------------------------
                                    434 ; overlayable register banks
                                    435 ;--------------------------------------------------------
                                    436 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        437 	.ds 8
                                    438 ;--------------------------------------------------------
                                    439 ; overlayable bit register bank
                                    440 ;--------------------------------------------------------
                                    441 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        442 bits:
      000000                        443 	.ds 1
                           008000   444 	b0 = bits[0]
                           008100   445 	b1 = bits[1]
                           008200   446 	b2 = bits[2]
                           008300   447 	b3 = bits[3]
                           008400   448 	b4 = bits[4]
                           008500   449 	b5 = bits[5]
                           008600   450 	b6 = bits[6]
                           008700   451 	b7 = bits[7]
                                    452 ;--------------------------------------------------------
                                    453 ; internal ram data
                                    454 ;--------------------------------------------------------
                                    455 	.area DSEG    (DATA)
      000000                        456 _LCD_SetCursor_PARM_2:
      000000                        457 	.ds 1
      000001                        458 _LCD_ShowChar_PARM_2:
      000001                        459 	.ds 1
      000002                        460 _LCD_ShowChar_PARM_3:
      000002                        461 	.ds 1
      000003                        462 _LCD_ShowString_PARM_2:
      000003                        463 	.ds 1
      000004                        464 _LCD_ShowString_PARM_3:
      000004                        465 	.ds 3
      000007                        466 _LCD_Pow_PARM_2:
      000007                        467 	.ds 2
      000009                        468 _LCD_ShowNum_PARM_2:
      000009                        469 	.ds 1
      00000A                        470 _LCD_ShowNum_PARM_3:
      00000A                        471 	.ds 2
      00000C                        472 _LCD_ShowNum_PARM_4:
      00000C                        473 	.ds 1
      00000D                        474 _LCD_ShowSignedNum_PARM_2:
      00000D                        475 	.ds 1
      00000E                        476 _LCD_ShowSignedNum_PARM_3:
      00000E                        477 	.ds 2
      000010                        478 _LCD_ShowSignedNum_PARM_4:
      000010                        479 	.ds 1
      000011                        480 _LCD_ShowHexNum_PARM_2:
      000011                        481 	.ds 1
      000012                        482 _LCD_ShowHexNum_PARM_3:
      000012                        483 	.ds 2
      000014                        484 _LCD_ShowHexNum_PARM_4:
      000014                        485 	.ds 1
      000015                        486 _LCD_ShowBinNum_PARM_2:
      000015                        487 	.ds 1
      000016                        488 _LCD_ShowBinNum_PARM_3:
      000016                        489 	.ds 2
      000018                        490 _LCD_ShowBinNum_PARM_4:
      000018                        491 	.ds 1
      000019                        492 _AT24C02_WriteByte_PARM_2:
      000019                        493 	.ds 1
      00001A                        494 _K1::
      00001A                        495 	.ds 2
      00001C                        496 _FLAG::
      00001C                        497 	.ds 2
      00001E                        498 _cont::
      00001E                        499 	.ds 2
      000020                        500 _Num_Mat::
      000020                        501 	.ds 1
      000021                        502 _PassWord_Set::
      000021                        503 	.ds 2
      000023                        504 _PassWord_Set1::
      000023                        505 	.ds 2
      000025                        506 _PassWord_Set1_1::
      000025                        507 	.ds 2
      000027                        508 _PassWord_Set2::
      000027                        509 	.ds 2
      000029                        510 _PassWord1::
      000029                        511 	.ds 2
      00002B                        512 _PassWord2::
      00002B                        513 	.ds 2
      00002D                        514 _PassWord_Ent::
      00002D                        515 	.ds 2
      00002F                        516 _PassWord_Ent1::
      00002F                        517 	.ds 2
      000031                        518 _PassWord_Ent1_1::
      000031                        519 	.ds 2
      000033                        520 _PassWord_Ent2::
      000033                        521 	.ds 2
      000035                        522 _FLAG_F::
      000035                        523 	.ds 2
      000037                        524 _FLAG_D::
      000037                        525 	.ds 2
      000039                        526 _FLAG_M::
      000039                        527 	.ds 2
      00003B                        528 _FLAG_E::
      00003B                        529 	.ds 2
      00003D                        530 _main_i_458752_151:
      00003D                        531 	.ds 2
      00003F                        532 _T0_Routine_count_65536_170:
      00003F                        533 	.ds 2
      000041                        534 _T0_Routine_i_65536_170:
      000041                        535 	.ds 1
                                    536 ;--------------------------------------------------------
                                    537 ; overlayable items in internal ram 
                                    538 ;--------------------------------------------------------
                                    539 	.area	OSEG    (OVR,DATA)
                                    540 	.area	OSEG    (OVR,DATA)
                                    541 	.area	OSEG    (OVR,DATA)
                                    542 	.area	OSEG    (OVR,DATA)
                                    543 	.area	OSEG    (OVR,DATA)
                                    544 	.area	OSEG    (OVR,DATA)
                                    545 	.area	OSEG    (OVR,DATA)
                                    546 	.area	OSEG    (OVR,DATA)
                                    547 	.area	OSEG    (OVR,DATA)
                                    548 	.area	OSEG    (OVR,DATA)
                                    549 ;--------------------------------------------------------
                                    550 ; Stack segment in internal ram 
                                    551 ;--------------------------------------------------------
                                    552 	.area	SSEG
      000000                        553 __start__stack:
      000000                        554 	.ds	1
                                    555 
                                    556 ;--------------------------------------------------------
                                    557 ; indirectly addressable internal ram data
                                    558 ;--------------------------------------------------------
                                    559 	.area ISEG    (DATA)
                                    560 ;--------------------------------------------------------
                                    561 ; absolute internal ram data
                                    562 ;--------------------------------------------------------
                                    563 	.area IABS    (ABS,DATA)
                                    564 	.area IABS    (ABS,DATA)
                                    565 ;--------------------------------------------------------
                                    566 ; bit data
                                    567 ;--------------------------------------------------------
                                    568 	.area BSEG    (BIT)
                                    569 ;--------------------------------------------------------
                                    570 ; paged external ram data
                                    571 ;--------------------------------------------------------
                                    572 	.area PSEG    (PAG,XDATA)
                                    573 ;--------------------------------------------------------
                                    574 ; external ram data
                                    575 ;--------------------------------------------------------
                                    576 	.area XSEG    (XDATA)
                                    577 ;--------------------------------------------------------
                                    578 ; absolute external ram data
                                    579 ;--------------------------------------------------------
                                    580 	.area XABS    (ABS,XDATA)
                                    581 ;--------------------------------------------------------
                                    582 ; external initialized ram data
                                    583 ;--------------------------------------------------------
                                    584 	.area XISEG   (XDATA)
                                    585 	.area HOME    (CODE)
                                    586 	.area GSINIT0 (CODE)
                                    587 	.area GSINIT1 (CODE)
                                    588 	.area GSINIT2 (CODE)
                                    589 	.area GSINIT3 (CODE)
                                    590 	.area GSINIT4 (CODE)
                                    591 	.area GSINIT5 (CODE)
                                    592 	.area GSINIT  (CODE)
                                    593 	.area GSFINAL (CODE)
                                    594 	.area CSEG    (CODE)
                                    595 ;--------------------------------------------------------
                                    596 ; interrupt vector 
                                    597 ;--------------------------------------------------------
                                    598 	.area HOME    (CODE)
      000000                        599 __interrupt_vect:
      000000 02r00r00         [24]  600 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  601 	reti
      000004                        602 	.ds	7
      00000B 02r0ErDD         [24]  603 	ljmp	_T0_Routine
                                    604 ;--------------------------------------------------------
                                    605 ; global & static initialisations
                                    606 ;--------------------------------------------------------
                                    607 	.area HOME    (CODE)
                                    608 	.area GSINIT  (CODE)
                                    609 	.area GSFINAL (CODE)
                                    610 	.area GSINIT  (CODE)
                                    611 	.globl __sdcc_gsinit_startup
                                    612 	.globl __sdcc_program_startup
                                    613 	.globl __start__stack
                                    614 	.globl __mcs51_genXINIT
                                    615 	.globl __mcs51_genXRAMCLEAR
                                    616 	.globl __mcs51_genRAMCLEAR
                                    617 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  618 	ljmp	__sdcc_program_startup
                                    619 ;--------------------------------------------------------
                                    620 ; Home
                                    621 ;--------------------------------------------------------
                                    622 	.area HOME    (CODE)
                                    623 	.area HOME    (CODE)
      00000E                        624 __sdcc_program_startup:
      00000E 02r05rD5         [24]  625 	ljmp	_main
                                    626 ;	return from main will return to caller
                                    627 ;--------------------------------------------------------
                                    628 ; code
                                    629 ;--------------------------------------------------------
                                    630 	.area CSEG    (CODE)
                                    631 ;------------------------------------------------------------
                                    632 ;Allocation info for local variables in function 'delay_mat'
                                    633 ;------------------------------------------------------------
                                    634 ;a                         Allocated to registers r6 r7 
                                    635 ;b                         Allocated to registers r4 r5 
                                    636 ;------------------------------------------------------------
                                    637 ;	MatKey.h:45: void delay_mat()
                                    638 ;	-----------------------------------------
                                    639 ;	 function delay_mat
                                    640 ;	-----------------------------------------
      000000                        641 _delay_mat:
                           000007   642 	ar7 = 0x07
                           000006   643 	ar6 = 0x06
                           000005   644 	ar5 = 0x05
                           000004   645 	ar4 = 0x04
                           000003   646 	ar3 = 0x03
                           000002   647 	ar2 = 0x02
                           000001   648 	ar1 = 0x01
                           000000   649 	ar0 = 0x00
                                    650 ;	MatKey.h:48: for(a = 50; a > 0; a--)
      000000 7E 32            [12]  651 	mov	r6,#0x32
      000002 7F 00            [12]  652 	mov	r7,#0x00
      000004                        653 00105$:
                                    654 ;	MatKey.h:50: for(b = 400; b > 0; b--);
      000004 7C 90            [12]  655 	mov	r4,#0x90
      000006 7D 01            [12]  656 	mov	r5,#0x01
      000008                        657 00104$:
      000008 EC               [12]  658 	mov	a,r4
      000009 24 FF            [12]  659 	add	a,#0xff
      00000B FA               [12]  660 	mov	r2,a
      00000C ED               [12]  661 	mov	a,r5
      00000D 34 FF            [12]  662 	addc	a,#0xff
      00000F FB               [12]  663 	mov	r3,a
      000010 8A 04            [24]  664 	mov	ar4,r2
      000012 8B 05            [24]  665 	mov	ar5,r3
      000014 EA               [12]  666 	mov	a,r2
      000015 4B               [12]  667 	orl	a,r3
      000016 70 F0            [24]  668 	jnz	00104$
                                    669 ;	MatKey.h:48: for(a = 50; a > 0; a--)
      000018 EE               [12]  670 	mov	a,r6
      000019 24 FF            [12]  671 	add	a,#0xff
      00001B FC               [12]  672 	mov	r4,a
      00001C EF               [12]  673 	mov	a,r7
      00001D 34 FF            [12]  674 	addc	a,#0xff
      00001F FD               [12]  675 	mov	r5,a
      000020 8C 06            [24]  676 	mov	ar6,r4
      000022 8D 07            [24]  677 	mov	ar7,r5
      000024 EC               [12]  678 	mov	a,r4
      000025 4D               [12]  679 	orl	a,r5
      000026 70 DC            [24]  680 	jnz	00105$
                                    681 ;	MatKey.h:52: }
      000028 22               [24]  682 	ret
                                    683 ;------------------------------------------------------------
                                    684 ;Allocation info for local variables in function 'MatrKey'
                                    685 ;------------------------------------------------------------
                                    686 ;KeyNumber                 Allocated to registers r7 
                                    687 ;------------------------------------------------------------
                                    688 ;	MatKey.h:59: unsigned char MatrKey()//列扫描
                                    689 ;	-----------------------------------------
                                    690 ;	 function MatrKey
                                    691 ;	-----------------------------------------
      000029                        692 _MatrKey:
                                    693 ;	MatKey.h:99: unsigned char KeyNumber = 0;
      000029 7F 00            [12]  694 	mov	r7,#0x00
                                    695 ;	MatKey.h:101: P3 = 0xff;
      00002B 75 B0 FF         [24]  696 	mov	_P3,#0xff
                                    697 ;	MatKey.h:102: P3_4 = 0;
                                    698 ;	assignBit
      00002E C2 B4            [12]  699 	clr	_P3_4
                                    700 ;	MatKey.h:103: if(P3_0 == 0){delay_mat();while(P3_0 == 0);delay_mat();KeyNumber = 1;}//第一行
      000030 20 B0 0B         [24]  701 	jb	_P3_0,00105$
      000033 12r00r00         [24]  702 	lcall	_delay_mat
      000036                        703 00101$:
      000036 30 B0 FD         [24]  704 	jnb	_P3_0,00101$
      000039 12r00r00         [24]  705 	lcall	_delay_mat
      00003C 7F 01            [12]  706 	mov	r7,#0x01
      00003E                        707 00105$:
                                    708 ;	MatKey.h:104: if(P3_1 == 0){delay_mat();while(P3_1 == 0);delay_mat();KeyNumber = 4;}//第二行
      00003E 20 B1 0B         [24]  709 	jb	_P3_1,00110$
      000041 12r00r00         [24]  710 	lcall	_delay_mat
      000044                        711 00106$:
      000044 30 B1 FD         [24]  712 	jnb	_P3_1,00106$
      000047 12r00r00         [24]  713 	lcall	_delay_mat
      00004A 7F 04            [12]  714 	mov	r7,#0x04
      00004C                        715 00110$:
                                    716 ;	MatKey.h:105: if(P3_2 == 0){delay_mat();while(P3_2 == 0);delay_mat();KeyNumber = 7;}//第三行
      00004C 20 B2 0B         [24]  717 	jb	_P3_2,00115$
      00004F 12r00r00         [24]  718 	lcall	_delay_mat
      000052                        719 00111$:
      000052 30 B2 FD         [24]  720 	jnb	_P3_2,00111$
      000055 12r00r00         [24]  721 	lcall	_delay_mat
      000058 7F 07            [12]  722 	mov	r7,#0x07
      00005A                        723 00115$:
                                    724 ;	MatKey.h:106: if(P3_3 == 0){delay_mat();while(P3_3 == 0);delay_mat();KeyNumber = 10;}//第四行
      00005A 20 B3 0B         [24]  725 	jb	_P3_3,00120$
      00005D 12r00r00         [24]  726 	lcall	_delay_mat
      000060                        727 00116$:
      000060 30 B3 FD         [24]  728 	jnb	_P3_3,00116$
      000063 12r00r00         [24]  729 	lcall	_delay_mat
      000066 7F 0A            [12]  730 	mov	r7,#0x0a
      000068                        731 00120$:
                                    732 ;	MatKey.h:108: P3 = 0xff;
      000068 75 B0 FF         [24]  733 	mov	_P3,#0xff
                                    734 ;	MatKey.h:109: P3_5 = 0;
                                    735 ;	assignBit
      00006B C2 B5            [12]  736 	clr	_P3_5
                                    737 ;	MatKey.h:110: if(P3_0 == 0){delay_mat();while(P3_0 == 0);delay_mat();KeyNumber = 2;}
      00006D 20 B0 0B         [24]  738 	jb	_P3_0,00125$
      000070 12r00r00         [24]  739 	lcall	_delay_mat
      000073                        740 00121$:
      000073 30 B0 FD         [24]  741 	jnb	_P3_0,00121$
      000076 12r00r00         [24]  742 	lcall	_delay_mat
      000079 7F 02            [12]  743 	mov	r7,#0x02
      00007B                        744 00125$:
                                    745 ;	MatKey.h:111: if(P3_1 == 0){delay_mat();while(P3_1 == 0);delay_mat();KeyNumber = 5;}
      00007B 20 B1 0B         [24]  746 	jb	_P3_1,00130$
      00007E 12r00r00         [24]  747 	lcall	_delay_mat
      000081                        748 00126$:
      000081 30 B1 FD         [24]  749 	jnb	_P3_1,00126$
      000084 12r00r00         [24]  750 	lcall	_delay_mat
      000087 7F 05            [12]  751 	mov	r7,#0x05
      000089                        752 00130$:
                                    753 ;	MatKey.h:112: if(P3_2 == 0){delay_mat();while(P3_2 == 0);delay_mat();KeyNumber = 8;}
      000089 20 B2 0B         [24]  754 	jb	_P3_2,00135$
      00008C 12r00r00         [24]  755 	lcall	_delay_mat
      00008F                        756 00131$:
      00008F 30 B2 FD         [24]  757 	jnb	_P3_2,00131$
      000092 12r00r00         [24]  758 	lcall	_delay_mat
      000095 7F 08            [12]  759 	mov	r7,#0x08
      000097                        760 00135$:
                                    761 ;	MatKey.h:113: if(P3_3 == 0){delay_mat();while(P3_3 == 0);delay_mat();KeyNumber = 11;}
      000097 20 B3 0B         [24]  762 	jb	_P3_3,00140$
      00009A 12r00r00         [24]  763 	lcall	_delay_mat
      00009D                        764 00136$:
      00009D 30 B3 FD         [24]  765 	jnb	_P3_3,00136$
      0000A0 12r00r00         [24]  766 	lcall	_delay_mat
      0000A3 7F 0B            [12]  767 	mov	r7,#0x0b
      0000A5                        768 00140$:
                                    769 ;	MatKey.h:115: P3 = 0xff;
      0000A5 75 B0 FF         [24]  770 	mov	_P3,#0xff
                                    771 ;	MatKey.h:116: P3_6 = 0;
                                    772 ;	assignBit
      0000A8 C2 B6            [12]  773 	clr	_P3_6
                                    774 ;	MatKey.h:117: if(P3_0 == 0){delay_mat();while(P3_0 == 0);delay_mat();KeyNumber = 3;}
      0000AA 20 B0 0B         [24]  775 	jb	_P3_0,00145$
      0000AD 12r00r00         [24]  776 	lcall	_delay_mat
      0000B0                        777 00141$:
      0000B0 30 B0 FD         [24]  778 	jnb	_P3_0,00141$
      0000B3 12r00r00         [24]  779 	lcall	_delay_mat
      0000B6 7F 03            [12]  780 	mov	r7,#0x03
      0000B8                        781 00145$:
                                    782 ;	MatKey.h:118: if(P3_1 == 0){delay_mat();while(P3_1 == 0);delay_mat();KeyNumber = 6;}
      0000B8 20 B1 0B         [24]  783 	jb	_P3_1,00150$
      0000BB 12r00r00         [24]  784 	lcall	_delay_mat
      0000BE                        785 00146$:
      0000BE 30 B1 FD         [24]  786 	jnb	_P3_1,00146$
      0000C1 12r00r00         [24]  787 	lcall	_delay_mat
      0000C4 7F 06            [12]  788 	mov	r7,#0x06
      0000C6                        789 00150$:
                                    790 ;	MatKey.h:119: if(P3_2 == 0){delay_mat();while(P3_2 == 0);delay_mat();KeyNumber = 9;}
      0000C6 20 B2 0B         [24]  791 	jb	_P3_2,00155$
      0000C9 12r00r00         [24]  792 	lcall	_delay_mat
      0000CC                        793 00151$:
      0000CC 30 B2 FD         [24]  794 	jnb	_P3_2,00151$
      0000CF 12r00r00         [24]  795 	lcall	_delay_mat
      0000D2 7F 09            [12]  796 	mov	r7,#0x09
      0000D4                        797 00155$:
                                    798 ;	MatKey.h:120: if(P3_3 == 0){delay_mat();while(P3_3 == 0);delay_mat();KeyNumber = 12;}
      0000D4 20 B3 0B         [24]  799 	jb	_P3_3,00160$
      0000D7 12r00r00         [24]  800 	lcall	_delay_mat
      0000DA                        801 00156$:
      0000DA 30 B3 FD         [24]  802 	jnb	_P3_3,00156$
      0000DD 12r00r00         [24]  803 	lcall	_delay_mat
      0000E0 7F 0C            [12]  804 	mov	r7,#0x0c
      0000E2                        805 00160$:
                                    806 ;	MatKey.h:122: P3 = 0xff;
      0000E2 75 B0 FF         [24]  807 	mov	_P3,#0xff
                                    808 ;	MatKey.h:123: P3_7 = 0;
                                    809 ;	assignBit
      0000E5 C2 B7            [12]  810 	clr	_P3_7
                                    811 ;	MatKey.h:124: if(P3_0 == 0){delay_mat();while(P3_0 == 0);delay_mat();KeyNumber = 13;}
      0000E7 20 B0 0B         [24]  812 	jb	_P3_0,00165$
      0000EA 12r00r00         [24]  813 	lcall	_delay_mat
      0000ED                        814 00161$:
      0000ED 30 B0 FD         [24]  815 	jnb	_P3_0,00161$
      0000F0 12r00r00         [24]  816 	lcall	_delay_mat
      0000F3 7F 0D            [12]  817 	mov	r7,#0x0d
      0000F5                        818 00165$:
                                    819 ;	MatKey.h:125: if(P3_1 == 0){delay_mat();while(P3_1 == 0);delay_mat();KeyNumber = 14;}
      0000F5 20 B1 0B         [24]  820 	jb	_P3_1,00170$
      0000F8 12r00r00         [24]  821 	lcall	_delay_mat
      0000FB                        822 00166$:
      0000FB 30 B1 FD         [24]  823 	jnb	_P3_1,00166$
      0000FE 12r00r00         [24]  824 	lcall	_delay_mat
      000101 7F 0E            [12]  825 	mov	r7,#0x0e
      000103                        826 00170$:
                                    827 ;	MatKey.h:126: if(P3_2 == 0){delay_mat();while(P3_2 == 0);delay_mat();KeyNumber = 15;}
      000103 20 B2 0B         [24]  828 	jb	_P3_2,00175$
      000106 12r00r00         [24]  829 	lcall	_delay_mat
      000109                        830 00171$:
      000109 30 B2 FD         [24]  831 	jnb	_P3_2,00171$
      00010C 12r00r00         [24]  832 	lcall	_delay_mat
      00010F 7F 0F            [12]  833 	mov	r7,#0x0f
      000111                        834 00175$:
                                    835 ;	MatKey.h:127: if(P3_3 == 0){delay_mat();while(P3_3 == 0);delay_mat();KeyNumber = 16;}
      000111 20 B3 0B         [24]  836 	jb	_P3_3,00180$
      000114 12r00r00         [24]  837 	lcall	_delay_mat
      000117                        838 00176$:
      000117 30 B3 FD         [24]  839 	jnb	_P3_3,00176$
      00011A 12r00r00         [24]  840 	lcall	_delay_mat
      00011D 7F 10            [12]  841 	mov	r7,#0x10
      00011F                        842 00180$:
                                    843 ;	MatKey.h:129: return KeyNumber;
      00011F 8F 82            [24]  844 	mov	dpl,r7
                                    845 ;	MatKey.h:130: }
      000121 22               [24]  846 	ret
                                    847 ;------------------------------------------------------------
                                    848 ;Allocation info for local variables in function 'Delay'
                                    849 ;------------------------------------------------------------
                                    850 ;a                         Allocated to registers r6 r7 
                                    851 ;b                         Allocated to registers r4 r5 
                                    852 ;------------------------------------------------------------
                                    853 ;	Delay.h:49: void Delay()
                                    854 ;	-----------------------------------------
                                    855 ;	 function Delay
                                    856 ;	-----------------------------------------
      000122                        857 _Delay:
                                    858 ;	Delay.h:52: for(a = 20; a > 0; a--)
      000122 7E 14            [12]  859 	mov	r6,#0x14
      000124 7F 00            [12]  860 	mov	r7,#0x00
      000126                        861 00105$:
                                    862 ;	Delay.h:54: for(b = 400; b > 0; b--);
      000126 7C 90            [12]  863 	mov	r4,#0x90
      000128 7D 01            [12]  864 	mov	r5,#0x01
      00012A                        865 00104$:
      00012A EC               [12]  866 	mov	a,r4
      00012B 24 FF            [12]  867 	add	a,#0xff
      00012D FA               [12]  868 	mov	r2,a
      00012E ED               [12]  869 	mov	a,r5
      00012F 34 FF            [12]  870 	addc	a,#0xff
      000131 FB               [12]  871 	mov	r3,a
      000132 8A 04            [24]  872 	mov	ar4,r2
      000134 8B 05            [24]  873 	mov	ar5,r3
      000136 EA               [12]  874 	mov	a,r2
      000137 4B               [12]  875 	orl	a,r3
      000138 70 F0            [24]  876 	jnz	00104$
                                    877 ;	Delay.h:52: for(a = 20; a > 0; a--)
      00013A EE               [12]  878 	mov	a,r6
      00013B 24 FF            [12]  879 	add	a,#0xff
      00013D FC               [12]  880 	mov	r4,a
      00013E EF               [12]  881 	mov	a,r7
      00013F 34 FF            [12]  882 	addc	a,#0xff
      000141 FD               [12]  883 	mov	r5,a
      000142 8C 06            [24]  884 	mov	ar6,r4
      000144 8D 07            [24]  885 	mov	ar7,r5
      000146 EC               [12]  886 	mov	a,r4
      000147 4D               [12]  887 	orl	a,r5
      000148 70 DC            [24]  888 	jnz	00105$
                                    889 ;	Delay.h:56: }
      00014A 22               [24]  890 	ret
                                    891 ;------------------------------------------------------------
                                    892 ;Allocation info for local variables in function 'DelayS'
                                    893 ;------------------------------------------------------------
                                    894 ;s                         Allocated to registers 
                                    895 ;a                         Allocated to registers 
                                    896 ;b                         Allocated to registers r4 r5 
                                    897 ;------------------------------------------------------------
                                    898 ;	Delay.h:63: void DelayS(unsigned int s)
                                    899 ;	-----------------------------------------
                                    900 ;	 function DelayS
                                    901 ;	-----------------------------------------
      00014B                        902 _DelayS:
      00014B 85 82*00         [24]  903 	mov	__mulint_PARM_2,dpl
      00014E 85 83*01         [24]  904 	mov	(__mulint_PARM_2 + 1),dph
                                    905 ;	Delay.h:66: for(a = 1000*s; a > 0; a--)
      000151 90 03 E8         [24]  906 	mov	dptr,#0x03e8
      000154 12r00r00         [24]  907 	lcall	__mulint
      000157 AE 82            [24]  908 	mov	r6,dpl
      000159 AF 83            [24]  909 	mov	r7,dph
      00015B                        910 00106$:
      00015B EE               [12]  911 	mov	a,r6
      00015C 4F               [12]  912 	orl	a,r7
      00015D 60 1B            [24]  913 	jz	00108$
                                    914 ;	Delay.h:68: for(b = 400; b > 0; b--);
      00015F 7C 90            [12]  915 	mov	r4,#0x90
      000161 7D 01            [12]  916 	mov	r5,#0x01
      000163                        917 00104$:
      000163 EC               [12]  918 	mov	a,r4
      000164 24 FF            [12]  919 	add	a,#0xff
      000166 FA               [12]  920 	mov	r2,a
      000167 ED               [12]  921 	mov	a,r5
      000168 34 FF            [12]  922 	addc	a,#0xff
      00016A FB               [12]  923 	mov	r3,a
      00016B 8A 04            [24]  924 	mov	ar4,r2
      00016D 8B 05            [24]  925 	mov	ar5,r3
      00016F EA               [12]  926 	mov	a,r2
      000170 4B               [12]  927 	orl	a,r3
      000171 70 F0            [24]  928 	jnz	00104$
                                    929 ;	Delay.h:66: for(a = 1000*s; a > 0; a--)
      000173 1E               [12]  930 	dec	r6
      000174 BE FF 01         [24]  931 	cjne	r6,#0xff,00133$
      000177 1F               [12]  932 	dec	r7
      000178                        933 00133$:
      000178 80 E1            [24]  934 	sjmp	00106$
      00017A                        935 00108$:
                                    936 ;	Delay.h:70: }
      00017A 22               [24]  937 	ret
                                    938 ;------------------------------------------------------------
                                    939 ;Allocation info for local variables in function 'DelayMs'
                                    940 ;------------------------------------------------------------
                                    941 ;ms                        Allocated to registers 
                                    942 ;a                         Allocated to registers r6 r7 
                                    943 ;b                         Allocated to registers r4 r5 
                                    944 ;------------------------------------------------------------
                                    945 ;	Delay.h:77: void DelayMs(int ms)
                                    946 ;	-----------------------------------------
                                    947 ;	 function DelayMs
                                    948 ;	-----------------------------------------
      00017B                        949 _DelayMs:
      00017B AE 82            [24]  950 	mov	r6,dpl
      00017D AF 83            [24]  951 	mov	r7,dph
                                    952 ;	Delay.h:80: for(a = ms; a > 0; a--)
      00017F                        953 00106$:
      00017F EE               [12]  954 	mov	a,r6
      000180 4F               [12]  955 	orl	a,r7
      000181 60 1B            [24]  956 	jz	00108$
                                    957 ;	Delay.h:82: for(b = 400; b > 0; b--);
      000183 7C 90            [12]  958 	mov	r4,#0x90
      000185 7D 01            [12]  959 	mov	r5,#0x01
      000187                        960 00104$:
      000187 EC               [12]  961 	mov	a,r4
      000188 24 FF            [12]  962 	add	a,#0xff
      00018A FA               [12]  963 	mov	r2,a
      00018B ED               [12]  964 	mov	a,r5
      00018C 34 FF            [12]  965 	addc	a,#0xff
      00018E FB               [12]  966 	mov	r3,a
      00018F 8A 04            [24]  967 	mov	ar4,r2
      000191 8B 05            [24]  968 	mov	ar5,r3
      000193 EA               [12]  969 	mov	a,r2
      000194 4B               [12]  970 	orl	a,r3
      000195 70 F0            [24]  971 	jnz	00104$
                                    972 ;	Delay.h:80: for(a = ms; a > 0; a--)
      000197 1E               [12]  973 	dec	r6
      000198 BE FF 01         [24]  974 	cjne	r6,#0xff,00133$
      00019B 1F               [12]  975 	dec	r7
      00019C                        976 00133$:
      00019C 80 E1            [24]  977 	sjmp	00106$
      00019E                        978 00108$:
                                    979 ;	Delay.h:84: }
      00019E 22               [24]  980 	ret
                                    981 ;------------------------------------------------------------
                                    982 ;Allocation info for local variables in function 'LCD_Delay'
                                    983 ;------------------------------------------------------------
                                    984 ;i                         Allocated to registers r7 
                                    985 ;j                         Allocated to registers r6 
                                    986 ;------------------------------------------------------------
                                    987 ;	Lcd.h:61: void LCD_Delay()		//@11.0592MHz 1ms
                                    988 ;	-----------------------------------------
                                    989 ;	 function LCD_Delay
                                    990 ;	-----------------------------------------
      00019F                        991 _LCD_Delay:
                                    992 ;	Lcd.h:65: i = 2;
      00019F 7F 02            [12]  993 	mov	r7,#0x02
                                    994 ;	Lcd.h:66: j = 239;
      0001A1 7E EF            [12]  995 	mov	r6,#0xef
                                    996 ;	Lcd.h:69: while (--j);
      0001A3                        997 00101$:
      0001A3 EE               [12]  998 	mov	a,r6
      0001A4 14               [12]  999 	dec	a
      0001A5 FD               [12] 1000 	mov	r5,a
      0001A6 FE               [12] 1001 	mov	r6,a
      0001A7 70 FA            [24] 1002 	jnz	00101$
                                   1003 ;	Lcd.h:70: } while (--i);
      0001A9 EF               [12] 1004 	mov	a,r7
      0001AA 14               [12] 1005 	dec	a
      0001AB FD               [12] 1006 	mov	r5,a
      0001AC FF               [12] 1007 	mov	r7,a
      0001AD 70 F4            [24] 1008 	jnz	00101$
                                   1009 ;	Lcd.h:71: }
      0001AF 22               [24] 1010 	ret
                                   1011 ;------------------------------------------------------------
                                   1012 ;Allocation info for local variables in function 'LCD_WriteCommand'
                                   1013 ;------------------------------------------------------------
                                   1014 ;Command                   Allocated to registers r7 
                                   1015 ;------------------------------------------------------------
                                   1016 ;	Lcd.h:78: void LCD_WriteCommand(unsigned char Command)
                                   1017 ;	-----------------------------------------
                                   1018 ;	 function LCD_WriteCommand
                                   1019 ;	-----------------------------------------
      0001B0                       1020 _LCD_WriteCommand:
      0001B0 AF 82            [24] 1021 	mov	r7,dpl
                                   1022 ;	Lcd.h:80: RS=0;
                                   1023 ;	assignBit
      0001B2 C2 90            [12] 1024 	clr	_P1_0
                                   1025 ;	Lcd.h:81: RW=0;
                                   1026 ;	assignBit
      0001B4 C2 91            [12] 1027 	clr	_P1_1
                                   1028 ;	Lcd.h:82: P0=Command;
      0001B6 8F 80            [24] 1029 	mov	_P0,r7
                                   1030 ;	Lcd.h:83: EN=1;
                                   1031 ;	assignBit
      0001B8 D2 A5            [12] 1032 	setb	_P2_5
                                   1033 ;	Lcd.h:84: LCD_Delay();
      0001BA 12r01r9F         [24] 1034 	lcall	_LCD_Delay
                                   1035 ;	Lcd.h:85: EN=0;
                                   1036 ;	assignBit
      0001BD C2 A5            [12] 1037 	clr	_P2_5
                                   1038 ;	Lcd.h:86: LCD_Delay();
                                   1039 ;	Lcd.h:87: }
      0001BF 02r01r9F         [24] 1040 	ljmp	_LCD_Delay
                                   1041 ;------------------------------------------------------------
                                   1042 ;Allocation info for local variables in function 'LCD_WriteData'
                                   1043 ;------------------------------------------------------------
                                   1044 ;Data                      Allocated to registers r7 
                                   1045 ;------------------------------------------------------------
                                   1046 ;	Lcd.h:94: void LCD_WriteData(unsigned char Data)
                                   1047 ;	-----------------------------------------
                                   1048 ;	 function LCD_WriteData
                                   1049 ;	-----------------------------------------
      0001C2                       1050 _LCD_WriteData:
      0001C2 AF 82            [24] 1051 	mov	r7,dpl
                                   1052 ;	Lcd.h:96: RS=1;
                                   1053 ;	assignBit
      0001C4 D2 90            [12] 1054 	setb	_P1_0
                                   1055 ;	Lcd.h:97: RW=0;
                                   1056 ;	assignBit
      0001C6 C2 91            [12] 1057 	clr	_P1_1
                                   1058 ;	Lcd.h:98: P0=Data;
      0001C8 8F 80            [24] 1059 	mov	_P0,r7
                                   1060 ;	Lcd.h:99: EN=1;
                                   1061 ;	assignBit
      0001CA D2 A5            [12] 1062 	setb	_P2_5
                                   1063 ;	Lcd.h:100: LCD_Delay();
      0001CC 12r01r9F         [24] 1064 	lcall	_LCD_Delay
                                   1065 ;	Lcd.h:101: EN=0;
                                   1066 ;	assignBit
      0001CF C2 A5            [12] 1067 	clr	_P2_5
                                   1068 ;	Lcd.h:102: LCD_Delay();
                                   1069 ;	Lcd.h:103: }
      0001D1 02r01r9F         [24] 1070 	ljmp	_LCD_Delay
                                   1071 ;------------------------------------------------------------
                                   1072 ;Allocation info for local variables in function 'LCD_Init'
                                   1073 ;------------------------------------------------------------
                                   1074 ;	Lcd.h:110: void LCD_Init(void)
                                   1075 ;	-----------------------------------------
                                   1076 ;	 function LCD_Init
                                   1077 ;	-----------------------------------------
      0001D4                       1078 _LCD_Init:
                                   1079 ;	Lcd.h:112: LCD_WriteCommand(0x38);
      0001D4 75 82 38         [24] 1080 	mov	dpl,#0x38
      0001D7 12r01rB0         [24] 1081 	lcall	_LCD_WriteCommand
                                   1082 ;	Lcd.h:113: LCD_WriteCommand(0x0C);
      0001DA 75 82 0C         [24] 1083 	mov	dpl,#0x0c
      0001DD 12r01rB0         [24] 1084 	lcall	_LCD_WriteCommand
                                   1085 ;	Lcd.h:114: LCD_WriteCommand(0x06);
      0001E0 75 82 06         [24] 1086 	mov	dpl,#0x06
      0001E3 12r01rB0         [24] 1087 	lcall	_LCD_WriteCommand
                                   1088 ;	Lcd.h:115: LCD_WriteCommand(0x01);
      0001E6 75 82 01         [24] 1089 	mov	dpl,#0x01
                                   1090 ;	Lcd.h:116: }
      0001E9 02r01rB0         [24] 1091 	ljmp	_LCD_WriteCommand
                                   1092 ;------------------------------------------------------------
                                   1093 ;Allocation info for local variables in function 'LCD_SetCursor'
                                   1094 ;------------------------------------------------------------
                                   1095 ;Column                    Allocated with name '_LCD_SetCursor_PARM_2'
                                   1096 ;Line                      Allocated to registers r7 
                                   1097 ;------------------------------------------------------------
                                   1098 ;	Lcd.h:124: void LCD_SetCursor(unsigned char Line,unsigned char Column)
                                   1099 ;	-----------------------------------------
                                   1100 ;	 function LCD_SetCursor
                                   1101 ;	-----------------------------------------
      0001EC                       1102 _LCD_SetCursor:
      0001EC AF 82            [24] 1103 	mov	r7,dpl
                                   1104 ;	Lcd.h:126: if(Line==1)
      0001EE BF 01 0B         [24] 1105 	cjne	r7,#0x01,00102$
                                   1106 ;	Lcd.h:128: LCD_WriteCommand(0x80|(Column-1));
      0001F1 AF*00            [24] 1107 	mov	r7,_LCD_SetCursor_PARM_2
      0001F3 1F               [12] 1108 	dec	r7
      0001F4 74 80            [12] 1109 	mov	a,#0x80
      0001F6 4F               [12] 1110 	orl	a,r7
      0001F7 F5 82            [12] 1111 	mov	dpl,a
      0001F9 02r01rB0         [24] 1112 	ljmp	_LCD_WriteCommand
      0001FC                       1113 00102$:
                                   1114 ;	Lcd.h:132: LCD_WriteCommand(0x80|(Column-1)+0x40);
      0001FC AF*00            [24] 1115 	mov	r7,_LCD_SetCursor_PARM_2
      0001FE 74 3F            [12] 1116 	mov	a,#0x3f
      000200 2F               [12] 1117 	add	a,r7
      000201 FF               [12] 1118 	mov	r7,a
      000202 74 80            [12] 1119 	mov	a,#0x80
      000204 4F               [12] 1120 	orl	a,r7
      000205 F5 82            [12] 1121 	mov	dpl,a
                                   1122 ;	Lcd.h:134: }
      000207 02r01rB0         [24] 1123 	ljmp	_LCD_WriteCommand
                                   1124 ;------------------------------------------------------------
                                   1125 ;Allocation info for local variables in function 'LCD_ShowChar'
                                   1126 ;------------------------------------------------------------
                                   1127 ;Column                    Allocated with name '_LCD_ShowChar_PARM_2'
                                   1128 ;Char                      Allocated with name '_LCD_ShowChar_PARM_3'
                                   1129 ;Line                      Allocated to registers 
                                   1130 ;------------------------------------------------------------
                                   1131 ;	Lcd.h:143: void LCD_ShowChar(unsigned char Line,unsigned char Column,unsigned char Char)
                                   1132 ;	-----------------------------------------
                                   1133 ;	 function LCD_ShowChar
                                   1134 ;	-----------------------------------------
      00020A                       1135 _LCD_ShowChar:
                                   1136 ;	Lcd.h:145: LCD_SetCursor(Line,Column);
      00020A 85*01*00         [24] 1137 	mov	_LCD_SetCursor_PARM_2,_LCD_ShowChar_PARM_2
      00020D 12r01rEC         [24] 1138 	lcall	_LCD_SetCursor
                                   1139 ;	Lcd.h:146: LCD_WriteData(Char);
      000210 85*02 82         [24] 1140 	mov	dpl,_LCD_ShowChar_PARM_3
                                   1141 ;	Lcd.h:147: }
      000213 02r01rC2         [24] 1142 	ljmp	_LCD_WriteData
                                   1143 ;------------------------------------------------------------
                                   1144 ;Allocation info for local variables in function 'LCD_ShowString'
                                   1145 ;------------------------------------------------------------
                                   1146 ;Column                    Allocated with name '_LCD_ShowString_PARM_2'
                                   1147 ;String                    Allocated with name '_LCD_ShowString_PARM_3'
                                   1148 ;Line                      Allocated to registers 
                                   1149 ;i                         Allocated to registers r7 
                                   1150 ;------------------------------------------------------------
                                   1151 ;	Lcd.h:156: void LCD_ShowString(unsigned char Line,unsigned char Column,unsigned char *String)
                                   1152 ;	-----------------------------------------
                                   1153 ;	 function LCD_ShowString
                                   1154 ;	-----------------------------------------
      000216                       1155 _LCD_ShowString:
                                   1156 ;	Lcd.h:159: LCD_SetCursor(Line,Column);
      000216 85*03*00         [24] 1157 	mov	_LCD_SetCursor_PARM_2,_LCD_ShowString_PARM_2
      000219 12r01rEC         [24] 1158 	lcall	_LCD_SetCursor
                                   1159 ;	Lcd.h:160: for(i=0;String[i]!='\0';i++)
      00021C 7F 00            [12] 1160 	mov	r7,#0x00
      00021E                       1161 00103$:
      00021E EF               [12] 1162 	mov	a,r7
      00021F 25*04            [12] 1163 	add	a,_LCD_ShowString_PARM_3
      000221 FC               [12] 1164 	mov	r4,a
      000222 E4               [12] 1165 	clr	a
      000223 35*05            [12] 1166 	addc	a,(_LCD_ShowString_PARM_3 + 1)
      000225 FD               [12] 1167 	mov	r5,a
      000226 AE*06            [24] 1168 	mov	r6,(_LCD_ShowString_PARM_3 + 2)
      000228 8C 82            [24] 1169 	mov	dpl,r4
      00022A 8D 83            [24] 1170 	mov	dph,r5
      00022C 8E F0            [24] 1171 	mov	b,r6
      00022E 12r00r00         [24] 1172 	lcall	__gptrget
      000231 FE               [12] 1173 	mov	r6,a
      000232 60 0C            [24] 1174 	jz	00105$
                                   1175 ;	Lcd.h:162: LCD_WriteData(String[i]);
      000234 8E 82            [24] 1176 	mov	dpl,r6
      000236 C0 07            [24] 1177 	push	ar7
      000238 12r01rC2         [24] 1178 	lcall	_LCD_WriteData
      00023B D0 07            [24] 1179 	pop	ar7
                                   1180 ;	Lcd.h:160: for(i=0;String[i]!='\0';i++)
      00023D 0F               [12] 1181 	inc	r7
      00023E 80 DE            [24] 1182 	sjmp	00103$
      000240                       1183 00105$:
                                   1184 ;	Lcd.h:164: }
      000240 22               [24] 1185 	ret
                                   1186 ;------------------------------------------------------------
                                   1187 ;Allocation info for local variables in function 'LCD_Pow'
                                   1188 ;------------------------------------------------------------
                                   1189 ;Y                         Allocated with name '_LCD_Pow_PARM_2'
                                   1190 ;X                         Allocated to registers r6 r7 
                                   1191 ;i                         Allocated to registers r3 
                                   1192 ;Result                    Allocated to registers r4 r5 
                                   1193 ;------------------------------------------------------------
                                   1194 ;	Lcd.h:169: int LCD_Pow(int X,int Y)
                                   1195 ;	-----------------------------------------
                                   1196 ;	 function LCD_Pow
                                   1197 ;	-----------------------------------------
      000241                       1198 _LCD_Pow:
      000241 AE 82            [24] 1199 	mov	r6,dpl
      000243 AF 83            [24] 1200 	mov	r7,dph
                                   1201 ;	Lcd.h:172: int Result=1;
      000245 7C 01            [12] 1202 	mov	r4,#0x01
      000247 7D 00            [12] 1203 	mov	r5,#0x00
                                   1204 ;	Lcd.h:173: for(i=0;i<Y;i++)
      000249 7B 00            [12] 1205 	mov	r3,#0x00
      00024B                       1206 00103$:
      00024B 8B 01            [24] 1207 	mov	ar1,r3
      00024D 7A 00            [12] 1208 	mov	r2,#0x00
      00024F C3               [12] 1209 	clr	c
      000250 E9               [12] 1210 	mov	a,r1
      000251 95*07            [12] 1211 	subb	a,_LCD_Pow_PARM_2
      000253 EA               [12] 1212 	mov	a,r2
      000254 64 80            [12] 1213 	xrl	a,#0x80
      000256 85*08 F0         [24] 1214 	mov	b,(_LCD_Pow_PARM_2 + 1)
      000259 63 F0 80         [24] 1215 	xrl	b,#0x80
      00025C 95 F0            [12] 1216 	subb	a,b
      00025E 50 1E            [24] 1217 	jnc	00101$
                                   1218 ;	Lcd.h:175: Result*=X;
      000260 8E*00            [24] 1219 	mov	__mulint_PARM_2,r6
      000262 8F*01            [24] 1220 	mov	(__mulint_PARM_2 + 1),r7
      000264 8C 82            [24] 1221 	mov	dpl,r4
      000266 8D 83            [24] 1222 	mov	dph,r5
      000268 C0 07            [24] 1223 	push	ar7
      00026A C0 06            [24] 1224 	push	ar6
      00026C C0 03            [24] 1225 	push	ar3
      00026E 12r00r00         [24] 1226 	lcall	__mulint
      000271 AC 82            [24] 1227 	mov	r4,dpl
      000273 AD 83            [24] 1228 	mov	r5,dph
      000275 D0 03            [24] 1229 	pop	ar3
      000277 D0 06            [24] 1230 	pop	ar6
      000279 D0 07            [24] 1231 	pop	ar7
                                   1232 ;	Lcd.h:173: for(i=0;i<Y;i++)
      00027B 0B               [12] 1233 	inc	r3
      00027C 80 CD            [24] 1234 	sjmp	00103$
      00027E                       1235 00101$:
                                   1236 ;	Lcd.h:177: return Result;
      00027E 8C 82            [24] 1237 	mov	dpl,r4
      000280 8D 83            [24] 1238 	mov	dph,r5
                                   1239 ;	Lcd.h:178: }
      000282 22               [24] 1240 	ret
                                   1241 ;------------------------------------------------------------
                                   1242 ;Allocation info for local variables in function 'LCD_ShowNum'
                                   1243 ;------------------------------------------------------------
                                   1244 ;Column                    Allocated with name '_LCD_ShowNum_PARM_2'
                                   1245 ;Number                    Allocated with name '_LCD_ShowNum_PARM_3'
                                   1246 ;Length                    Allocated with name '_LCD_ShowNum_PARM_4'
                                   1247 ;Line                      Allocated to registers 
                                   1248 ;i                         Allocated to registers 
                                   1249 ;------------------------------------------------------------
                                   1250 ;	Lcd.h:188: void LCD_ShowNum(unsigned char Line,unsigned char Column,unsigned int Number,unsigned char Length)
                                   1251 ;	-----------------------------------------
                                   1252 ;	 function LCD_ShowNum
                                   1253 ;	-----------------------------------------
      000283                       1254 _LCD_ShowNum:
                                   1255 ;	Lcd.h:191: LCD_SetCursor(Line,Column);
      000283 85*09*00         [24] 1256 	mov	_LCD_SetCursor_PARM_2,_LCD_ShowNum_PARM_2
      000286 12r01rEC         [24] 1257 	lcall	_LCD_SetCursor
                                   1258 ;	Lcd.h:192: for(i=Length;i>0;i--)
      000289 AF*0C            [24] 1259 	mov	r7,_LCD_ShowNum_PARM_4
      00028B                       1260 00103$:
      00028B EF               [12] 1261 	mov	a,r7
      00028C 60 3F            [24] 1262 	jz	00105$
                                   1263 ;	Lcd.h:194: LCD_WriteData('0'+Number/LCD_Pow(10,i-1)%10);
      00028E 8F 05            [24] 1264 	mov	ar5,r7
      000290 7E 00            [12] 1265 	mov	r6,#0x00
      000292 ED               [12] 1266 	mov	a,r5
      000293 24 FF            [12] 1267 	add	a,#0xff
      000295 F5*07            [12] 1268 	mov	_LCD_Pow_PARM_2,a
      000297 EE               [12] 1269 	mov	a,r6
      000298 34 FF            [12] 1270 	addc	a,#0xff
      00029A F5*08            [12] 1271 	mov	(_LCD_Pow_PARM_2 + 1),a
      00029C 90 00 0A         [24] 1272 	mov	dptr,#0x000a
      00029F C0 07            [24] 1273 	push	ar7
      0002A1 12r02r41         [24] 1274 	lcall	_LCD_Pow
      0002A4 AD 82            [24] 1275 	mov	r5,dpl
      0002A6 AE 83            [24] 1276 	mov	r6,dph
      0002A8 8D*00            [24] 1277 	mov	__divuint_PARM_2,r5
      0002AA 8E*01            [24] 1278 	mov	(__divuint_PARM_2 + 1),r6
      0002AC 85*0A 82         [24] 1279 	mov	dpl,_LCD_ShowNum_PARM_3
      0002AF 85*0B 83         [24] 1280 	mov	dph,(_LCD_ShowNum_PARM_3 + 1)
      0002B2 12r00r00         [24] 1281 	lcall	__divuint
      0002B5 75*00 0A         [24] 1282 	mov	__moduint_PARM_2,#0x0a
      0002B8 75*01 00         [24] 1283 	mov	(__moduint_PARM_2 + 1),#0x00
      0002BB 12r00r00         [24] 1284 	lcall	__moduint
      0002BE AD 82            [24] 1285 	mov	r5,dpl
      0002C0 74 30            [12] 1286 	mov	a,#0x30
      0002C2 2D               [12] 1287 	add	a,r5
      0002C3 F5 82            [12] 1288 	mov	dpl,a
      0002C5 12r01rC2         [24] 1289 	lcall	_LCD_WriteData
      0002C8 D0 07            [24] 1290 	pop	ar7
                                   1291 ;	Lcd.h:192: for(i=Length;i>0;i--)
      0002CA 1F               [12] 1292 	dec	r7
      0002CB 80 BE            [24] 1293 	sjmp	00103$
      0002CD                       1294 00105$:
                                   1295 ;	Lcd.h:196: }
      0002CD 22               [24] 1296 	ret
                                   1297 ;------------------------------------------------------------
                                   1298 ;Allocation info for local variables in function 'LCD_ShowSignedNum'
                                   1299 ;------------------------------------------------------------
                                   1300 ;Column                    Allocated with name '_LCD_ShowSignedNum_PARM_2'
                                   1301 ;Number                    Allocated with name '_LCD_ShowSignedNum_PARM_3'
                                   1302 ;Length                    Allocated with name '_LCD_ShowSignedNum_PARM_4'
                                   1303 ;Line                      Allocated to registers 
                                   1304 ;i                         Allocated to registers 
                                   1305 ;Number1                   Allocated to registers r6 r7 
                                   1306 ;------------------------------------------------------------
                                   1307 ;	Lcd.h:206: void LCD_ShowSignedNum(unsigned char Line,unsigned char Column,int Number,unsigned char Length)
                                   1308 ;	-----------------------------------------
                                   1309 ;	 function LCD_ShowSignedNum
                                   1310 ;	-----------------------------------------
      0002CE                       1311 _LCD_ShowSignedNum:
                                   1312 ;	Lcd.h:210: LCD_SetCursor(Line,Column);
      0002CE 85*0D*00         [24] 1313 	mov	_LCD_SetCursor_PARM_2,_LCD_ShowSignedNum_PARM_2
      0002D1 12r01rEC         [24] 1314 	lcall	_LCD_SetCursor
                                   1315 ;	Lcd.h:211: if(Number>=0)
      0002D4 E5*0F            [12] 1316 	mov	a,(_LCD_ShowSignedNum_PARM_3 + 1)
      0002D6 20 E7 0C         [24] 1317 	jb	acc.7,00102$
                                   1318 ;	Lcd.h:213: LCD_WriteData('+');
      0002D9 75 82 2B         [24] 1319 	mov	dpl,#0x2b
      0002DC 12r01rC2         [24] 1320 	lcall	_LCD_WriteData
                                   1321 ;	Lcd.h:214: Number1=Number;
      0002DF AE*0E            [24] 1322 	mov	r6,_LCD_ShowSignedNum_PARM_3
      0002E1 AF*0F            [24] 1323 	mov	r7,(_LCD_ShowSignedNum_PARM_3 + 1)
      0002E3 80 0F            [24] 1324 	sjmp	00103$
      0002E5                       1325 00102$:
                                   1326 ;	Lcd.h:218: LCD_WriteData('-');
      0002E5 75 82 2D         [24] 1327 	mov	dpl,#0x2d
      0002E8 12r01rC2         [24] 1328 	lcall	_LCD_WriteData
                                   1329 ;	Lcd.h:219: Number1=-Number;
      0002EB C3               [12] 1330 	clr	c
      0002EC E4               [12] 1331 	clr	a
      0002ED 95*0E            [12] 1332 	subb	a,_LCD_ShowSignedNum_PARM_3
      0002EF FE               [12] 1333 	mov	r6,a
      0002F0 E4               [12] 1334 	clr	a
      0002F1 95*0F            [12] 1335 	subb	a,(_LCD_ShowSignedNum_PARM_3 + 1)
      0002F3 FF               [12] 1336 	mov	r7,a
      0002F4                       1337 00103$:
                                   1338 ;	Lcd.h:221: for(i=Length;i>0;i--)
      0002F4 AD*10            [24] 1339 	mov	r5,_LCD_ShowSignedNum_PARM_4
      0002F6                       1340 00106$:
      0002F6 ED               [12] 1341 	mov	a,r5
      0002F7 60 51            [24] 1342 	jz	00108$
                                   1343 ;	Lcd.h:223: LCD_WriteData('0'+Number1/LCD_Pow(10,i-1)%10);
      0002F9 8D 03            [24] 1344 	mov	ar3,r5
      0002FB 7C 00            [12] 1345 	mov	r4,#0x00
      0002FD EB               [12] 1346 	mov	a,r3
      0002FE 24 FF            [12] 1347 	add	a,#0xff
      000300 F5*07            [12] 1348 	mov	_LCD_Pow_PARM_2,a
      000302 EC               [12] 1349 	mov	a,r4
      000303 34 FF            [12] 1350 	addc	a,#0xff
      000305 F5*08            [12] 1351 	mov	(_LCD_Pow_PARM_2 + 1),a
      000307 90 00 0A         [24] 1352 	mov	dptr,#0x000a
      00030A C0 07            [24] 1353 	push	ar7
      00030C C0 06            [24] 1354 	push	ar6
      00030E C0 05            [24] 1355 	push	ar5
      000310 12r02r41         [24] 1356 	lcall	_LCD_Pow
      000313 AB 82            [24] 1357 	mov	r3,dpl
      000315 AC 83            [24] 1358 	mov	r4,dph
      000317 D0 05            [24] 1359 	pop	ar5
      000319 D0 06            [24] 1360 	pop	ar6
      00031B D0 07            [24] 1361 	pop	ar7
      00031D 8B*00            [24] 1362 	mov	__divuint_PARM_2,r3
      00031F 8C*01            [24] 1363 	mov	(__divuint_PARM_2 + 1),r4
      000321 8E 82            [24] 1364 	mov	dpl,r6
      000323 8F 83            [24] 1365 	mov	dph,r7
      000325 C0 07            [24] 1366 	push	ar7
      000327 C0 06            [24] 1367 	push	ar6
      000329 C0 05            [24] 1368 	push	ar5
      00032B 12r00r00         [24] 1369 	lcall	__divuint
      00032E 75*00 0A         [24] 1370 	mov	__moduint_PARM_2,#0x0a
      000331 75*01 00         [24] 1371 	mov	(__moduint_PARM_2 + 1),#0x00
      000334 12r00r00         [24] 1372 	lcall	__moduint
      000337 AB 82            [24] 1373 	mov	r3,dpl
      000339 74 30            [12] 1374 	mov	a,#0x30
      00033B 2B               [12] 1375 	add	a,r3
      00033C F5 82            [12] 1376 	mov	dpl,a
      00033E 12r01rC2         [24] 1377 	lcall	_LCD_WriteData
      000341 D0 05            [24] 1378 	pop	ar5
      000343 D0 06            [24] 1379 	pop	ar6
      000345 D0 07            [24] 1380 	pop	ar7
                                   1381 ;	Lcd.h:221: for(i=Length;i>0;i--)
      000347 1D               [12] 1382 	dec	r5
      000348 80 AC            [24] 1383 	sjmp	00106$
      00034A                       1384 00108$:
                                   1385 ;	Lcd.h:225: }
      00034A 22               [24] 1386 	ret
                                   1387 ;------------------------------------------------------------
                                   1388 ;Allocation info for local variables in function 'LCD_ShowHexNum'
                                   1389 ;------------------------------------------------------------
                                   1390 ;Column                    Allocated with name '_LCD_ShowHexNum_PARM_2'
                                   1391 ;Number                    Allocated with name '_LCD_ShowHexNum_PARM_3'
                                   1392 ;Length                    Allocated with name '_LCD_ShowHexNum_PARM_4'
                                   1393 ;Line                      Allocated to registers 
                                   1394 ;i                         Allocated to registers 
                                   1395 ;SingleNumber              Allocated to registers r5 
                                   1396 ;------------------------------------------------------------
                                   1397 ;	Lcd.h:235: void LCD_ShowHexNum(unsigned char Line,unsigned char Column,unsigned int Number,unsigned char Length)
                                   1398 ;	-----------------------------------------
                                   1399 ;	 function LCD_ShowHexNum
                                   1400 ;	-----------------------------------------
      00034B                       1401 _LCD_ShowHexNum:
                                   1402 ;	Lcd.h:239: LCD_SetCursor(Line,Column);
      00034B 85*11*00         [24] 1403 	mov	_LCD_SetCursor_PARM_2,_LCD_ShowHexNum_PARM_2
      00034E 12r01rEC         [24] 1404 	lcall	_LCD_SetCursor
                                   1405 ;	Lcd.h:240: for(i=Length;i>0;i--)
      000351 AF*14            [24] 1406 	mov	r7,_LCD_ShowHexNum_PARM_4
      000353                       1407 00106$:
      000353 EF               [12] 1408 	mov	a,r7
      000354 60 55            [24] 1409 	jz	00108$
                                   1410 ;	Lcd.h:242: SingleNumber=Number/LCD_Pow(16,i-1)%16;
      000356 8F 05            [24] 1411 	mov	ar5,r7
      000358 7E 00            [12] 1412 	mov	r6,#0x00
      00035A ED               [12] 1413 	mov	a,r5
      00035B 24 FF            [12] 1414 	add	a,#0xff
      00035D F5*07            [12] 1415 	mov	_LCD_Pow_PARM_2,a
      00035F EE               [12] 1416 	mov	a,r6
      000360 34 FF            [12] 1417 	addc	a,#0xff
      000362 F5*08            [12] 1418 	mov	(_LCD_Pow_PARM_2 + 1),a
      000364 90 00 10         [24] 1419 	mov	dptr,#0x0010
      000367 C0 07            [24] 1420 	push	ar7
      000369 12r02r41         [24] 1421 	lcall	_LCD_Pow
      00036C AD 82            [24] 1422 	mov	r5,dpl
      00036E AE 83            [24] 1423 	mov	r6,dph
      000370 8D*00            [24] 1424 	mov	__divuint_PARM_2,r5
      000372 8E*01            [24] 1425 	mov	(__divuint_PARM_2 + 1),r6
      000374 85*12 82         [24] 1426 	mov	dpl,_LCD_ShowHexNum_PARM_3
      000377 85*13 83         [24] 1427 	mov	dph,(_LCD_ShowHexNum_PARM_3 + 1)
      00037A 12r00r00         [24] 1428 	lcall	__divuint
      00037D E5 82            [12] 1429 	mov	a,dpl
      00037F 85 83 F0         [24] 1430 	mov	b,dph
      000382 D0 07            [24] 1431 	pop	ar7
      000384 54 0F            [12] 1432 	anl	a,#0x0f
      000386 FD               [12] 1433 	mov	r5,a
                                   1434 ;	Lcd.h:243: if(SingleNumber<10)
      000387 BD 0A 00         [24] 1435 	cjne	r5,#0x0a,00126$
      00038A                       1436 00126$:
      00038A 50 10            [24] 1437 	jnc	00102$
                                   1438 ;	Lcd.h:245: LCD_WriteData('0'+SingleNumber);
      00038C 8D 06            [24] 1439 	mov	ar6,r5
      00038E 74 30            [12] 1440 	mov	a,#0x30
      000390 2E               [12] 1441 	add	a,r6
      000391 F5 82            [12] 1442 	mov	dpl,a
      000393 C0 07            [24] 1443 	push	ar7
      000395 12r01rC2         [24] 1444 	lcall	_LCD_WriteData
      000398 D0 07            [24] 1445 	pop	ar7
      00039A 80 0C            [24] 1446 	sjmp	00107$
      00039C                       1447 00102$:
                                   1448 ;	Lcd.h:249: LCD_WriteData('A'+SingleNumber-10);
      00039C 74 37            [12] 1449 	mov	a,#0x37
      00039E 2D               [12] 1450 	add	a,r5
      00039F F5 82            [12] 1451 	mov	dpl,a
      0003A1 C0 07            [24] 1452 	push	ar7
      0003A3 12r01rC2         [24] 1453 	lcall	_LCD_WriteData
      0003A6 D0 07            [24] 1454 	pop	ar7
      0003A8                       1455 00107$:
                                   1456 ;	Lcd.h:240: for(i=Length;i>0;i--)
      0003A8 1F               [12] 1457 	dec	r7
      0003A9 80 A8            [24] 1458 	sjmp	00106$
      0003AB                       1459 00108$:
                                   1460 ;	Lcd.h:252: }
      0003AB 22               [24] 1461 	ret
                                   1462 ;------------------------------------------------------------
                                   1463 ;Allocation info for local variables in function 'LCD_ShowBinNum'
                                   1464 ;------------------------------------------------------------
                                   1465 ;Column                    Allocated with name '_LCD_ShowBinNum_PARM_2'
                                   1466 ;Number                    Allocated with name '_LCD_ShowBinNum_PARM_3'
                                   1467 ;Length                    Allocated with name '_LCD_ShowBinNum_PARM_4'
                                   1468 ;Line                      Allocated to registers 
                                   1469 ;i                         Allocated to registers 
                                   1470 ;------------------------------------------------------------
                                   1471 ;	Lcd.h:262: void LCD_ShowBinNum(unsigned char Line,unsigned char Column,unsigned int Number,unsigned char Length)
                                   1472 ;	-----------------------------------------
                                   1473 ;	 function LCD_ShowBinNum
                                   1474 ;	-----------------------------------------
      0003AC                       1475 _LCD_ShowBinNum:
                                   1476 ;	Lcd.h:265: LCD_SetCursor(Line,Column);
      0003AC 85*15*00         [24] 1477 	mov	_LCD_SetCursor_PARM_2,_LCD_ShowBinNum_PARM_2
      0003AF 12r01rEC         [24] 1478 	lcall	_LCD_SetCursor
                                   1479 ;	Lcd.h:266: for(i=Length;i>0;i--)
      0003B2 AF*18            [24] 1480 	mov	r7,_LCD_ShowBinNum_PARM_4
      0003B4                       1481 00103$:
      0003B4 EF               [12] 1482 	mov	a,r7
      0003B5 60 3A            [24] 1483 	jz	00105$
                                   1484 ;	Lcd.h:268: LCD_WriteData('0'+Number/LCD_Pow(2,i-1)%2);
      0003B7 8F 05            [24] 1485 	mov	ar5,r7
      0003B9 7E 00            [12] 1486 	mov	r6,#0x00
      0003BB ED               [12] 1487 	mov	a,r5
      0003BC 24 FF            [12] 1488 	add	a,#0xff
      0003BE F5*07            [12] 1489 	mov	_LCD_Pow_PARM_2,a
      0003C0 EE               [12] 1490 	mov	a,r6
      0003C1 34 FF            [12] 1491 	addc	a,#0xff
      0003C3 F5*08            [12] 1492 	mov	(_LCD_Pow_PARM_2 + 1),a
      0003C5 90 00 02         [24] 1493 	mov	dptr,#0x0002
      0003C8 C0 07            [24] 1494 	push	ar7
      0003CA 12r02r41         [24] 1495 	lcall	_LCD_Pow
      0003CD AD 82            [24] 1496 	mov	r5,dpl
      0003CF AE 83            [24] 1497 	mov	r6,dph
      0003D1 8D*00            [24] 1498 	mov	__divuint_PARM_2,r5
      0003D3 8E*01            [24] 1499 	mov	(__divuint_PARM_2 + 1),r6
      0003D5 85*16 82         [24] 1500 	mov	dpl,_LCD_ShowBinNum_PARM_3
      0003D8 85*17 83         [24] 1501 	mov	dph,(_LCD_ShowBinNum_PARM_3 + 1)
      0003DB 12r00r00         [24] 1502 	lcall	__divuint
      0003DE E5 82            [12] 1503 	mov	a,dpl
      0003E0 85 83 F0         [24] 1504 	mov	b,dph
      0003E3 54 01            [12] 1505 	anl	a,#0x01
      0003E5 24 30            [12] 1506 	add	a,#0x30
      0003E7 F5 82            [12] 1507 	mov	dpl,a
      0003E9 12r01rC2         [24] 1508 	lcall	_LCD_WriteData
      0003EC D0 07            [24] 1509 	pop	ar7
                                   1510 ;	Lcd.h:266: for(i=Length;i>0;i--)
      0003EE 1F               [12] 1511 	dec	r7
      0003EF 80 C3            [24] 1512 	sjmp	00103$
      0003F1                       1513 00105$:
                                   1514 ;	Lcd.h:270: }
      0003F1 22               [24] 1515 	ret
                                   1516 ;------------------------------------------------------------
                                   1517 ;Allocation info for local variables in function 'I2C_Start'
                                   1518 ;------------------------------------------------------------
                                   1519 ;	I2C.h:49: void I2C_Start(void)
                                   1520 ;	-----------------------------------------
                                   1521 ;	 function I2C_Start
                                   1522 ;	-----------------------------------------
      0003F2                       1523 _I2C_Start:
                                   1524 ;	I2C.h:51: I2C_SDA = 1;  // 设置数据线为高电平
                                   1525 ;	assignBit
      0003F2 D2 92            [12] 1526 	setb	_P1_2
                                   1527 ;	I2C.h:52: I2C_SCL = 1;  // 设置时钟线为高电平
                                   1528 ;	assignBit
      0003F4 D2 97            [12] 1529 	setb	_P1_7
                                   1530 ;	I2C.h:54: I2C_SDA = 0;  // 设置数据线为低电平（启动信号）
                                   1531 ;	assignBit
      0003F6 C2 92            [12] 1532 	clr	_P1_2
                                   1533 ;	I2C.h:55: I2C_SCL = 0;  // 设置时钟线为低电平
                                   1534 ;	assignBit
      0003F8 C2 97            [12] 1535 	clr	_P1_7
                                   1536 ;	I2C.h:56: }
      0003FA 22               [24] 1537 	ret
                                   1538 ;------------------------------------------------------------
                                   1539 ;Allocation info for local variables in function 'I2C_Stop'
                                   1540 ;------------------------------------------------------------
                                   1541 ;	I2C.h:61: void I2C_Stop(void)
                                   1542 ;	-----------------------------------------
                                   1543 ;	 function I2C_Stop
                                   1544 ;	-----------------------------------------
      0003FB                       1545 _I2C_Stop:
                                   1546 ;	I2C.h:63: I2C_SDA = 0;  // 设置数据线为低电平
                                   1547 ;	assignBit
      0003FB C2 92            [12] 1548 	clr	_P1_2
                                   1549 ;	I2C.h:64: I2C_SCL = 1;  // 设置时钟线为高电平
                                   1550 ;	assignBit
      0003FD D2 97            [12] 1551 	setb	_P1_7
                                   1552 ;	I2C.h:65: I2C_SDA = 1;  // 设置数据线为高电平（停止信号）
                                   1553 ;	assignBit
      0003FF D2 92            [12] 1554 	setb	_P1_2
                                   1555 ;	I2C.h:66: }
      000401 22               [24] 1556 	ret
                                   1557 ;------------------------------------------------------------
                                   1558 ;Allocation info for local variables in function 'I2C_SendByte'
                                   1559 ;------------------------------------------------------------
                                   1560 ;Byte                      Allocated to registers r7 
                                   1561 ;i                         Allocated to registers r6 
                                   1562 ;------------------------------------------------------------
                                   1563 ;	I2C.h:71: void I2C_SendByte(unsigned char Byte)
                                   1564 ;	-----------------------------------------
                                   1565 ;	 function I2C_SendByte
                                   1566 ;	-----------------------------------------
      000402                       1567 _I2C_SendByte:
      000402 AF 82            [24] 1568 	mov	r7,dpl
                                   1569 ;	I2C.h:74: for(i=0; i<8; i++)
      000404 7E 00            [12] 1570 	mov	r6,#0x00
      000406                       1571 00102$:
                                   1572 ;	I2C.h:76: I2C_SDA = Byte & (0x80 >> i);  // 根据字节的每一位数据设置数据线
      000406 8E F0            [24] 1573 	mov	b,r6
      000408 05 F0            [12] 1574 	inc	b
      00040A 7C 80            [12] 1575 	mov	r4,#0x80
      00040C E4               [12] 1576 	clr	a
      00040D FD               [12] 1577 	mov	r5,a
      00040E 33               [12] 1578 	rlc	a
      00040F 92 D2            [24] 1579 	mov	ov,c
      000411 80 08            [24] 1580 	sjmp	00112$
      000413                       1581 00111$:
      000413 A2 D2            [12] 1582 	mov	c,ov
      000415 ED               [12] 1583 	mov	a,r5
      000416 13               [12] 1584 	rrc	a
      000417 FD               [12] 1585 	mov	r5,a
      000418 EC               [12] 1586 	mov	a,r4
      000419 13               [12] 1587 	rrc	a
      00041A FC               [12] 1588 	mov	r4,a
      00041B                       1589 00112$:
      00041B D5 F0 F5         [24] 1590 	djnz	b,00111$
      00041E 8F 02            [24] 1591 	mov	ar2,r7
      000420 7B 00            [12] 1592 	mov	r3,#0x00
      000422 EA               [12] 1593 	mov	a,r2
      000423 52 04            [12] 1594 	anl	ar4,a
      000425 EB               [12] 1595 	mov	a,r3
      000426 52 05            [12] 1596 	anl	ar5,a
                                   1597 ;	assignBit
      000428 EC               [12] 1598 	mov	a,r4
      000429 4D               [12] 1599 	orl	a,r5
      00042A 24 FF            [12] 1600 	add	a,#0xff
      00042C 92 92            [24] 1601 	mov	_P1_2,c
                                   1602 ;	I2C.h:77: I2C_SCL = 1;  // 设置时钟线为高电平（数据线稳定）
                                   1603 ;	assignBit
      00042E D2 97            [12] 1604 	setb	_P1_7
                                   1605 ;	I2C.h:78: I2C_SCL = 0;  // 设置时钟线为低电平
                                   1606 ;	assignBit
      000430 C2 97            [12] 1607 	clr	_P1_7
                                   1608 ;	I2C.h:74: for(i=0; i<8; i++)
      000432 0E               [12] 1609 	inc	r6
      000433 BE 08 00         [24] 1610 	cjne	r6,#0x08,00113$
      000436                       1611 00113$:
      000436 40 CE            [24] 1612 	jc	00102$
                                   1613 ;	I2C.h:80: }
      000438 22               [24] 1614 	ret
                                   1615 ;------------------------------------------------------------
                                   1616 ;Allocation info for local variables in function 'I2C_ReciveByte'
                                   1617 ;------------------------------------------------------------
                                   1618 ;i                         Allocated to registers r6 
                                   1619 ;Byte                      Allocated to registers r7 
                                   1620 ;------------------------------------------------------------
                                   1621 ;	I2C.h:85: unsigned char I2C_ReciveByte(void)
                                   1622 ;	-----------------------------------------
                                   1623 ;	 function I2C_ReciveByte
                                   1624 ;	-----------------------------------------
      000439                       1625 _I2C_ReciveByte:
                                   1626 ;	I2C.h:87: unsigned char i, Byte = 0x00;
      000439 7F 00            [12] 1627 	mov	r7,#0x00
                                   1628 ;	I2C.h:88: I2C_SDA = 1;  // 设置数据线为高电平
                                   1629 ;	assignBit
      00043B D2 92            [12] 1630 	setb	_P1_2
                                   1631 ;	I2C.h:89: for (i = 0; i < 8; i++)
      00043D 7E 00            [12] 1632 	mov	r6,#0x00
      00043F                       1633 00104$:
                                   1634 ;	I2C.h:91: I2C_SCL = 1;  // 设置时钟线为高电平（接收数据）
                                   1635 ;	assignBit
      00043F D2 97            [12] 1636 	setb	_P1_7
                                   1637 ;	I2C.h:92: if(I2C_SDA){Byte |= (0x80 >> i);}  // 读取数据线的值并设置字节的对应位 
      000441 30 92 1B         [24] 1638 	jnb	_P1_2,00102$
      000444 8E F0            [24] 1639 	mov	b,r6
      000446 05 F0            [12] 1640 	inc	b
      000448 7C 80            [12] 1641 	mov	r4,#0x80
      00044A E4               [12] 1642 	clr	a
      00044B FD               [12] 1643 	mov	r5,a
      00044C 33               [12] 1644 	rlc	a
      00044D 92 D2            [24] 1645 	mov	ov,c
      00044F 80 08            [24] 1646 	sjmp	00123$
      000451                       1647 00122$:
      000451 A2 D2            [12] 1648 	mov	c,ov
      000453 ED               [12] 1649 	mov	a,r5
      000454 13               [12] 1650 	rrc	a
      000455 FD               [12] 1651 	mov	r5,a
      000456 EC               [12] 1652 	mov	a,r4
      000457 13               [12] 1653 	rrc	a
      000458 FC               [12] 1654 	mov	r4,a
      000459                       1655 00123$:
      000459 D5 F0 F5         [24] 1656 	djnz	b,00122$
      00045C EC               [12] 1657 	mov	a,r4
      00045D 42 07            [12] 1658 	orl	ar7,a
      00045F                       1659 00102$:
                                   1660 ;	I2C.h:93: I2C_SCL = 0;  // 设置时钟线为低电平
                                   1661 ;	assignBit
      00045F C2 97            [12] 1662 	clr	_P1_7
                                   1663 ;	I2C.h:89: for (i = 0; i < 8; i++)
      000461 0E               [12] 1664 	inc	r6
      000462 BE 08 00         [24] 1665 	cjne	r6,#0x08,00124$
      000465                       1666 00124$:
      000465 40 D8            [24] 1667 	jc	00104$
                                   1668 ;	I2C.h:95: return Byte;
      000467 8F 82            [24] 1669 	mov	dpl,r7
                                   1670 ;	I2C.h:96: }
      000469 22               [24] 1671 	ret
                                   1672 ;------------------------------------------------------------
                                   1673 ;Allocation info for local variables in function 'I2C_SendAck'
                                   1674 ;------------------------------------------------------------
                                   1675 ;Ack                       Allocated to registers r7 
                                   1676 ;------------------------------------------------------------
                                   1677 ;	I2C.h:101: void I2C_SendAck(unsigned char Ack)
                                   1678 ;	-----------------------------------------
                                   1679 ;	 function I2C_SendAck
                                   1680 ;	-----------------------------------------
      00046A                       1681 _I2C_SendAck:
                                   1682 ;	I2C.h:103: I2C_SDA = Ack;  // 设置数据线为应答值
                                   1683 ;	assignBit
      00046A E5 82            [12] 1684 	mov	a,dpl
      00046C 24 FF            [12] 1685 	add	a,#0xff
      00046E 92 92            [24] 1686 	mov	_P1_2,c
                                   1687 ;	I2C.h:104: I2C_SCL = 1;  // 设置时钟线为高电平
                                   1688 ;	assignBit
      000470 D2 97            [12] 1689 	setb	_P1_7
                                   1690 ;	I2C.h:105: I2C_SCL = 0;  // 设置时钟线为低电平
                                   1691 ;	assignBit
      000472 C2 97            [12] 1692 	clr	_P1_7
                                   1693 ;	I2C.h:106: }
      000474 22               [24] 1694 	ret
                                   1695 ;------------------------------------------------------------
                                   1696 ;Allocation info for local variables in function 'I2C_ReciveAck'
                                   1697 ;------------------------------------------------------------
                                   1698 ;Ack                       Allocated to registers 
                                   1699 ;------------------------------------------------------------
                                   1700 ;	I2C.h:111: unsigned char I2C_ReciveAck(void)
                                   1701 ;	-----------------------------------------
                                   1702 ;	 function I2C_ReciveAck
                                   1703 ;	-----------------------------------------
      000475                       1704 _I2C_ReciveAck:
                                   1705 ;	I2C.h:114: I2C_SDA = 1;  // 设置数据线为高电平
                                   1706 ;	assignBit
      000475 D2 92            [12] 1707 	setb	_P1_2
                                   1708 ;	I2C.h:115: I2C_SCL = 1;  // 设置时钟线为高电平（接收应答）
                                   1709 ;	assignBit
      000477 D2 97            [12] 1710 	setb	_P1_7
                                   1711 ;	I2C.h:116: Ack = I2C_SDA;  // 读取数据线的值作为应答值
      000479 A2 92            [12] 1712 	mov	c,_P1_2
      00047B E4               [12] 1713 	clr	a
      00047C 33               [12] 1714 	rlc	a
      00047D F5 82            [12] 1715 	mov	dpl,a
                                   1716 ;	I2C.h:117: I2C_SCL = 0;  // 设置时钟线为低电平
                                   1717 ;	assignBit
      00047F C2 97            [12] 1718 	clr	_P1_7
                                   1719 ;	I2C.h:118: return Ack;
                                   1720 ;	I2C.h:119: }
      000481 22               [24] 1721 	ret
                                   1722 ;------------------------------------------------------------
                                   1723 ;Allocation info for local variables in function 'delay_ATC'
                                   1724 ;------------------------------------------------------------
                                   1725 ;a                         Allocated to registers r6 r7 
                                   1726 ;b                         Allocated to registers r4 r5 
                                   1727 ;------------------------------------------------------------
                                   1728 ;	AT24C02.h:46: void delay_ATC()
                                   1729 ;	-----------------------------------------
                                   1730 ;	 function delay_ATC
                                   1731 ;	-----------------------------------------
      000482                       1732 _delay_ATC:
                                   1733 ;	AT24C02.h:49: for(a = 10; a > 0; a--)
      000482 7E 0A            [12] 1734 	mov	r6,#0x0a
      000484 7F 00            [12] 1735 	mov	r7,#0x00
      000486                       1736 00105$:
                                   1737 ;	AT24C02.h:51: for(b = 400; b > 0; b--);
      000486 7C 90            [12] 1738 	mov	r4,#0x90
      000488 7D 01            [12] 1739 	mov	r5,#0x01
      00048A                       1740 00104$:
      00048A EC               [12] 1741 	mov	a,r4
      00048B 24 FF            [12] 1742 	add	a,#0xff
      00048D FA               [12] 1743 	mov	r2,a
      00048E ED               [12] 1744 	mov	a,r5
      00048F 34 FF            [12] 1745 	addc	a,#0xff
      000491 FB               [12] 1746 	mov	r3,a
      000492 8A 04            [24] 1747 	mov	ar4,r2
      000494 8B 05            [24] 1748 	mov	ar5,r3
      000496 EA               [12] 1749 	mov	a,r2
      000497 4B               [12] 1750 	orl	a,r3
      000498 70 F0            [24] 1751 	jnz	00104$
                                   1752 ;	AT24C02.h:49: for(a = 10; a > 0; a--)
      00049A EE               [12] 1753 	mov	a,r6
      00049B 24 FF            [12] 1754 	add	a,#0xff
      00049D FC               [12] 1755 	mov	r4,a
      00049E EF               [12] 1756 	mov	a,r7
      00049F 34 FF            [12] 1757 	addc	a,#0xff
      0004A1 FD               [12] 1758 	mov	r5,a
      0004A2 8C 06            [24] 1759 	mov	ar6,r4
      0004A4 8D 07            [24] 1760 	mov	ar7,r5
      0004A6 EC               [12] 1761 	mov	a,r4
      0004A7 4D               [12] 1762 	orl	a,r5
      0004A8 70 DC            [24] 1763 	jnz	00105$
                                   1764 ;	AT24C02.h:53: }
      0004AA 22               [24] 1765 	ret
                                   1766 ;------------------------------------------------------------
                                   1767 ;Allocation info for local variables in function 'AT24C02_WriteByte'
                                   1768 ;------------------------------------------------------------
                                   1769 ;data                      Allocated with name '_AT24C02_WriteByte_PARM_2'
                                   1770 ;add                       Allocated to registers r7 
                                   1771 ;------------------------------------------------------------
                                   1772 ;	AT24C02.h:58: void AT24C02_WriteByte(unsigned char add,unsigned char data)
                                   1773 ;	-----------------------------------------
                                   1774 ;	 function AT24C02_WriteByte
                                   1775 ;	-----------------------------------------
      0004AB                       1776 _AT24C02_WriteByte:
      0004AB AF 82            [24] 1777 	mov	r7,dpl
                                   1778 ;	AT24C02.h:60: I2C_Start();                         // 发送起始信号
      0004AD C0 07            [24] 1779 	push	ar7
      0004AF 12r03rF2         [24] 1780 	lcall	_I2C_Start
                                   1781 ;	AT24C02.h:61: I2C_SendByte(AT24C02_ADDR);          // 发送EEPROM地址
      0004B2 75 82 A0         [24] 1782 	mov	dpl,#0xa0
      0004B5 12r04r02         [24] 1783 	lcall	_I2C_SendByte
                                   1784 ;	AT24C02.h:62: I2C_ReciveAck();                     // 接收ACK信号
      0004B8 12r04r75         [24] 1785 	lcall	_I2C_ReciveAck
      0004BB D0 07            [24] 1786 	pop	ar7
                                   1787 ;	AT24C02.h:64: I2C_SendByte(add);                   // 发送要写入的地址
      0004BD 8F 82            [24] 1788 	mov	dpl,r7
      0004BF 12r04r02         [24] 1789 	lcall	_I2C_SendByte
                                   1790 ;	AT24C02.h:65: I2C_ReciveAck();                     // 接收ACK信号
      0004C2 12r04r75         [24] 1791 	lcall	_I2C_ReciveAck
                                   1792 ;	AT24C02.h:66: I2C_SendByte(data);                  // 发送要写入的数据
      0004C5 85*19 82         [24] 1793 	mov	dpl,_AT24C02_WriteByte_PARM_2
      0004C8 12r04r02         [24] 1794 	lcall	_I2C_SendByte
                                   1795 ;	AT24C02.h:67: I2C_ReciveAck();                     // 接收ACK信号
      0004CB 12r04r75         [24] 1796 	lcall	_I2C_ReciveAck
                                   1797 ;	AT24C02.h:68: I2C_Stop();                          // 发送停止信号
      0004CE 12r03rFB         [24] 1798 	lcall	_I2C_Stop
                                   1799 ;	AT24C02.h:69: delay_ATC();                         // 等待EEPROM写入完成
                                   1800 ;	AT24C02.h:70: }
      0004D1 02r04r82         [24] 1801 	ljmp	_delay_ATC
                                   1802 ;------------------------------------------------------------
                                   1803 ;Allocation info for local variables in function 'AT24C02_ReadByte'
                                   1804 ;------------------------------------------------------------
                                   1805 ;add                       Allocated to registers r7 
                                   1806 ;data                      Allocated to registers r7 
                                   1807 ;------------------------------------------------------------
                                   1808 ;	AT24C02.h:75: unsigned char AT24C02_ReadByte(unsigned char add)
                                   1809 ;	-----------------------------------------
                                   1810 ;	 function AT24C02_ReadByte
                                   1811 ;	-----------------------------------------
      0004D4                       1812 _AT24C02_ReadByte:
      0004D4 AF 82            [24] 1813 	mov	r7,dpl
                                   1814 ;	AT24C02.h:78: I2C_Start();                         // 发送起始信号
      0004D6 C0 07            [24] 1815 	push	ar7
      0004D8 12r03rF2         [24] 1816 	lcall	_I2C_Start
                                   1817 ;	AT24C02.h:79: I2C_SendByte(AT24C02_ADDR);          // 发送EEPROM地址
      0004DB 75 82 A0         [24] 1818 	mov	dpl,#0xa0
      0004DE 12r04r02         [24] 1819 	lcall	_I2C_SendByte
                                   1820 ;	AT24C02.h:80: I2C_ReciveAck();                     // 接收ACK信号
      0004E1 12r04r75         [24] 1821 	lcall	_I2C_ReciveAck
      0004E4 D0 07            [24] 1822 	pop	ar7
                                   1823 ;	AT24C02.h:81: I2C_SendByte(add);                   // 发送要读取的地址
      0004E6 8F 82            [24] 1824 	mov	dpl,r7
      0004E8 12r04r02         [24] 1825 	lcall	_I2C_SendByte
                                   1826 ;	AT24C02.h:82: I2C_ReciveAck();                     // 接收ACK信号
      0004EB 12r04r75         [24] 1827 	lcall	_I2C_ReciveAck
                                   1828 ;	AT24C02.h:84: I2C_Start();                         // 发送重复起始信号
      0004EE 12r03rF2         [24] 1829 	lcall	_I2C_Start
                                   1830 ;	AT24C02.h:85: I2C_SendByte(AT24C02_ADDR | 0x01);   // 发送带读位的EEPROM地址
      0004F1 75 82 A1         [24] 1831 	mov	dpl,#0xa1
      0004F4 12r04r02         [24] 1832 	lcall	_I2C_SendByte
                                   1833 ;	AT24C02.h:86: I2C_ReciveAck();                     // 接收ACK信号
      0004F7 12r04r75         [24] 1834 	lcall	_I2C_ReciveAck
                                   1835 ;	AT24C02.h:87: data = I2C_ReciveByte();             // 读取数据
      0004FA 12r04r39         [24] 1836 	lcall	_I2C_ReciveByte
      0004FD AF 82            [24] 1837 	mov	r7,dpl
                                   1838 ;	AT24C02.h:88: I2C_SendAck(1);                      // 发送NACK信号
      0004FF 75 82 01         [24] 1839 	mov	dpl,#0x01
      000502 C0 07            [24] 1840 	push	ar7
      000504 12r04r6A         [24] 1841 	lcall	_I2C_SendAck
                                   1842 ;	AT24C02.h:89: I2C_Stop();                          // 发送停止信号
      000507 12r03rFB         [24] 1843 	lcall	_I2C_Stop
      00050A D0 07            [24] 1844 	pop	ar7
                                   1845 ;	AT24C02.h:90: return data;    
      00050C 8F 82            [24] 1846 	mov	dpl,r7
                                   1847 ;	AT24C02.h:91: }
      00050E 22               [24] 1848 	ret
                                   1849 ;------------------------------------------------------------
                                   1850 ;Allocation info for local variables in function 'delay_key'
                                   1851 ;------------------------------------------------------------
                                   1852 ;a                         Allocated to registers r6 r7 
                                   1853 ;b                         Allocated to registers r4 r5 
                                   1854 ;------------------------------------------------------------
                                   1855 ;	Key.h:40: void delay_key()
                                   1856 ;	-----------------------------------------
                                   1857 ;	 function delay_key
                                   1858 ;	-----------------------------------------
      00050F                       1859 _delay_key:
                                   1860 ;	Key.h:43: for(a = 10; a > 0; a--)
      00050F 7E 0A            [12] 1861 	mov	r6,#0x0a
      000511 7F 00            [12] 1862 	mov	r7,#0x00
      000513                       1863 00105$:
                                   1864 ;	Key.h:45: for(b = 400; b > 0; b--);
      000513 7C 90            [12] 1865 	mov	r4,#0x90
      000515 7D 01            [12] 1866 	mov	r5,#0x01
      000517                       1867 00104$:
      000517 EC               [12] 1868 	mov	a,r4
      000518 24 FF            [12] 1869 	add	a,#0xff
      00051A FA               [12] 1870 	mov	r2,a
      00051B ED               [12] 1871 	mov	a,r5
      00051C 34 FF            [12] 1872 	addc	a,#0xff
      00051E FB               [12] 1873 	mov	r3,a
      00051F 8A 04            [24] 1874 	mov	ar4,r2
      000521 8B 05            [24] 1875 	mov	ar5,r3
      000523 EA               [12] 1876 	mov	a,r2
      000524 4B               [12] 1877 	orl	a,r3
      000525 70 F0            [24] 1878 	jnz	00104$
                                   1879 ;	Key.h:43: for(a = 10; a > 0; a--)
      000527 EE               [12] 1880 	mov	a,r6
      000528 24 FF            [12] 1881 	add	a,#0xff
      00052A FC               [12] 1882 	mov	r4,a
      00052B EF               [12] 1883 	mov	a,r7
      00052C 34 FF            [12] 1884 	addc	a,#0xff
      00052E FD               [12] 1885 	mov	r5,a
      00052F 8C 06            [24] 1886 	mov	ar6,r4
      000531 8D 07            [24] 1887 	mov	ar7,r5
      000533 EC               [12] 1888 	mov	a,r4
      000534 4D               [12] 1889 	orl	a,r5
      000535 70 DC            [24] 1890 	jnz	00105$
                                   1891 ;	Key.h:47: }
      000537 22               [24] 1892 	ret
                                   1893 ;------------------------------------------------------------
                                   1894 ;Allocation info for local variables in function 'Key'
                                   1895 ;------------------------------------------------------------
                                   1896 ;KeyNum                    Allocated to registers r6 r7 
                                   1897 ;------------------------------------------------------------
                                   1898 ;	Key.h:54: unsigned int Key()
                                   1899 ;	-----------------------------------------
                                   1900 ;	 function Key
                                   1901 ;	-----------------------------------------
      000538                       1902 _Key:
                                   1903 ;	Key.h:56: unsigned int KeyNum = 0;
      000538 7E 00            [12] 1904 	mov	r6,#0x00
      00053A 7F 00            [12] 1905 	mov	r7,#0x00
                                   1906 ;	Key.h:57: if(P3_0 == 0){delay_key();while(P3_0 == 0);delay_key();KeyNum = 1;}
      00053C 20 B0 0D         [24] 1907 	jb	_P3_0,00105$
      00053F 12r05r0F         [24] 1908 	lcall	_delay_key
      000542                       1909 00101$:
      000542 30 B0 FD         [24] 1910 	jnb	_P3_0,00101$
      000545 12r05r0F         [24] 1911 	lcall	_delay_key
      000548 7E 01            [12] 1912 	mov	r6,#0x01
      00054A 7F 00            [12] 1913 	mov	r7,#0x00
      00054C                       1914 00105$:
                                   1915 ;	Key.h:58: if(P3_1 == 0){delay_key();while(P3_1 == 0);delay_key();KeyNum = 2;}
      00054C 20 B1 0D         [24] 1916 	jb	_P3_1,00110$
      00054F 12r05r0F         [24] 1917 	lcall	_delay_key
      000552                       1918 00106$:
      000552 30 B1 FD         [24] 1919 	jnb	_P3_1,00106$
      000555 12r05r0F         [24] 1920 	lcall	_delay_key
      000558 7E 02            [12] 1921 	mov	r6,#0x02
      00055A 7F 00            [12] 1922 	mov	r7,#0x00
      00055C                       1923 00110$:
                                   1924 ;	Key.h:59: if(P3_2 == 0){delay_key();while(P3_2 == 0);delay_key();KeyNum = 3;}
      00055C 20 B2 0D         [24] 1925 	jb	_P3_2,00115$
      00055F 12r05r0F         [24] 1926 	lcall	_delay_key
      000562                       1927 00111$:
      000562 30 B2 FD         [24] 1928 	jnb	_P3_2,00111$
      000565 12r05r0F         [24] 1929 	lcall	_delay_key
      000568 7E 03            [12] 1930 	mov	r6,#0x03
      00056A 7F 00            [12] 1931 	mov	r7,#0x00
      00056C                       1932 00115$:
                                   1933 ;	Key.h:60: if(P3_3 == 0){delay_key();while(P3_3 == 0);delay_key();KeyNum = 4;}
      00056C 20 B3 0D         [24] 1934 	jb	_P3_3,00120$
      00056F 12r05r0F         [24] 1935 	lcall	_delay_key
      000572                       1936 00116$:
      000572 30 B3 FD         [24] 1937 	jnb	_P3_3,00116$
      000575 12r05r0F         [24] 1938 	lcall	_delay_key
      000578 7E 04            [12] 1939 	mov	r6,#0x04
      00057A 7F 00            [12] 1940 	mov	r7,#0x00
      00057C                       1941 00120$:
                                   1942 ;	Key.h:61: if(P3_4 == 0){delay_key();while(P3_4 == 0);delay_key();KeyNum = 5;}
      00057C 20 B4 0D         [24] 1943 	jb	_P3_4,00125$
      00057F 12r05r0F         [24] 1944 	lcall	_delay_key
      000582                       1945 00121$:
      000582 30 B4 FD         [24] 1946 	jnb	_P3_4,00121$
      000585 12r05r0F         [24] 1947 	lcall	_delay_key
      000588 7E 05            [12] 1948 	mov	r6,#0x05
      00058A 7F 00            [12] 1949 	mov	r7,#0x00
      00058C                       1950 00125$:
                                   1951 ;	Key.h:62: if(P3_5 == 0){delay_key();while(P3_5 == 0);delay_key();KeyNum = 6;}
      00058C 20 B5 0D         [24] 1952 	jb	_P3_5,00130$
      00058F 12r05r0F         [24] 1953 	lcall	_delay_key
      000592                       1954 00126$:
      000592 30 B5 FD         [24] 1955 	jnb	_P3_5,00126$
      000595 12r05r0F         [24] 1956 	lcall	_delay_key
      000598 7E 06            [12] 1957 	mov	r6,#0x06
      00059A 7F 00            [12] 1958 	mov	r7,#0x00
      00059C                       1959 00130$:
                                   1960 ;	Key.h:63: if(P3_6 == 0){delay_key();while(P3_6 == 0);delay_key();KeyNum = 7;}
      00059C 20 B6 0D         [24] 1961 	jb	_P3_6,00135$
      00059F 12r05r0F         [24] 1962 	lcall	_delay_key
      0005A2                       1963 00131$:
      0005A2 30 B6 FD         [24] 1964 	jnb	_P3_6,00131$
      0005A5 12r05r0F         [24] 1965 	lcall	_delay_key
      0005A8 7E 07            [12] 1966 	mov	r6,#0x07
      0005AA 7F 00            [12] 1967 	mov	r7,#0x00
      0005AC                       1968 00135$:
                                   1969 ;	Key.h:64: if(P3_7 == 0){delay_key();while(P3_7 == 0);delay_key();KeyNum = 8;}
      0005AC 20 B7 0D         [24] 1970 	jb	_P3_7,00140$
      0005AF 12r05r0F         [24] 1971 	lcall	_delay_key
      0005B2                       1972 00136$:
      0005B2 30 B7 FD         [24] 1973 	jnb	_P3_7,00136$
      0005B5 12r05r0F         [24] 1974 	lcall	_delay_key
      0005B8 7E 08            [12] 1975 	mov	r6,#0x08
      0005BA 7F 00            [12] 1976 	mov	r7,#0x00
      0005BC                       1977 00140$:
                                   1978 ;	Key.h:65: return KeyNum;
      0005BC 8E 82            [24] 1979 	mov	dpl,r6
      0005BE 8F 83            [24] 1980 	mov	dph,r7
                                   1981 ;	Key.h:66: }
      0005C0 22               [24] 1982 	ret
                                   1983 ;------------------------------------------------------------
                                   1984 ;Allocation info for local variables in function 'Time_Init'
                                   1985 ;------------------------------------------------------------
                                   1986 ;	Timer0.h:46: void Time_Init()
                                   1987 ;	-----------------------------------------
                                   1988 ;	 function Time_Init
                                   1989 ;	-----------------------------------------
      0005C1                       1990 _Time_Init:
                                   1991 ;	Timer0.h:48: TMOD |= 0x01;//定时器模式  16位计数器
      0005C1 43 89 01         [24] 1992 	orl	_TMOD,#0x01
                                   1993 ;	Timer0.h:49: TF0 = 0;     //标志位
                                   1994 ;	assignBit
      0005C4 C2 8D            [12] 1995 	clr	_TF0
                                   1996 ;	Timer0.h:50: TR0 = 1;     //计时开始
                                   1997 ;	assignBit
      0005C6 D2 8C            [12] 1998 	setb	_TR0
                                   1999 ;	Timer0.h:51: TH0 = 0xfc;  //初值
      0005C8 75 8C FC         [24] 2000 	mov	_TH0,#0xfc
                                   2001 ;	Timer0.h:52: TL0 = 0x18;
      0005CB 75 8A 18         [24] 2002 	mov	_TL0,#0x18
                                   2003 ;	Timer0.h:54: EA = 1; //总中断开关
                                   2004 ;	assignBit
      0005CE D2 AF            [12] 2005 	setb	_EA
                                   2006 ;	Timer0.h:55: ET0 = 1; //分钟短开关
                                   2007 ;	assignBit
      0005D0 D2 A9            [12] 2008 	setb	_ET0
                                   2009 ;	Timer0.h:56: PT0 = 0; //终端优先级
                                   2010 ;	assignBit
      0005D2 C2 B9            [12] 2011 	clr	_PT0
                                   2012 ;	Timer0.h:57: }
      0005D4 22               [24] 2013 	ret
                                   2014 ;------------------------------------------------------------
                                   2015 ;Allocation info for local variables in function 'main'
                                   2016 ;------------------------------------------------------------
                                   2017 ;i                         Allocated with name '_main_i_458752_151'
                                   2018 ;------------------------------------------------------------
                                   2019 ;	Main.c:68: void main()
                                   2020 ;	-----------------------------------------
                                   2021 ;	 function main
                                   2022 ;	-----------------------------------------
      0005D5                       2023 _main:
                                   2024 ;	Main.c:71: LCD_Init();
      0005D5 12r01rD4         [24] 2025 	lcall	_LCD_Init
                                   2026 ;	Main.c:72: Time_Init();
      0005D8 12r05rC1         [24] 2027 	lcall	_Time_Init
                                   2028 ;	Main.c:73: CS88 = 0;
                                   2029 ;	assignBit
      0005DB C2 A2            [12] 2030 	clr	_P2_2
                                   2031 ;	Main.c:74: DU = 0;
                                   2032 ;	assignBit
      0005DD C2 A0            [12] 2033 	clr	_P2_0
                                   2034 ;	Main.c:75: WE = 0;
                                   2035 ;	assignBit
      0005DF C2 A1            [12] 2036 	clr	_P2_1
                                   2037 ;	Main.c:76: LCD_ShowString(1,1,"L:LWH"); // 在LCD上显示字符串
      0005E1 75*04r00         [24] 2038 	mov	_LCD_ShowString_PARM_3,#___str_0
      0005E4 75*05s00         [24] 2039 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_0 >> 8)
      0005E7 75*06 80         [24] 2040 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0005EA 75*03 01         [24] 2041 	mov	_LCD_ShowString_PARM_2,#0x01
      0005ED 75 82 01         [24] 2042 	mov	dpl,#0x01
      0005F0 12r02r16         [24] 2043 	lcall	_LCD_ShowString
                                   2044 ;	Main.c:77: LCD_ShowString(2,1,"C:CXL & JM");
      0005F3 75*04r06         [24] 2045 	mov	_LCD_ShowString_PARM_3,#___str_1
      0005F6 75*05s00         [24] 2046 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_1 >> 8)
      0005F9 75*06 80         [24] 2047 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0005FC 75*03 01         [24] 2048 	mov	_LCD_ShowString_PARM_2,#0x01
      0005FF 75 82 02         [24] 2049 	mov	dpl,#0x02
      000602 12r02r16         [24] 2050 	lcall	_LCD_ShowString
                                   2051 ;	Main.c:79: if(((AT24C02_ReadByte(0)|AT24C02_ReadByte(1) << 8) != 0) || ((AT24C02_ReadByte(2)|AT24C02_ReadByte(3) << 8) != 0))
      000605 75 82 00         [24] 2052 	mov	dpl,#0x00
      000608 12r04rD4         [24] 2053 	lcall	_AT24C02_ReadByte
      00060B AF 82            [24] 2054 	mov	r7,dpl
      00060D 75 82 01         [24] 2055 	mov	dpl,#0x01
      000610 C0 07            [24] 2056 	push	ar7
      000612 12r04rD4         [24] 2057 	lcall	_AT24C02_ReadByte
      000615 AE 82            [24] 2058 	mov	r6,dpl
      000617 D0 07            [24] 2059 	pop	ar7
      000619 8E 05            [24] 2060 	mov	ar5,r6
      00061B E4               [12] 2061 	clr	a
      00061C FE               [12] 2062 	mov	r6,a
      00061D FC               [12] 2063 	mov	r4,a
      00061E EF               [12] 2064 	mov	a,r7
      00061F 42 06            [12] 2065 	orl	ar6,a
      000621 EC               [12] 2066 	mov	a,r4
      000622 42 05            [12] 2067 	orl	ar5,a
      000624 EE               [12] 2068 	mov	a,r6
      000625 4D               [12] 2069 	orl	a,r5
      000626 70 23            [24] 2070 	jnz	00101$
      000628 75 82 02         [24] 2071 	mov	dpl,#0x02
      00062B 12r04rD4         [24] 2072 	lcall	_AT24C02_ReadByte
      00062E AF 82            [24] 2073 	mov	r7,dpl
      000630 75 82 03         [24] 2074 	mov	dpl,#0x03
      000633 C0 07            [24] 2075 	push	ar7
      000635 12r04rD4         [24] 2076 	lcall	_AT24C02_ReadByte
      000638 AE 82            [24] 2077 	mov	r6,dpl
      00063A D0 07            [24] 2078 	pop	ar7
      00063C 8E 05            [24] 2079 	mov	ar5,r6
      00063E E4               [12] 2080 	clr	a
      00063F FE               [12] 2081 	mov	r6,a
      000640 FC               [12] 2082 	mov	r4,a
      000641 EF               [12] 2083 	mov	a,r7
      000642 42 06            [12] 2084 	orl	ar6,a
      000644 EC               [12] 2085 	mov	a,r4
      000645 42 05            [12] 2086 	orl	ar5,a
      000647 EE               [12] 2087 	mov	a,r6
      000648 4D               [12] 2088 	orl	a,r5
      000649 60 09            [24] 2089 	jz	00193$
      00064B                       2090 00101$:
                                   2091 ;	Main.c:81: LCD_Init(); // 初始化LCD
      00064B 12r01rD4         [24] 2092 	lcall	_LCD_Init
                                   2093 ;	Main.c:82: FLAG = 1; // 设置标志位为1
      00064E 75*1C 01         [24] 2094 	mov	_FLAG,#0x01
      000651 75*1D 00         [24] 2095 	mov	(_FLAG + 1),#0x00
                                   2096 ;	Main.c:88: while(1)
      000654                       2097 00193$:
                                   2098 ;	Main.c:91: if(K1 >= 3)
      000654 C3               [12] 2099 	clr	c
      000655 E5*1A            [12] 2100 	mov	a,_K1
      000657 94 03            [12] 2101 	subb	a,#0x03
      000659 E5*1B            [12] 2102 	mov	a,(_K1 + 1)
      00065B 94 00            [12] 2103 	subb	a,#0x00
      00065D 50 03            [24] 2104 	jnc	00371$
      00065F 02r08r27         [24] 2105 	ljmp	00117$
      000662                       2106 00371$:
                                   2107 ;	Main.c:93: LCD_Init(); // 初始化LCD
      000662 12r01rD4         [24] 2108 	lcall	_LCD_Init
                                   2109 ;	Main.c:94: while(1)
      000665                       2110 00114$:
                                   2111 ;	Main.c:96: Num_Mat = MatrKey(); // 获取矩阵键盘按键值
      000665 12r00r29         [24] 2112 	lcall	_MatrKey
      000668 85 82*20         [24] 2113 	mov	_Num_Mat,dpl
                                   2114 ;	Main.c:98: LCD_ShowString(1,9,"       ");
      00066B 75*04r11         [24] 2115 	mov	_LCD_ShowString_PARM_3,#___str_2
      00066E 75*05s00         [24] 2116 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_2 >> 8)
      000671 75*06 80         [24] 2117 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000674 75*03 09         [24] 2118 	mov	_LCD_ShowString_PARM_2,#0x09
      000677 75 82 01         [24] 2119 	mov	dpl,#0x01
      00067A 12r02r16         [24] 2120 	lcall	_LCD_ShowString
                                   2121 ;	Main.c:99: LCD_ShowString(1,1,"MODE:S"); // 在LCD上显示字符串
      00067D 75*04r19         [24] 2122 	mov	_LCD_ShowString_PARM_3,#___str_3
      000680 75*05s00         [24] 2123 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_3 >> 8)
      000683 75*06 80         [24] 2124 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000686 75*03 01         [24] 2125 	mov	_LCD_ShowString_PARM_2,#0x01
      000689 75 82 01         [24] 2126 	mov	dpl,#0x01
      00068C 12r02r16         [24] 2127 	lcall	_LCD_ShowString
                                   2128 ;	Main.c:100: LCD_ShowString(2,1,"PD:"); // 在LCD上显示字符串
      00068F 75*04r20         [24] 2129 	mov	_LCD_ShowString_PARM_3,#___str_4
      000692 75*05s00         [24] 2130 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_4 >> 8)
      000695 75*06 80         [24] 2131 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000698 75*03 01         [24] 2132 	mov	_LCD_ShowString_PARM_2,#0x01
      00069B 75 82 02         [24] 2133 	mov	dpl,#0x02
      00069E 12r02r16         [24] 2134 	lcall	_LCD_ShowString
                                   2135 ;	Main.c:101: if(Num_Mat != 0 && Num_Mat <= 10)
      0006A1 E5*20            [12] 2136 	mov	a,_Num_Mat
      0006A3 70 03            [24] 2137 	jnz	00372$
      0006A5 02r07r6A         [24] 2138 	ljmp	00107$
      0006A8                       2139 00372$:
      0006A8 E5*20            [12] 2140 	mov	a,_Num_Mat
      0006AA 24 F5            [12] 2141 	add	a,#0xff - 0x0a
      0006AC 50 03            [24] 2142 	jnc	00373$
      0006AE 02r07r6A         [24] 2143 	ljmp	00107$
      0006B1                       2144 00373$:
                                   2145 ;	Main.c:103: if (cont < 6)
      0006B1 C3               [12] 2146 	clr	c
      0006B2 E5*1E            [12] 2147 	mov	a,_cont
      0006B4 94 06            [12] 2148 	subb	a,#0x06
      0006B6 E5*1F            [12] 2149 	mov	a,(_cont + 1)
      0006B8 94 00            [12] 2150 	subb	a,#0x00
      0006BA 40 03            [24] 2151 	jc	00374$
      0006BC 02r07r6A         [24] 2152 	ljmp	00107$
      0006BF                       2153 00374$:
                                   2154 ;	Main.c:105: PassWord_Set = PassWord_Set * 10 + Num_Mat%10;
      0006BF 85*21*00         [24] 2155 	mov	__mulint_PARM_2,_PassWord_Set
      0006C2 85*22*01         [24] 2156 	mov	(__mulint_PARM_2 + 1),(_PassWord_Set + 1)
      0006C5 90 00 0A         [24] 2157 	mov	dptr,#0x000a
      0006C8 12r00r00         [24] 2158 	lcall	__mulint
      0006CB AE 82            [24] 2159 	mov	r6,dpl
      0006CD AF 83            [24] 2160 	mov	r7,dph
      0006CF AC*20            [24] 2161 	mov	r4,_Num_Mat
      0006D1 7D 00            [12] 2162 	mov	r5,#0x00
      0006D3 75*00 0A         [24] 2163 	mov	__modsint_PARM_2,#0x0a
                                   2164 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      0006D6 8D*01            [24] 2165 	mov	(__modsint_PARM_2 + 1),r5
      0006D8 8C 82            [24] 2166 	mov	dpl,r4
      0006DA 8D 83            [24] 2167 	mov	dph,r5
      0006DC C0 07            [24] 2168 	push	ar7
      0006DE C0 06            [24] 2169 	push	ar6
      0006E0 12r00r00         [24] 2170 	lcall	__modsint
      0006E3 AC 82            [24] 2171 	mov	r4,dpl
      0006E5 AD 83            [24] 2172 	mov	r5,dph
      0006E7 D0 06            [24] 2173 	pop	ar6
      0006E9 D0 07            [24] 2174 	pop	ar7
      0006EB EC               [12] 2175 	mov	a,r4
      0006EC 2E               [12] 2176 	add	a,r6
      0006ED F5*21            [12] 2177 	mov	_PassWord_Set,a
      0006EF ED               [12] 2178 	mov	a,r5
      0006F0 3F               [12] 2179 	addc	a,r7
      0006F1 F5*22            [12] 2180 	mov	(_PassWord_Set + 1),a
                                   2181 ;	Main.c:106: PassWord_Set1_1 = PassWord_Set / 1000;
      0006F3 75*00 E8         [24] 2182 	mov	__divuint_PARM_2,#0xe8
      0006F6 75*01 03         [24] 2183 	mov	(__divuint_PARM_2 + 1),#0x03
      0006F9 85*21 82         [24] 2184 	mov	dpl,_PassWord_Set
      0006FC 85*22 83         [24] 2185 	mov	dph,(_PassWord_Set + 1)
      0006FF 12r00r00         [24] 2186 	lcall	__divuint
      000702 85 82*25         [24] 2187 	mov	_PassWord_Set1_1,dpl
      000705 85 83*26         [24] 2188 	mov	(_PassWord_Set1_1 + 1),dph
                                   2189 ;	Main.c:107: PassWord_Set1 = PassWord_Set1 *10 + PassWord_Set1_1;
      000708 85*23*00         [24] 2190 	mov	__mulint_PARM_2,_PassWord_Set1
      00070B 85*24*01         [24] 2191 	mov	(__mulint_PARM_2 + 1),(_PassWord_Set1 + 1)
      00070E 90 00 0A         [24] 2192 	mov	dptr,#0x000a
      000711 12r00r00         [24] 2193 	lcall	__mulint
      000714 E5 82            [12] 2194 	mov	a,dpl
      000716 85 83 F0         [24] 2195 	mov	b,dph
      000719 25*25            [12] 2196 	add	a,_PassWord_Set1_1
      00071B F5*23            [12] 2197 	mov	_PassWord_Set1,a
      00071D E5*26            [12] 2198 	mov	a,(_PassWord_Set1_1 + 1)
      00071F 35 F0            [12] 2199 	addc	a,b
      000721 F5*24            [12] 2200 	mov	(_PassWord_Set1 + 1),a
                                   2201 ;	Main.c:108: PassWord_Set2 = PassWord_Set % 1000;
      000723 75*00 E8         [24] 2202 	mov	__moduint_PARM_2,#0xe8
      000726 75*01 03         [24] 2203 	mov	(__moduint_PARM_2 + 1),#0x03
      000729 85*21 82         [24] 2204 	mov	dpl,_PassWord_Set
      00072C 85*22 83         [24] 2205 	mov	dph,(_PassWord_Set + 1)
      00072F 12r00r00         [24] 2206 	lcall	__moduint
      000732 85 82*27         [24] 2207 	mov	_PassWord_Set2,dpl
      000735 85 83*28         [24] 2208 	mov	(_PassWord_Set2 + 1),dph
                                   2209 ;	Main.c:109: PassWord_Set = PassWord_Set2;
      000738 85*27*21         [24] 2210 	mov	_PassWord_Set,_PassWord_Set2
      00073B 85*28*22         [24] 2211 	mov	(_PassWord_Set + 1),(_PassWord_Set2 + 1)
                                   2212 ;	Main.c:110: cont++;
      00073E 05*1E            [12] 2213 	inc	_cont
      000740 E4               [12] 2214 	clr	a
      000741 B5*1E 02         [24] 2215 	cjne	a,_cont,00375$
      000744 05*1F            [12] 2216 	inc	(_cont + 1)
      000746                       2217 00375$:
                                   2218 ;	Main.c:112: LCD_ShowNum(2,4,PassWord_Set1,3);
      000746 75*09 04         [24] 2219 	mov	_LCD_ShowNum_PARM_2,#0x04
      000749 85*23*0A         [24] 2220 	mov	_LCD_ShowNum_PARM_3,_PassWord_Set1
      00074C 85*24*0B         [24] 2221 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Set1 + 1)
      00074F 75*0C 03         [24] 2222 	mov	_LCD_ShowNum_PARM_4,#0x03
      000752 75 82 02         [24] 2223 	mov	dpl,#0x02
      000755 12r02r83         [24] 2224 	lcall	_LCD_ShowNum
                                   2225 ;	Main.c:113: LCD_ShowNum(2,7,PassWord_Set2,3);
      000758 75*09 07         [24] 2226 	mov	_LCD_ShowNum_PARM_2,#0x07
      00075B 85*27*0A         [24] 2227 	mov	_LCD_ShowNum_PARM_3,_PassWord_Set2
      00075E 85*28*0B         [24] 2228 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Set2 + 1)
      000761 75*0C 03         [24] 2229 	mov	_LCD_ShowNum_PARM_4,#0x03
      000764 75 82 02         [24] 2230 	mov	dpl,#0x02
      000767 12r02r83         [24] 2231 	lcall	_LCD_ShowNum
      00076A                       2232 00107$:
                                   2233 ;	Main.c:117: if(Num_Mat == 11)
      00076A 74 0B            [12] 2234 	mov	a,#0x0b
      00076C B5*20 78         [24] 2235 	cjne	a,_Num_Mat,00110$
                                   2236 ;	Main.c:119: LCD_Init(); // 初始化LCD
      00076F 12r01rD4         [24] 2237 	lcall	_LCD_Init
                                   2238 ;	Main.c:121: AT24C02_WriteByte(0,PassWord_Set1 % 256);// 低字节
      000772 AE*23            [24] 2239 	mov	r6,_PassWord_Set1
      000774 8E*19            [24] 2240 	mov	_AT24C02_WriteByte_PARM_2,r6
      000776 75 82 00         [24] 2241 	mov	dpl,#0x00
      000779 12r04rAB         [24] 2242 	lcall	_AT24C02_WriteByte
                                   2243 ;	Main.c:122: AT24C02_WriteByte(1,PassWord_Set1 / 256);// 高字节
      00077C AE*24            [24] 2244 	mov	r6,(_PassWord_Set1 + 1)
      00077E 8E*19            [24] 2245 	mov	_AT24C02_WriteByte_PARM_2,r6
      000780 75 82 01         [24] 2246 	mov	dpl,#0x01
      000783 12r04rAB         [24] 2247 	lcall	_AT24C02_WriteByte
                                   2248 ;	Main.c:124: AT24C02_WriteByte(2,PassWord_Set2 % 256);// 低字节
      000786 AE*27            [24] 2249 	mov	r6,_PassWord_Set2
      000788 8E*19            [24] 2250 	mov	_AT24C02_WriteByte_PARM_2,r6
      00078A 75 82 02         [24] 2251 	mov	dpl,#0x02
      00078D 12r04rAB         [24] 2252 	lcall	_AT24C02_WriteByte
                                   2253 ;	Main.c:125: AT24C02_WriteByte(3,PassWord_Set2 / 256);
      000790 AE*28            [24] 2254 	mov	r6,(_PassWord_Set2 + 1)
      000792 8E*19            [24] 2255 	mov	_AT24C02_WriteByte_PARM_2,r6
      000794 75 82 03         [24] 2256 	mov	dpl,#0x03
      000797 12r04rAB         [24] 2257 	lcall	_AT24C02_WriteByte
                                   2258 ;	Main.c:126: LCD_ShowString(2,4,"Success"); // 在LCD上显示字符串
      00079A 75*04r24         [24] 2259 	mov	_LCD_ShowString_PARM_3,#___str_5
      00079D 75*05s00         [24] 2260 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_5 >> 8)
      0007A0 75*06 80         [24] 2261 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0007A3 75*03 04         [24] 2262 	mov	_LCD_ShowString_PARM_2,#0x04
      0007A6 75 82 02         [24] 2263 	mov	dpl,#0x02
      0007A9 12r02r16         [24] 2264 	lcall	_LCD_ShowString
                                   2265 ;	Main.c:127: DelayS(1); // 延时1秒
      0007AC 90 00 01         [24] 2266 	mov	dptr,#0x0001
      0007AF 12r01r4B         [24] 2267 	lcall	_DelayS
                                   2268 ;	Main.c:128: LCD_ShowString(2,1,"              "); // 在LCD上显示空格字符
      0007B2 75*04r2C         [24] 2269 	mov	_LCD_ShowString_PARM_3,#___str_6
      0007B5 75*05s00         [24] 2270 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_6 >> 8)
      0007B8 75*06 80         [24] 2271 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0007BB 75*03 01         [24] 2272 	mov	_LCD_ShowString_PARM_2,#0x01
      0007BE 75 82 02         [24] 2273 	mov	dpl,#0x02
      0007C1 12r02r16         [24] 2274 	lcall	_LCD_ShowString
                                   2275 ;	Main.c:129: LCD_Init(); // 初始化LCD
      0007C4 12r01rD4         [24] 2276 	lcall	_LCD_Init
                                   2277 ;	Main.c:130: PassWord_Set = 0; // 清零密码
      0007C7 E4               [12] 2278 	clr	a
      0007C8 F5*21            [12] 2279 	mov	_PassWord_Set,a
      0007CA F5*22            [12] 2280 	mov	(_PassWord_Set + 1),a
                                   2281 ;	Main.c:131: PassWord_Set1 = 0; // 清零密码
      0007CC F5*23            [12] 2282 	mov	_PassWord_Set1,a
      0007CE F5*24            [12] 2283 	mov	(_PassWord_Set1 + 1),a
                                   2284 ;	Main.c:132: PassWord_Set2 = 0; // 清零密码
      0007D0 F5*27            [12] 2285 	mov	_PassWord_Set2,a
      0007D2 F5*28            [12] 2286 	mov	(_PassWord_Set2 + 1),a
                                   2287 ;	Main.c:133: FLAG = 1; // 设置标志位为1
      0007D4 75*1C 01         [24] 2288 	mov	_FLAG,#0x01
                                   2289 ;	1-genFromRTrack replaced	mov	(_FLAG + 1),#0x00
      0007D7 F5*1D            [12] 2290 	mov	(_FLAG + 1),a
                                   2291 ;	Main.c:134: cont = 0; // 计数清零
      0007D9 F5*1E            [12] 2292 	mov	_cont,a
      0007DB F5*1F            [12] 2293 	mov	(_cont + 1),a
                                   2294 ;	Main.c:135: K1 = 0; // K1计数清零
      0007DD F5*1A            [12] 2295 	mov	_K1,a
      0007DF F5*1B            [12] 2296 	mov	(_K1 + 1),a
                                   2297 ;	Main.c:136: FLAG_M = 0; // 状态标志位清零
      0007E1 F5*39            [12] 2298 	mov	_FLAG_M,a
      0007E3 F5*3A            [12] 2299 	mov	(_FLAG_M + 1),a
                                   2300 ;	Main.c:137: break; // 退出循环
      0007E5 80 40            [24] 2301 	sjmp	00117$
      0007E7                       2302 00110$:
                                   2303 ;	Main.c:140: if(Num_Mat == 12)
      0007E7 74 0C            [12] 2304 	mov	a,#0x0c
      0007E9 B5*20 02         [24] 2305 	cjne	a,_Num_Mat,00378$
      0007EC 80 03            [24] 2306 	sjmp	00379$
      0007EE                       2307 00378$:
      0007EE 02r06r65         [24] 2308 	ljmp	00114$
      0007F1                       2309 00379$:
                                   2310 ;	Main.c:142: cont = 0; // 计数清零
      0007F1 E4               [12] 2311 	clr	a
      0007F2 F5*1E            [12] 2312 	mov	_cont,a
      0007F4 F5*1F            [12] 2313 	mov	(_cont + 1),a
                                   2314 ;	Main.c:143: PassWord_Set = 0; // 清零密码
      0007F6 F5*21            [12] 2315 	mov	_PassWord_Set,a
      0007F8 F5*22            [12] 2316 	mov	(_PassWord_Set + 1),a
                                   2317 ;	Main.c:144: PassWord_Set1 = 0; // 清零密码
      0007FA F5*23            [12] 2318 	mov	_PassWord_Set1,a
      0007FC F5*24            [12] 2319 	mov	(_PassWord_Set1 + 1),a
                                   2320 ;	Main.c:145: PassWord_Set2 = 0;
      0007FE F5*27            [12] 2321 	mov	_PassWord_Set2,a
      000800 F5*28            [12] 2322 	mov	(_PassWord_Set2 + 1),a
                                   2323 ;	Main.c:146: LCD_ShowNum(2,4,PassWord_Set1,3);
      000802 75*09 04         [24] 2324 	mov	_LCD_ShowNum_PARM_2,#0x04
      000805 F5*0A            [12] 2325 	mov	_LCD_ShowNum_PARM_3,a
      000807 F5*0B            [12] 2326 	mov	(_LCD_ShowNum_PARM_3 + 1),a
      000809 75*0C 03         [24] 2327 	mov	_LCD_ShowNum_PARM_4,#0x03
      00080C 75 82 02         [24] 2328 	mov	dpl,#0x02
      00080F 12r02r83         [24] 2329 	lcall	_LCD_ShowNum
                                   2330 ;	Main.c:147: LCD_ShowNum(2,7,PassWord_Set2,3);// 在LCD上显示数字
      000812 75*09 07         [24] 2331 	mov	_LCD_ShowNum_PARM_2,#0x07
      000815 85*27*0A         [24] 2332 	mov	_LCD_ShowNum_PARM_3,_PassWord_Set2
      000818 85*28*0B         [24] 2333 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Set2 + 1)
      00081B 75*0C 03         [24] 2334 	mov	_LCD_ShowNum_PARM_4,#0x03
      00081E 75 82 02         [24] 2335 	mov	dpl,#0x02
      000821 12r02r83         [24] 2336 	lcall	_LCD_ShowNum
      000824 02r06r65         [24] 2337 	ljmp	00114$
      000827                       2338 00117$:
                                   2339 ;	Main.c:152: Num_Mat = MatrKey();
      000827 12r00r29         [24] 2340 	lcall	_MatrKey
      00082A 85 82*20         [24] 2341 	mov	_Num_Mat,dpl
                                   2342 ;	Main.c:154: if(FLAG == 1)
      00082D 74 01            [12] 2343 	mov	a,#0x01
      00082F B5*1C 06         [24] 2344 	cjne	a,_FLAG,00380$
      000832 14               [12] 2345 	dec	a
      000833 B5*1D 02         [24] 2346 	cjne	a,(_FLAG + 1),00380$
      000836 80 03            [24] 2347 	sjmp	00381$
      000838                       2348 00380$:
      000838 02r06r54         [24] 2349 	ljmp	00193$
      00083B                       2350 00381$:
                                   2351 ;	Main.c:156: LCD_ShowString(2,1,"PD:");
      00083B 75*04r20         [24] 2352 	mov	_LCD_ShowString_PARM_3,#___str_4
      00083E 75*05s00         [24] 2353 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_4 >> 8)
      000841 75*06 80         [24] 2354 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000844 75*03 01         [24] 2355 	mov	_LCD_ShowString_PARM_2,#0x01
      000847 75 82 02         [24] 2356 	mov	dpl,#0x02
      00084A 12r02r16         [24] 2357 	lcall	_LCD_ShowString
                                   2358 ;	Main.c:160: PassWord1 = (AT24C02_ReadByte(0)|AT24C02_ReadByte(1) << 8); // 读取EEPROM中的密码
      00084D 75 82 00         [24] 2359 	mov	dpl,#0x00
      000850 12r04rD4         [24] 2360 	lcall	_AT24C02_ReadByte
      000853 AF 82            [24] 2361 	mov	r7,dpl
      000855 75 82 01         [24] 2362 	mov	dpl,#0x01
      000858 C0 07            [24] 2363 	push	ar7
      00085A 12r04rD4         [24] 2364 	lcall	_AT24C02_ReadByte
      00085D AE 82            [24] 2365 	mov	r6,dpl
      00085F D0 07            [24] 2366 	pop	ar7
      000861 8E 05            [24] 2367 	mov	ar5,r6
      000863 E4               [12] 2368 	clr	a
      000864 FC               [12] 2369 	mov	r4,a
      000865 4F               [12] 2370 	orl	a,r7
      000866 F5*29            [12] 2371 	mov	_PassWord1,a
      000868 ED               [12] 2372 	mov	a,r5
      000869 4C               [12] 2373 	orl	a,r4
      00086A F5*2A            [12] 2374 	mov	(_PassWord1 + 1),a
                                   2375 ;	Main.c:161: PassWord2 = (AT24C02_ReadByte(2)|AT24C02_ReadByte(3) << 8); 
      00086C 75 82 02         [24] 2376 	mov	dpl,#0x02
      00086F 12r04rD4         [24] 2377 	lcall	_AT24C02_ReadByte
      000872 AF 82            [24] 2378 	mov	r7,dpl
      000874 75 82 03         [24] 2379 	mov	dpl,#0x03
      000877 C0 07            [24] 2380 	push	ar7
      000879 12r04rD4         [24] 2381 	lcall	_AT24C02_ReadByte
      00087C AE 82            [24] 2382 	mov	r6,dpl
      00087E D0 07            [24] 2383 	pop	ar7
      000880 8E 05            [24] 2384 	mov	ar5,r6
      000882 E4               [12] 2385 	clr	a
      000883 FC               [12] 2386 	mov	r4,a
      000884 4F               [12] 2387 	orl	a,r7
      000885 F5*2B            [12] 2388 	mov	_PassWord2,a
      000887 ED               [12] 2389 	mov	a,r5
      000888 4C               [12] 2390 	orl	a,r4
      000889 F5*2C            [12] 2391 	mov	(_PassWord2 + 1),a
                                   2392 ;	Main.c:163: if(Num_Mat == 13)
      00088B 74 0D            [12] 2393 	mov	a,#0x0d
      00088D B5*20 08         [24] 2394 	cjne	a,_Num_Mat,00119$
                                   2395 ;	Main.c:165: FLAG_M++;
      000890 05*39            [12] 2396 	inc	_FLAG_M
      000892 E4               [12] 2397 	clr	a
      000893 B5*39 02         [24] 2398 	cjne	a,_FLAG_M,00384$
      000896 05*3A            [12] 2399 	inc	(_FLAG_M + 1)
      000898                       2400 00384$:
      000898                       2401 00119$:
                                   2402 ;	Main.c:167: if(FLAG_M > 100)
      000898 C3               [12] 2403 	clr	c
      000899 74 64            [12] 2404 	mov	a,#0x64
      00089B 95*39            [12] 2405 	subb	a,_FLAG_M
      00089D E4               [12] 2406 	clr	a
      00089E 95*3A            [12] 2407 	subb	a,(_FLAG_M + 1)
      0008A0 50 05            [24] 2408 	jnc	00121$
                                   2409 ;	Main.c:169: FLAG_M = 0;
      0008A2 E4               [12] 2410 	clr	a
      0008A3 F5*39            [12] 2411 	mov	_FLAG_M,a
      0008A5 F5*3A            [12] 2412 	mov	(_FLAG_M + 1),a
      0008A7                       2413 00121$:
                                   2414 ;	Main.c:171: if(FLAG_M%2 == 1)
      0008A7 74 01            [12] 2415 	mov	a,#0x01
      0008A9 55*39            [12] 2416 	anl	a,_FLAG_M
      0008AB FE               [12] 2417 	mov	r6,a
      0008AC 7F 00            [12] 2418 	mov	r7,#0x00
      0008AE BE 01 05         [24] 2419 	cjne	r6,#0x01,00386$
      0008B1 BF 00 02         [24] 2420 	cjne	r7,#0x00,00386$
      0008B4 80 03            [24] 2421 	sjmp	00387$
      0008B6                       2422 00386$:
      0008B6 02r0BrBA         [24] 2423 	ljmp	00188$
      0008B9                       2424 00387$:
                                   2425 ;	Main.c:173: LCD_ShowString(1,9,"     ");
      0008B9 75*04r3B         [24] 2426 	mov	_LCD_ShowString_PARM_3,#___str_7
      0008BC 75*05s00         [24] 2427 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_7 >> 8)
      0008BF 75*06 80         [24] 2428 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0008C2 75*03 09         [24] 2429 	mov	_LCD_ShowString_PARM_2,#0x09
      0008C5 75 82 01         [24] 2430 	mov	dpl,#0x01
      0008C8 12r02r16         [24] 2431 	lcall	_LCD_ShowString
                                   2432 ;	Main.c:174: LCD_ShowString(1,14," ");
      0008CB 75*04r41         [24] 2433 	mov	_LCD_ShowString_PARM_3,#___str_8
      0008CE 75*05s00         [24] 2434 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_8 >> 8)
      0008D1 75*06 80         [24] 2435 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0008D4 75*03 0E         [24] 2436 	mov	_LCD_ShowString_PARM_2,#0x0e
      0008D7 75 82 01         [24] 2437 	mov	dpl,#0x01
      0008DA 12r02r16         [24] 2438 	lcall	_LCD_ShowString
                                   2439 ;	Main.c:175: LCD_ShowString(2,15,"  ");
      0008DD 75*04r43         [24] 2440 	mov	_LCD_ShowString_PARM_3,#___str_9
      0008E0 75*05s00         [24] 2441 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_9 >> 8)
      0008E3 75*06 80         [24] 2442 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0008E6 75*03 0F         [24] 2443 	mov	_LCD_ShowString_PARM_2,#0x0f
      0008E9 75 82 02         [24] 2444 	mov	dpl,#0x02
      0008EC 12r02r16         [24] 2445 	lcall	_LCD_ShowString
                                   2446 ;	Main.c:176: LCD_ShowString(2,9," "); // 在LCD上显示字符串
      0008EF 75*04r41         [24] 2447 	mov	_LCD_ShowString_PARM_3,#___str_8
      0008F2 75*05s00         [24] 2448 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_8 >> 8)
      0008F5 75*06 80         [24] 2449 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0008F8 75*03 09         [24] 2450 	mov	_LCD_ShowString_PARM_2,#0x09
      0008FB 75 82 02         [24] 2451 	mov	dpl,#0x02
      0008FE 12r02r16         [24] 2452 	lcall	_LCD_ShowString
                                   2453 ;	Main.c:179: LCD_ShowString(2,1,"PD:");
      000901 75*04r20         [24] 2454 	mov	_LCD_ShowString_PARM_3,#___str_4
      000904 75*05s00         [24] 2455 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_4 >> 8)
      000907 75*06 80         [24] 2456 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      00090A 75*03 01         [24] 2457 	mov	_LCD_ShowString_PARM_2,#0x01
      00090D 75 82 02         [24] 2458 	mov	dpl,#0x02
      000910 12r02r16         [24] 2459 	lcall	_LCD_ShowString
                                   2460 ;	Main.c:180: LCD_ShowString(1,1,"MODE:M"); // 在LCD上显示字符串
      000913 75*04r46         [24] 2461 	mov	_LCD_ShowString_PARM_3,#___str_10
      000916 75*05s00         [24] 2462 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_10 >> 8)
      000919 75*06 80         [24] 2463 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      00091C 75*03 01         [24] 2464 	mov	_LCD_ShowString_PARM_2,#0x01
      00091F 75 82 01         [24] 2465 	mov	dpl,#0x01
      000922 12r02r16         [24] 2466 	lcall	_LCD_ShowString
                                   2467 ;	Main.c:181: if(Num_Mat != 0 && Num_Mat <= 10)
      000925 E5*20            [12] 2468 	mov	a,_Num_Mat
      000927 70 03            [24] 2469 	jnz	00388$
      000929 02r0Ar2F         [24] 2470 	ljmp	00132$
      00092C                       2471 00388$:
      00092C E5*20            [12] 2472 	mov	a,_Num_Mat
      00092E 24 F5            [12] 2473 	add	a,#0xff - 0x0a
      000930 50 03            [24] 2474 	jnc	00389$
      000932 02r0Ar2F         [24] 2475 	ljmp	00132$
      000935                       2476 00389$:
                                   2477 ;	Main.c:184: if(cont < 5)
      000935 C3               [12] 2478 	clr	c
      000936 E5*1E            [12] 2479 	mov	a,_cont
      000938 94 05            [12] 2480 	subb	a,#0x05
      00093A E5*1F            [12] 2481 	mov	a,(_cont + 1)
      00093C 94 00            [12] 2482 	subb	a,#0x00
      00093E 50 38            [24] 2483 	jnc	00123$
                                   2484 ;	Main.c:186: PassWord_Ent *= 10;
      000940 85*2D*00         [24] 2485 	mov	__mulint_PARM_2,_PassWord_Ent
      000943 85*2E*01         [24] 2486 	mov	(__mulint_PARM_2 + 1),(_PassWord_Ent + 1)
      000946 90 00 0A         [24] 2487 	mov	dptr,#0x000a
      000949 12r00r00         [24] 2488 	lcall	__mulint
      00094C 85 82*2D         [24] 2489 	mov	_PassWord_Ent,dpl
      00094F 85 83*2E         [24] 2490 	mov	(_PassWord_Ent + 1),dph
                                   2491 ;	Main.c:187: PassWord_Ent += Num_Mat%10; // 更新密码值
      000952 AE*20            [24] 2492 	mov	r6,_Num_Mat
      000954 7F 00            [12] 2493 	mov	r7,#0x00
      000956 75*00 0A         [24] 2494 	mov	__modsint_PARM_2,#0x0a
                                   2495 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000959 8F*01            [24] 2496 	mov	(__modsint_PARM_2 + 1),r7
      00095B 8E 82            [24] 2497 	mov	dpl,r6
      00095D 8F 83            [24] 2498 	mov	dph,r7
      00095F 12r00r00         [24] 2499 	lcall	__modsint
      000962 AE 82            [24] 2500 	mov	r6,dpl
      000964 AF 83            [24] 2501 	mov	r7,dph
      000966 EE               [12] 2502 	mov	a,r6
      000967 25*2D            [12] 2503 	add	a,_PassWord_Ent
      000969 F5*2D            [12] 2504 	mov	_PassWord_Ent,a
      00096B EF               [12] 2505 	mov	a,r7
      00096C 35*2E            [12] 2506 	addc	a,(_PassWord_Ent + 1)
      00096E F5*2E            [12] 2507 	mov	(_PassWord_Ent + 1),a
                                   2508 ;	Main.c:188: cont++; // 计数加一
      000970 05*1E            [12] 2509 	inc	_cont
      000972 E4               [12] 2510 	clr	a
      000973 B5*1E 02         [24] 2511 	cjne	a,_cont,00391$
      000976 05*1F            [12] 2512 	inc	(_cont + 1)
      000978                       2513 00391$:
      000978                       2514 00123$:
                                   2515 ;	Main.c:190: LCD_ShowNum(2,4,PassWord_Ent,5); // 在LCD上显示数字
      000978 75*09 04         [24] 2516 	mov	_LCD_ShowNum_PARM_2,#0x04
      00097B 85*2D*0A         [24] 2517 	mov	_LCD_ShowNum_PARM_3,_PassWord_Ent
      00097E 85*2E*0B         [24] 2518 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Ent + 1)
      000981 75*0C 05         [24] 2519 	mov	_LCD_ShowNum_PARM_4,#0x05
      000984 75 82 02         [24] 2520 	mov	dpl,#0x02
      000987 12r02r83         [24] 2521 	lcall	_LCD_ShowNum
                                   2522 ;	Main.c:191: DelayMs(700);
      00098A 90 02 BC         [24] 2523 	mov	dptr,#0x02bc
      00098D 12r01r7B         [24] 2524 	lcall	_DelayMs
                                   2525 ;	Main.c:193: switch(cont)
      000990 C3               [12] 2526 	clr	c
      000991 74 05            [12] 2527 	mov	a,#0x05
      000993 95*1E            [12] 2528 	subb	a,_cont
      000995 E4               [12] 2529 	clr	a
      000996 95*1F            [12] 2530 	subb	a,(_cont + 1)
      000998 50 03            [24] 2531 	jnc	00392$
      00099A 02r0Ar2F         [24] 2532 	ljmp	00132$
      00099D                       2533 00392$:
      00099D E5*1E            [12] 2534 	mov	a,_cont
      00099F 75 F0 03         [24] 2535 	mov	b,#0x03
      0009A2 A4               [48] 2536 	mul	ab
      0009A3 90r09rA7         [24] 2537 	mov	dptr,#00393$
      0009A6 73               [24] 2538 	jmp	@a+dptr
      0009A7                       2539 00393$:
      0009A7 02r09rB9         [24] 2540 	ljmp	00124$
      0009AA 02r09rCD         [24] 2541 	ljmp	00125$
      0009AD 02r09rE1         [24] 2542 	ljmp	00126$
      0009B0 02r09rF5         [24] 2543 	ljmp	00127$
      0009B3 02r0Ar09         [24] 2544 	ljmp	00128$
      0009B6 02r0Ar1D         [24] 2545 	ljmp	00129$
                                   2546 ;	Main.c:195: case 0:LCD_ShowString(2,4,"00000");break;
      0009B9                       2547 00124$:
      0009B9 75*04r4D         [24] 2548 	mov	_LCD_ShowString_PARM_3,#___str_11
      0009BC 75*05s00         [24] 2549 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_11 >> 8)
      0009BF 75*06 80         [24] 2550 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0009C2 75*03 04         [24] 2551 	mov	_LCD_ShowString_PARM_2,#0x04
      0009C5 75 82 02         [24] 2552 	mov	dpl,#0x02
      0009C8 12r02r16         [24] 2553 	lcall	_LCD_ShowString
                                   2554 ;	Main.c:196: case 1:LCD_ShowString(2,4,"0000*");break;
      0009CB 80 62            [24] 2555 	sjmp	00132$
      0009CD                       2556 00125$:
      0009CD 75*04r53         [24] 2557 	mov	_LCD_ShowString_PARM_3,#___str_12
      0009D0 75*05s00         [24] 2558 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_12 >> 8)
      0009D3 75*06 80         [24] 2559 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0009D6 75*03 04         [24] 2560 	mov	_LCD_ShowString_PARM_2,#0x04
      0009D9 75 82 02         [24] 2561 	mov	dpl,#0x02
      0009DC 12r02r16         [24] 2562 	lcall	_LCD_ShowString
                                   2563 ;	Main.c:197: case 2:LCD_ShowString(2,4,"000**");break;
      0009DF 80 4E            [24] 2564 	sjmp	00132$
      0009E1                       2565 00126$:
      0009E1 75*04r59         [24] 2566 	mov	_LCD_ShowString_PARM_3,#___str_13
      0009E4 75*05s00         [24] 2567 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_13 >> 8)
      0009E7 75*06 80         [24] 2568 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0009EA 75*03 04         [24] 2569 	mov	_LCD_ShowString_PARM_2,#0x04
      0009ED 75 82 02         [24] 2570 	mov	dpl,#0x02
      0009F0 12r02r16         [24] 2571 	lcall	_LCD_ShowString
                                   2572 ;	Main.c:198: case 3:LCD_ShowString(2,4,"00***");break;
      0009F3 80 3A            [24] 2573 	sjmp	00132$
      0009F5                       2574 00127$:
      0009F5 75*04r5F         [24] 2575 	mov	_LCD_ShowString_PARM_3,#___str_14
      0009F8 75*05s00         [24] 2576 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_14 >> 8)
      0009FB 75*06 80         [24] 2577 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      0009FE 75*03 04         [24] 2578 	mov	_LCD_ShowString_PARM_2,#0x04
      000A01 75 82 02         [24] 2579 	mov	dpl,#0x02
      000A04 12r02r16         [24] 2580 	lcall	_LCD_ShowString
                                   2581 ;	Main.c:199: case 4:LCD_ShowString(2,4,"0****");break;
      000A07 80 26            [24] 2582 	sjmp	00132$
      000A09                       2583 00128$:
      000A09 75*04r65         [24] 2584 	mov	_LCD_ShowString_PARM_3,#___str_15
      000A0C 75*05s00         [24] 2585 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_15 >> 8)
      000A0F 75*06 80         [24] 2586 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000A12 75*03 04         [24] 2587 	mov	_LCD_ShowString_PARM_2,#0x04
      000A15 75 82 02         [24] 2588 	mov	dpl,#0x02
      000A18 12r02r16         [24] 2589 	lcall	_LCD_ShowString
                                   2590 ;	Main.c:200: case 5:LCD_ShowString(2,4,"*****");break;
      000A1B 80 12            [24] 2591 	sjmp	00132$
      000A1D                       2592 00129$:
      000A1D 75*04r6B         [24] 2593 	mov	_LCD_ShowString_PARM_3,#___str_16
      000A20 75*05s00         [24] 2594 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_16 >> 8)
      000A23 75*06 80         [24] 2595 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000A26 75*03 04         [24] 2596 	mov	_LCD_ShowString_PARM_2,#0x04
      000A29 75 82 02         [24] 2597 	mov	dpl,#0x02
      000A2C 12r02r16         [24] 2598 	lcall	_LCD_ShowString
                                   2599 ;	Main.c:201: }
      000A2F                       2600 00132$:
                                   2601 ;	Main.c:205: if(Num_Mat == 11)
      000A2F 74 0B            [12] 2602 	mov	a,#0x0b
      000A31 B5*20 02         [24] 2603 	cjne	a,_Num_Mat,00394$
      000A34 80 03            [24] 2604 	sjmp	00395$
      000A36                       2605 00394$:
      000A36 02r0Br94         [24] 2606 	ljmp	00154$
      000A39                       2607 00395$:
                                   2608 ;	Main.c:208: if(PassWord_Ent == 33333)
      000A39 74 35            [12] 2609 	mov	a,#0x35
      000A3B B5*2D 07         [24] 2610 	cjne	a,_PassWord_Ent,00396$
      000A3E 74 82            [12] 2611 	mov	a,#0x82
      000A40 B5*2E 02         [24] 2612 	cjne	a,(_PassWord_Ent + 1),00396$
      000A43 80 03            [24] 2613 	sjmp	00397$
      000A45                       2614 00396$:
      000A45 02r0Br94         [24] 2615 	ljmp	00154$
      000A48                       2616 00397$:
                                   2617 ;	Main.c:211: cont = 0; // 计数清零
      000A48 E4               [12] 2618 	clr	a
      000A49 F5*1E            [12] 2619 	mov	_cont,a
      000A4B F5*1F            [12] 2620 	mov	(_cont + 1),a
                                   2621 ;	Main.c:212: PassWord_Ent = 0; // 清零密码
      000A4D F5*2D            [12] 2622 	mov	_PassWord_Ent,a
      000A4F F5*2E            [12] 2623 	mov	(_PassWord_Ent + 1),a
                                   2624 ;	Main.c:218: while(1)
      000A51                       2625 00149$:
                                   2626 ;	Main.c:221: Num_Mat = MatrKey(); // 获取矩阵键盘按键值
      000A51 12r00r29         [24] 2627 	lcall	_MatrKey
      000A54 85 82*20         [24] 2628 	mov	_Num_Mat,dpl
                                   2629 ;	Main.c:222: if(Num_Mat == 14)
      000A57 74 0E            [12] 2630 	mov	a,#0x0e
      000A59 B5*20 08         [24] 2631 	cjne	a,_Num_Mat,00135$
                                   2632 ;	Main.c:224: i++;
      000A5C 05*3D            [12] 2633 	inc	_main_i_458752_151
      000A5E E4               [12] 2634 	clr	a
      000A5F B5*3D 02         [24] 2635 	cjne	a,_main_i_458752_151,00400$
      000A62 05*3E            [12] 2636 	inc	(_main_i_458752_151 + 1)
      000A64                       2637 00400$:
      000A64                       2638 00135$:
                                   2639 ;	Main.c:226: if(i > 2)
      000A64 C3               [12] 2640 	clr	c
      000A65 74 02            [12] 2641 	mov	a,#0x02
      000A67 95*3D            [12] 2642 	subb	a,_main_i_458752_151
      000A69 E4               [12] 2643 	clr	a
      000A6A 95*3E            [12] 2644 	subb	a,(_main_i_458752_151 + 1)
      000A6C 50 05            [24] 2645 	jnc	00137$
                                   2646 ;	Main.c:228: i = 0;
      000A6E E4               [12] 2647 	clr	a
      000A6F F5*3D            [12] 2648 	mov	_main_i_458752_151,a
      000A71 F5*3E            [12] 2649 	mov	(_main_i_458752_151 + 1),a
      000A73                       2650 00137$:
                                   2651 ;	Main.c:230: switch (i)
      000A73 E4               [12] 2652 	clr	a
      000A74 B5*3D 05         [24] 2653 	cjne	a,_main_i_458752_151,00402$
      000A77 B5*3E 02         [24] 2654 	cjne	a,(_main_i_458752_151 + 1),00402$
      000A7A 80 18            [24] 2655 	sjmp	00138$
      000A7C                       2656 00402$:
      000A7C 74 01            [12] 2657 	mov	a,#0x01
      000A7E B5*3D 06         [24] 2658 	cjne	a,_main_i_458752_151,00403$
      000A81 14               [12] 2659 	dec	a
      000A82 B5*3E 02         [24] 2660 	cjne	a,(_main_i_458752_151 + 1),00403$
      000A85 80 21            [24] 2661 	sjmp	00139$
      000A87                       2662 00403$:
      000A87 74 02            [12] 2663 	mov	a,#0x02
      000A89 B5*3D 06         [24] 2664 	cjne	a,_main_i_458752_151,00404$
      000A8C E4               [12] 2665 	clr	a
      000A8D B5*3E 02         [24] 2666 	cjne	a,(_main_i_458752_151 + 1),00404$
      000A90 80 2A            [24] 2667 	sjmp	00140$
      000A92                       2668 00404$:
                                   2669 ;	Main.c:232: case 0:LCD_ShowString(1,10,"DEL PD");break;
      000A92 80 3A            [24] 2670 	sjmp	00141$
      000A94                       2671 00138$:
      000A94 75*04r71         [24] 2672 	mov	_LCD_ShowString_PARM_3,#___str_17
      000A97 75*05s00         [24] 2673 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_17 >> 8)
      000A9A 75*06 80         [24] 2674 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000A9D 75*03 0A         [24] 2675 	mov	_LCD_ShowString_PARM_2,#0x0a
      000AA0 75 82 01         [24] 2676 	mov	dpl,#0x01
      000AA3 12r02r16         [24] 2677 	lcall	_LCD_ShowString
                                   2678 ;	Main.c:233: case 1:LCD_ShowString(1,10,"RES PD");break;
      000AA6 80 26            [24] 2679 	sjmp	00141$
      000AA8                       2680 00139$:
      000AA8 75*04r78         [24] 2681 	mov	_LCD_ShowString_PARM_3,#___str_18
      000AAB 75*05s00         [24] 2682 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_18 >> 8)
      000AAE 75*06 80         [24] 2683 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000AB1 75*03 0A         [24] 2684 	mov	_LCD_ShowString_PARM_2,#0x0a
      000AB4 75 82 01         [24] 2685 	mov	dpl,#0x01
      000AB7 12r02r16         [24] 2686 	lcall	_LCD_ShowString
                                   2687 ;	Main.c:234: case 2:LCD_ShowString(1,10,"OPE DR");break;
      000ABA 80 12            [24] 2688 	sjmp	00141$
      000ABC                       2689 00140$:
      000ABC 75*04r7F         [24] 2690 	mov	_LCD_ShowString_PARM_3,#___str_19
      000ABF 75*05s00         [24] 2691 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_19 >> 8)
      000AC2 75*06 80         [24] 2692 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000AC5 75*03 0A         [24] 2693 	mov	_LCD_ShowString_PARM_2,#0x0a
      000AC8 75 82 01         [24] 2694 	mov	dpl,#0x01
      000ACB 12r02r16         [24] 2695 	lcall	_LCD_ShowString
                                   2696 ;	Main.c:235: }
      000ACE                       2697 00141$:
                                   2698 ;	Main.c:236: if(Num_Mat == 15)
      000ACE 74 0F            [12] 2699 	mov	a,#0x0f
      000AD0 B5*20 02         [24] 2700 	cjne	a,_Num_Mat,00405$
      000AD3 80 03            [24] 2701 	sjmp	00406$
      000AD5                       2702 00405$:
      000AD5 02r0Ar51         [24] 2703 	ljmp	00149$
      000AD8                       2704 00406$:
                                   2705 ;	Main.c:238: switch (i)
      000AD8 E4               [12] 2706 	clr	a
      000AD9 B5*3D 05         [24] 2707 	cjne	a,_main_i_458752_151,00407$
      000ADC B5*3E 02         [24] 2708 	cjne	a,(_main_i_458752_151 + 1),00407$
      000ADF 80 19            [24] 2709 	sjmp	00142$
      000AE1                       2710 00407$:
      000AE1 74 01            [12] 2711 	mov	a,#0x01
      000AE3 B5*3D 06         [24] 2712 	cjne	a,_main_i_458752_151,00408$
      000AE6 14               [12] 2713 	dec	a
      000AE7 B5*3E 02         [24] 2714 	cjne	a,(_main_i_458752_151 + 1),00408$
      000AEA 80 4F            [24] 2715 	sjmp	00143$
      000AEC                       2716 00408$:
      000AEC 74 02            [12] 2717 	mov	a,#0x02
      000AEE B5*3D 06         [24] 2718 	cjne	a,_main_i_458752_151,00409$
      000AF1 E4               [12] 2719 	clr	a
      000AF2 B5*3E 02         [24] 2720 	cjne	a,(_main_i_458752_151 + 1),00409$
      000AF5 80 6A            [24] 2721 	sjmp	00144$
      000AF7                       2722 00409$:
      000AF7 02r0Br94         [24] 2723 	ljmp	00154$
                                   2724 ;	Main.c:240: case 0:AT24C02_WriteByte(0,0);AT24C02_WriteByte(1,0);AT24C02_WriteByte(2,0);AT24C02_WriteByte(3,0);LCD_ShowString(2,4,"PdDel OK");DelayMs(500);LCD_Init();break;
      000AFA                       2725 00142$:
      000AFA 75*19 00         [24] 2726 	mov	_AT24C02_WriteByte_PARM_2,#0x00
      000AFD 75 82 00         [24] 2727 	mov	dpl,#0x00
      000B00 12r04rAB         [24] 2728 	lcall	_AT24C02_WriteByte
      000B03 75*19 00         [24] 2729 	mov	_AT24C02_WriteByte_PARM_2,#0x00
      000B06 75 82 01         [24] 2730 	mov	dpl,#0x01
      000B09 12r04rAB         [24] 2731 	lcall	_AT24C02_WriteByte
      000B0C 75*19 00         [24] 2732 	mov	_AT24C02_WriteByte_PARM_2,#0x00
      000B0F 75 82 02         [24] 2733 	mov	dpl,#0x02
      000B12 12r04rAB         [24] 2734 	lcall	_AT24C02_WriteByte
      000B15 75*19 00         [24] 2735 	mov	_AT24C02_WriteByte_PARM_2,#0x00
      000B18 75 82 03         [24] 2736 	mov	dpl,#0x03
      000B1B 12r04rAB         [24] 2737 	lcall	_AT24C02_WriteByte
      000B1E 75*04r86         [24] 2738 	mov	_LCD_ShowString_PARM_3,#___str_20
      000B21 75*05s00         [24] 2739 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_20 >> 8)
      000B24 75*06 80         [24] 2740 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000B27 75*03 04         [24] 2741 	mov	_LCD_ShowString_PARM_2,#0x04
      000B2A 75 82 02         [24] 2742 	mov	dpl,#0x02
      000B2D 12r02r16         [24] 2743 	lcall	_LCD_ShowString
      000B30 90 01 F4         [24] 2744 	mov	dptr,#0x01f4
      000B33 12r01r7B         [24] 2745 	lcall	_DelayMs
      000B36 12r01rD4         [24] 2746 	lcall	_LCD_Init
                                   2747 ;	Main.c:241: case 1:AT24C02_WriteByte(4,0);LCD_ShowString(2,4,"RESET OK");DelayMs(1000);LCD_Init();break;
      000B39 80 59            [24] 2748 	sjmp	00154$
      000B3B                       2749 00143$:
      000B3B 75*19 00         [24] 2750 	mov	_AT24C02_WriteByte_PARM_2,#0x00
      000B3E 75 82 04         [24] 2751 	mov	dpl,#0x04
      000B41 12r04rAB         [24] 2752 	lcall	_AT24C02_WriteByte
      000B44 75*04r8F         [24] 2753 	mov	_LCD_ShowString_PARM_3,#___str_21
      000B47 75*05s00         [24] 2754 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_21 >> 8)
      000B4A 75*06 80         [24] 2755 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000B4D 75*03 04         [24] 2756 	mov	_LCD_ShowString_PARM_2,#0x04
      000B50 75 82 02         [24] 2757 	mov	dpl,#0x02
      000B53 12r02r16         [24] 2758 	lcall	_LCD_ShowString
      000B56 90 03 E8         [24] 2759 	mov	dptr,#0x03e8
      000B59 12r01r7B         [24] 2760 	lcall	_DelayMs
      000B5C 12r01rD4         [24] 2761 	lcall	_LCD_Init
                                   2762 ;	Main.c:242: case 2:FLAG_D = 1;LCD_ShowString(1,9,"DOOR:");LCD_ShowString(1,14,"O ");DelayMs(1000);LCD_Init();break;
      000B5F 80 33            [24] 2763 	sjmp	00154$
      000B61                       2764 00144$:
      000B61 75*37 01         [24] 2765 	mov	_FLAG_D,#0x01
      000B64 75*38 00         [24] 2766 	mov	(_FLAG_D + 1),#0x00
      000B67 75*04r98         [24] 2767 	mov	_LCD_ShowString_PARM_3,#___str_22
      000B6A 75*05s00         [24] 2768 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_22 >> 8)
      000B6D 75*06 80         [24] 2769 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000B70 75*03 09         [24] 2770 	mov	_LCD_ShowString_PARM_2,#0x09
      000B73 75 82 01         [24] 2771 	mov	dpl,#0x01
      000B76 12r02r16         [24] 2772 	lcall	_LCD_ShowString
      000B79 75*04r9E         [24] 2773 	mov	_LCD_ShowString_PARM_3,#___str_23
      000B7C 75*05s00         [24] 2774 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_23 >> 8)
      000B7F 75*06 80         [24] 2775 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000B82 75*03 0E         [24] 2776 	mov	_LCD_ShowString_PARM_2,#0x0e
      000B85 75 82 01         [24] 2777 	mov	dpl,#0x01
      000B88 12r02r16         [24] 2778 	lcall	_LCD_ShowString
      000B8B 90 03 E8         [24] 2779 	mov	dptr,#0x03e8
      000B8E 12r01r7B         [24] 2780 	lcall	_DelayMs
      000B91 12r01rD4         [24] 2781 	lcall	_LCD_Init
                                   2782 ;	Main.c:244: break;
      000B94                       2783 00154$:
                                   2784 ;	Main.c:250: if(Num_Mat == 12)
      000B94 74 0C            [12] 2785 	mov	a,#0x0c
      000B96 B5*20 02         [24] 2786 	cjne	a,_Num_Mat,00410$
      000B99 80 03            [24] 2787 	sjmp	00411$
      000B9B                       2788 00410$:
      000B9B 02r06r54         [24] 2789 	ljmp	00193$
      000B9E                       2790 00411$:
                                   2791 ;	Main.c:252: cont = 0; // 计数清零
      000B9E E4               [12] 2792 	clr	a
      000B9F F5*1E            [12] 2793 	mov	_cont,a
      000BA1 F5*1F            [12] 2794 	mov	(_cont + 1),a
                                   2795 ;	Main.c:253: PassWord_Ent = 0; // 清零密码
      000BA3 F5*2D            [12] 2796 	mov	_PassWord_Ent,a
      000BA5 F5*2E            [12] 2797 	mov	(_PassWord_Ent + 1),a
                                   2798 ;	Main.c:254: LCD_ShowNum(2,4,PassWord_Ent,5); // 在LCD上显示数字
      000BA7 75*09 04         [24] 2799 	mov	_LCD_ShowNum_PARM_2,#0x04
      000BAA F5*0A            [12] 2800 	mov	_LCD_ShowNum_PARM_3,a
      000BAC F5*0B            [12] 2801 	mov	(_LCD_ShowNum_PARM_3 + 1),a
      000BAE 75*0C 05         [24] 2802 	mov	_LCD_ShowNum_PARM_4,#0x05
      000BB1 75 82 02         [24] 2803 	mov	dpl,#0x02
      000BB4 12r02r83         [24] 2804 	lcall	_LCD_ShowNum
      000BB7 02r06r54         [24] 2805 	ljmp	00193$
      000BBA                       2806 00188$:
                                   2807 ;	Main.c:261: LCD_ShowString(1,9,"DOOR:");
      000BBA 75*04r98         [24] 2808 	mov	_LCD_ShowString_PARM_3,#___str_22
      000BBD 75*05s00         [24] 2809 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_22 >> 8)
      000BC0 75*06 80         [24] 2810 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000BC3 75*03 09         [24] 2811 	mov	_LCD_ShowString_PARM_2,#0x09
      000BC6 75 82 01         [24] 2812 	mov	dpl,#0x01
      000BC9 12r02r16         [24] 2813 	lcall	_LCD_ShowString
                                   2814 ;	Main.c:262: LCD_ShowString(1,14,"C"); // 在LCD上显示字符串
      000BCC 75*04rA1         [24] 2815 	mov	_LCD_ShowString_PARM_3,#___str_24
      000BCF 75*05s00         [24] 2816 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_24 >> 8)
      000BD2 75*06 80         [24] 2817 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000BD5 75*03 0E         [24] 2818 	mov	_LCD_ShowString_PARM_2,#0x0e
      000BD8 75 82 01         [24] 2819 	mov	dpl,#0x01
      000BDB 12r02r16         [24] 2820 	lcall	_LCD_ShowString
                                   2821 ;	Main.c:263: if(AT24C02_ReadByte(4))
      000BDE 75 82 04         [24] 2822 	mov	dpl,#0x04
      000BE1 12r04rD4         [24] 2823 	lcall	_AT24C02_ReadByte
      000BE4 E5 82            [12] 2824 	mov	a,dpl
      000BE6 60 07            [24] 2825 	jz	00158$
                                   2826 ;	Main.c:265: FLAG_E = 0;
      000BE8 E4               [12] 2827 	clr	a
      000BE9 F5*3B            [12] 2828 	mov	_FLAG_E,a
      000BEB F5*3C            [12] 2829 	mov	(_FLAG_E + 1),a
      000BED 80 06            [24] 2830 	sjmp	00159$
      000BEF                       2831 00158$:
                                   2832 ;	Main.c:269: FLAG_E = 1;
      000BEF 75*3B 01         [24] 2833 	mov	_FLAG_E,#0x01
      000BF2 75*3C 00         [24] 2834 	mov	(_FLAG_E + 1),#0x00
      000BF5                       2835 00159$:
                                   2836 ;	Main.c:271: if(FLAG_E == 1)
      000BF5 74 01            [12] 2837 	mov	a,#0x01
      000BF7 B5*3B 06         [24] 2838 	cjne	a,_FLAG_E,00413$
      000BFA 14               [12] 2839 	dec	a
      000BFB B5*3C 02         [24] 2840 	cjne	a,(_FLAG_E + 1),00413$
      000BFE 80 03            [24] 2841 	sjmp	00414$
      000C00                       2842 00413$:
      000C00 02r0ErA5         [24] 2843 	ljmp	00184$
      000C03                       2844 00414$:
                                   2845 ;	Main.c:273: LCD_ShowString(1,1,"MODE:E"); // 在LCD上显示字符串
      000C03 75*04rA3         [24] 2846 	mov	_LCD_ShowString_PARM_3,#___str_25
      000C06 75*05s00         [24] 2847 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_25 >> 8)
      000C09 75*06 80         [24] 2848 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000C0C 75*03 01         [24] 2849 	mov	_LCD_ShowString_PARM_2,#0x01
      000C0F 75 82 01         [24] 2850 	mov	dpl,#0x01
      000C12 12r02r16         [24] 2851 	lcall	_LCD_ShowString
                                   2852 ;	Main.c:275: if(Num_Mat != 0 && Num_Mat <= 10)
      000C15 E5*20            [12] 2853 	mov	a,_Num_Mat
      000C17 70 03            [24] 2854 	jnz	00415$
      000C19 02r0Dr9A         [24] 2855 	ljmp	00171$
      000C1C                       2856 00415$:
      000C1C E5*20            [12] 2857 	mov	a,_Num_Mat
      000C1E 24 F5            [12] 2858 	add	a,#0xff - 0x0a
      000C20 50 03            [24] 2859 	jnc	00416$
      000C22 02r0Dr9A         [24] 2860 	ljmp	00171$
      000C25                       2861 00416$:
                                   2862 ;	Main.c:279: if (cont < 6)
      000C25 C3               [12] 2863 	clr	c
      000C26 E5*1E            [12] 2864 	mov	a,_cont
      000C28 94 06            [12] 2865 	subb	a,#0x06
      000C2A E5*1F            [12] 2866 	mov	a,(_cont + 1)
      000C2C 94 00            [12] 2867 	subb	a,#0x00
      000C2E 40 03            [24] 2868 	jc	00417$
      000C30 02r0CrDE         [24] 2869 	ljmp	00161$
      000C33                       2870 00417$:
                                   2871 ;	Main.c:281: PassWord_Ent = PassWord_Ent * 10 + Num_Mat%10;
      000C33 85*2D*00         [24] 2872 	mov	__mulint_PARM_2,_PassWord_Ent
      000C36 85*2E*01         [24] 2873 	mov	(__mulint_PARM_2 + 1),(_PassWord_Ent + 1)
      000C39 90 00 0A         [24] 2874 	mov	dptr,#0x000a
      000C3C 12r00r00         [24] 2875 	lcall	__mulint
      000C3F AE 82            [24] 2876 	mov	r6,dpl
      000C41 AF 83            [24] 2877 	mov	r7,dph
      000C43 AC*20            [24] 2878 	mov	r4,_Num_Mat
      000C45 7D 00            [12] 2879 	mov	r5,#0x00
      000C47 75*00 0A         [24] 2880 	mov	__modsint_PARM_2,#0x0a
                                   2881 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000C4A 8D*01            [24] 2882 	mov	(__modsint_PARM_2 + 1),r5
      000C4C 8C 82            [24] 2883 	mov	dpl,r4
      000C4E 8D 83            [24] 2884 	mov	dph,r5
      000C50 C0 07            [24] 2885 	push	ar7
      000C52 C0 06            [24] 2886 	push	ar6
      000C54 12r00r00         [24] 2887 	lcall	__modsint
      000C57 AC 82            [24] 2888 	mov	r4,dpl
      000C59 AD 83            [24] 2889 	mov	r5,dph
      000C5B D0 06            [24] 2890 	pop	ar6
      000C5D D0 07            [24] 2891 	pop	ar7
      000C5F EC               [12] 2892 	mov	a,r4
      000C60 2E               [12] 2893 	add	a,r6
      000C61 F5*2D            [12] 2894 	mov	_PassWord_Ent,a
      000C63 ED               [12] 2895 	mov	a,r5
      000C64 3F               [12] 2896 	addc	a,r7
      000C65 F5*2E            [12] 2897 	mov	(_PassWord_Ent + 1),a
                                   2898 ;	Main.c:282: PassWord_Ent1_1 = PassWord_Ent / 1000;
      000C67 75*00 E8         [24] 2899 	mov	__divuint_PARM_2,#0xe8
      000C6A 75*01 03         [24] 2900 	mov	(__divuint_PARM_2 + 1),#0x03
      000C6D 85*2D 82         [24] 2901 	mov	dpl,_PassWord_Ent
      000C70 85*2E 83         [24] 2902 	mov	dph,(_PassWord_Ent + 1)
      000C73 12r00r00         [24] 2903 	lcall	__divuint
      000C76 85 82*31         [24] 2904 	mov	_PassWord_Ent1_1,dpl
      000C79 85 83*32         [24] 2905 	mov	(_PassWord_Ent1_1 + 1),dph
                                   2906 ;	Main.c:283: PassWord_Ent1 = PassWord_Ent1 *10 + PassWord_Ent1_1;
      000C7C 85*2F*00         [24] 2907 	mov	__mulint_PARM_2,_PassWord_Ent1
      000C7F 85*30*01         [24] 2908 	mov	(__mulint_PARM_2 + 1),(_PassWord_Ent1 + 1)
      000C82 90 00 0A         [24] 2909 	mov	dptr,#0x000a
      000C85 12r00r00         [24] 2910 	lcall	__mulint
      000C88 E5 82            [12] 2911 	mov	a,dpl
      000C8A 85 83 F0         [24] 2912 	mov	b,dph
      000C8D 25*31            [12] 2913 	add	a,_PassWord_Ent1_1
      000C8F F5*2F            [12] 2914 	mov	_PassWord_Ent1,a
      000C91 E5*32            [12] 2915 	mov	a,(_PassWord_Ent1_1 + 1)
      000C93 35 F0            [12] 2916 	addc	a,b
      000C95 F5*30            [12] 2917 	mov	(_PassWord_Ent1 + 1),a
                                   2918 ;	Main.c:284: PassWord_Ent2 = PassWord_Ent % 1000;
      000C97 75*00 E8         [24] 2919 	mov	__moduint_PARM_2,#0xe8
      000C9A 75*01 03         [24] 2920 	mov	(__moduint_PARM_2 + 1),#0x03
      000C9D 85*2D 82         [24] 2921 	mov	dpl,_PassWord_Ent
      000CA0 85*2E 83         [24] 2922 	mov	dph,(_PassWord_Ent + 1)
      000CA3 12r00r00         [24] 2923 	lcall	__moduint
      000CA6 85 82*33         [24] 2924 	mov	_PassWord_Ent2,dpl
      000CA9 85 83*34         [24] 2925 	mov	(_PassWord_Ent2 + 1),dph
                                   2926 ;	Main.c:285: PassWord_Ent = PassWord_Ent2;
      000CAC 85*33*2D         [24] 2927 	mov	_PassWord_Ent,_PassWord_Ent2
      000CAF 85*34*2E         [24] 2928 	mov	(_PassWord_Ent + 1),(_PassWord_Ent2 + 1)
                                   2929 ;	Main.c:286: cont++;
      000CB2 05*1E            [12] 2930 	inc	_cont
      000CB4 E4               [12] 2931 	clr	a
      000CB5 B5*1E 02         [24] 2932 	cjne	a,_cont,00418$
      000CB8 05*1F            [12] 2933 	inc	(_cont + 1)
      000CBA                       2934 00418$:
                                   2935 ;	Main.c:288: LCD_ShowNum(2,4,PassWord_Ent1,3);
      000CBA 75*09 04         [24] 2936 	mov	_LCD_ShowNum_PARM_2,#0x04
      000CBD 85*2F*0A         [24] 2937 	mov	_LCD_ShowNum_PARM_3,_PassWord_Ent1
      000CC0 85*30*0B         [24] 2938 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Ent1 + 1)
      000CC3 75*0C 03         [24] 2939 	mov	_LCD_ShowNum_PARM_4,#0x03
      000CC6 75 82 02         [24] 2940 	mov	dpl,#0x02
      000CC9 12r02r83         [24] 2941 	lcall	_LCD_ShowNum
                                   2942 ;	Main.c:289: LCD_ShowNum(2,7,PassWord_Ent2,3);
      000CCC 75*09 07         [24] 2943 	mov	_LCD_ShowNum_PARM_2,#0x07
      000CCF 85*33*0A         [24] 2944 	mov	_LCD_ShowNum_PARM_3,_PassWord_Ent2
      000CD2 85*34*0B         [24] 2945 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Ent2 + 1)
      000CD5 75*0C 03         [24] 2946 	mov	_LCD_ShowNum_PARM_4,#0x03
      000CD8 75 82 02         [24] 2947 	mov	dpl,#0x02
      000CDB 12r02r83         [24] 2948 	lcall	_LCD_ShowNum
      000CDE                       2949 00161$:
                                   2950 ;	Main.c:291: DelayMs(700);
      000CDE 90 02 BC         [24] 2951 	mov	dptr,#0x02bc
      000CE1 12r01r7B         [24] 2952 	lcall	_DelayMs
                                   2953 ;	Main.c:293: switch(cont)
      000CE4 C3               [12] 2954 	clr	c
      000CE5 74 06            [12] 2955 	mov	a,#0x06
      000CE7 95*1E            [12] 2956 	subb	a,_cont
      000CE9 E4               [12] 2957 	clr	a
      000CEA 95*1F            [12] 2958 	subb	a,(_cont + 1)
      000CEC 50 03            [24] 2959 	jnc	00419$
      000CEE 02r0Dr9A         [24] 2960 	ljmp	00171$
      000CF1                       2961 00419$:
      000CF1 E5*1E            [12] 2962 	mov	a,_cont
      000CF3 75 F0 03         [24] 2963 	mov	b,#0x03
      000CF6 A4               [48] 2964 	mul	ab
      000CF7 90r0CrFB         [24] 2965 	mov	dptr,#00420$
      000CFA 73               [24] 2966 	jmp	@a+dptr
      000CFB                       2967 00420$:
      000CFB 02r0Dr10         [24] 2968 	ljmp	00162$
      000CFE 02r0Dr24         [24] 2969 	ljmp	00163$
      000D01 02r0Dr38         [24] 2970 	ljmp	00164$
      000D04 02r0Dr4C         [24] 2971 	ljmp	00165$
      000D07 02r0Dr60         [24] 2972 	ljmp	00166$
      000D0A 02r0Dr74         [24] 2973 	ljmp	00167$
      000D0D 02r0Dr88         [24] 2974 	ljmp	00168$
                                   2975 ;	Main.c:295: case 0:LCD_ShowString(2,4,"000000");break;
      000D10                       2976 00162$:
      000D10 75*04rAA         [24] 2977 	mov	_LCD_ShowString_PARM_3,#___str_26
      000D13 75*05s00         [24] 2978 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_26 >> 8)
      000D16 75*06 80         [24] 2979 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000D19 75*03 04         [24] 2980 	mov	_LCD_ShowString_PARM_2,#0x04
      000D1C 75 82 02         [24] 2981 	mov	dpl,#0x02
      000D1F 12r02r16         [24] 2982 	lcall	_LCD_ShowString
                                   2983 ;	Main.c:296: case 1:LCD_ShowString(2,4,"00000*");break;
      000D22 80 76            [24] 2984 	sjmp	00171$
      000D24                       2985 00163$:
      000D24 75*04rB1         [24] 2986 	mov	_LCD_ShowString_PARM_3,#___str_27
      000D27 75*05s00         [24] 2987 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_27 >> 8)
      000D2A 75*06 80         [24] 2988 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000D2D 75*03 04         [24] 2989 	mov	_LCD_ShowString_PARM_2,#0x04
      000D30 75 82 02         [24] 2990 	mov	dpl,#0x02
      000D33 12r02r16         [24] 2991 	lcall	_LCD_ShowString
                                   2992 ;	Main.c:297: case 2:LCD_ShowString(2,4,"0000**");break;
      000D36 80 62            [24] 2993 	sjmp	00171$
      000D38                       2994 00164$:
      000D38 75*04rB8         [24] 2995 	mov	_LCD_ShowString_PARM_3,#___str_28
      000D3B 75*05s00         [24] 2996 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_28 >> 8)
      000D3E 75*06 80         [24] 2997 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000D41 75*03 04         [24] 2998 	mov	_LCD_ShowString_PARM_2,#0x04
      000D44 75 82 02         [24] 2999 	mov	dpl,#0x02
      000D47 12r02r16         [24] 3000 	lcall	_LCD_ShowString
                                   3001 ;	Main.c:298: case 3:LCD_ShowString(2,4,"000***");break;
      000D4A 80 4E            [24] 3002 	sjmp	00171$
      000D4C                       3003 00165$:
      000D4C 75*04rBF         [24] 3004 	mov	_LCD_ShowString_PARM_3,#___str_29
      000D4F 75*05s00         [24] 3005 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_29 >> 8)
      000D52 75*06 80         [24] 3006 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000D55 75*03 04         [24] 3007 	mov	_LCD_ShowString_PARM_2,#0x04
      000D58 75 82 02         [24] 3008 	mov	dpl,#0x02
      000D5B 12r02r16         [24] 3009 	lcall	_LCD_ShowString
                                   3010 ;	Main.c:299: case 4:LCD_ShowString(2,4,"00****");break;
      000D5E 80 3A            [24] 3011 	sjmp	00171$
      000D60                       3012 00166$:
      000D60 75*04rC6         [24] 3013 	mov	_LCD_ShowString_PARM_3,#___str_30
      000D63 75*05s00         [24] 3014 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_30 >> 8)
      000D66 75*06 80         [24] 3015 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000D69 75*03 04         [24] 3016 	mov	_LCD_ShowString_PARM_2,#0x04
      000D6C 75 82 02         [24] 3017 	mov	dpl,#0x02
      000D6F 12r02r16         [24] 3018 	lcall	_LCD_ShowString
                                   3019 ;	Main.c:300: case 5:LCD_ShowString(2,4,"0*****");break;
      000D72 80 26            [24] 3020 	sjmp	00171$
      000D74                       3021 00167$:
      000D74 75*04rCD         [24] 3022 	mov	_LCD_ShowString_PARM_3,#___str_31
      000D77 75*05s00         [24] 3023 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_31 >> 8)
      000D7A 75*06 80         [24] 3024 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000D7D 75*03 04         [24] 3025 	mov	_LCD_ShowString_PARM_2,#0x04
      000D80 75 82 02         [24] 3026 	mov	dpl,#0x02
      000D83 12r02r16         [24] 3027 	lcall	_LCD_ShowString
                                   3028 ;	Main.c:301: case 6:LCD_ShowString(2,4,"******");break;
      000D86 80 12            [24] 3029 	sjmp	00171$
      000D88                       3030 00168$:
      000D88 75*04rD4         [24] 3031 	mov	_LCD_ShowString_PARM_3,#___str_32
      000D8B 75*05s00         [24] 3032 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_32 >> 8)
      000D8E 75*06 80         [24] 3033 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000D91 75*03 04         [24] 3034 	mov	_LCD_ShowString_PARM_2,#0x04
      000D94 75 82 02         [24] 3035 	mov	dpl,#0x02
      000D97 12r02r16         [24] 3036 	lcall	_LCD_ShowString
                                   3037 ;	Main.c:302: }
      000D9A                       3038 00171$:
                                   3039 ;	Main.c:305: if(Num_Mat == 11)
      000D9A 74 0B            [12] 3040 	mov	a,#0x0b
      000D9C B5*20 02         [24] 3041 	cjne	a,_Num_Mat,00421$
      000D9F 80 03            [24] 3042 	sjmp	00422$
      000DA1                       3043 00421$:
      000DA1 02r0Er6D         [24] 3044 	ljmp	00180$
      000DA4                       3045 00422$:
                                   3046 ;	Main.c:308: if(PassWord1 == PassWord_Ent1 && PassWord2 == PassWord_Ent2 && PassWord_Ent1 != 0 && PassWord_Ent2 != 0)
      000DA4 E5*2F            [12] 3047 	mov	a,_PassWord_Ent1
      000DA6 B5*29 07         [24] 3048 	cjne	a,_PassWord1,00423$
      000DA9 E5*30            [12] 3049 	mov	a,(_PassWord_Ent1 + 1)
      000DAB B5*2A 02         [24] 3050 	cjne	a,(_PassWord1 + 1),00423$
      000DAE 80 03            [24] 3051 	sjmp	00424$
      000DB0                       3052 00423$:
      000DB0 02r0Er30         [24] 3053 	ljmp	00174$
      000DB3                       3054 00424$:
      000DB3 E5*33            [12] 3055 	mov	a,_PassWord_Ent2
      000DB5 B5*2B 78         [24] 3056 	cjne	a,_PassWord2,00174$
      000DB8 E5*34            [12] 3057 	mov	a,(_PassWord_Ent2 + 1)
      000DBA B5*2C 73         [24] 3058 	cjne	a,(_PassWord2 + 1),00174$
      000DBD E5*2F            [12] 3059 	mov	a,_PassWord_Ent1
      000DBF 45*30            [12] 3060 	orl	a,(_PassWord_Ent1 + 1)
      000DC1 60 6D            [24] 3061 	jz	00174$
      000DC3 E5*33            [12] 3062 	mov	a,_PassWord_Ent2
      000DC5 45*34            [12] 3063 	orl	a,(_PassWord_Ent2 + 1)
      000DC7 60 67            [24] 3064 	jz	00174$
                                   3065 ;	Main.c:310: LCD_ShowString(1,14,"O"); // 在LCD上显示字符串
      000DC9 75*04rDB         [24] 3066 	mov	_LCD_ShowString_PARM_3,#___str_33
      000DCC 75*05s00         [24] 3067 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_33 >> 8)
      000DCF 75*06 80         [24] 3068 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000DD2 75*03 0E         [24] 3069 	mov	_LCD_ShowString_PARM_2,#0x0e
      000DD5 75 82 01         [24] 3070 	mov	dpl,#0x01
      000DD8 12r02r16         [24] 3071 	lcall	_LCD_ShowString
                                   3072 ;	Main.c:312: cont = 0; // 计数清零
      000DDB E4               [12] 3073 	clr	a
      000DDC F5*1E            [12] 3074 	mov	_cont,a
      000DDE F5*1F            [12] 3075 	mov	(_cont + 1),a
                                   3076 ;	Main.c:313: PassWord_Ent = 0; // 清零密码
      000DE0 F5*2D            [12] 3077 	mov	_PassWord_Ent,a
      000DE2 F5*2E            [12] 3078 	mov	(_PassWord_Ent + 1),a
                                   3079 ;	Main.c:314: PassWord_Ent1 = 0; // 清零密码
      000DE4 F5*2F            [12] 3080 	mov	_PassWord_Ent1,a
      000DE6 F5*30            [12] 3081 	mov	(_PassWord_Ent1 + 1),a
                                   3082 ;	Main.c:315: PassWord_Ent2 = 0; // 清零密码
      000DE8 F5*33            [12] 3083 	mov	_PassWord_Ent2,a
      000DEA F5*34            [12] 3084 	mov	(_PassWord_Ent2 + 1),a
                                   3085 ;	Main.c:316: DelayS(2); // 延时2秒
      000DEC 90 00 02         [24] 3086 	mov	dptr,#0x0002
      000DEF 12r01r4B         [24] 3087 	lcall	_DelayS
                                   3088 ;	Main.c:317: FLAG_D = 1; // 门状态标志位为1
      000DF2 75*37 01         [24] 3089 	mov	_FLAG_D,#0x01
      000DF5 75*38 00         [24] 3090 	mov	(_FLAG_D + 1),#0x00
                                   3091 ;	Main.c:318: LCD_ShowNum(2,4,PassWord_Ent1,3);
      000DF8 75*09 04         [24] 3092 	mov	_LCD_ShowNum_PARM_2,#0x04
      000DFB 85*2F*0A         [24] 3093 	mov	_LCD_ShowNum_PARM_3,_PassWord_Ent1
      000DFE 85*30*0B         [24] 3094 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Ent1 + 1)
      000E01 75*0C 03         [24] 3095 	mov	_LCD_ShowNum_PARM_4,#0x03
      000E04 75 82 02         [24] 3096 	mov	dpl,#0x02
      000E07 12r02r83         [24] 3097 	lcall	_LCD_ShowNum
                                   3098 ;	Main.c:319: LCD_ShowNum(2,7,PassWord_Ent2,3);
      000E0A 75*09 07         [24] 3099 	mov	_LCD_ShowNum_PARM_2,#0x07
      000E0D 85*33*0A         [24] 3100 	mov	_LCD_ShowNum_PARM_3,_PassWord_Ent2
      000E10 85*34*0B         [24] 3101 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Ent2 + 1)
      000E13 75*0C 03         [24] 3102 	mov	_LCD_ShowNum_PARM_4,#0x03
      000E16 75 82 02         [24] 3103 	mov	dpl,#0x02
      000E19 12r02r83         [24] 3104 	lcall	_LCD_ShowNum
                                   3105 ;	Main.c:320: LCD_ShowString(1,14,"C"); // 在LCD上显示字符串
      000E1C 75*04rA1         [24] 3106 	mov	_LCD_ShowString_PARM_3,#___str_24
      000E1F 75*05s00         [24] 3107 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_24 >> 8)
      000E22 75*06 80         [24] 3108 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000E25 75*03 0E         [24] 3109 	mov	_LCD_ShowString_PARM_2,#0x0e
      000E28 75 82 01         [24] 3110 	mov	dpl,#0x01
      000E2B 12r02r16         [24] 3111 	lcall	_LCD_ShowString
      000E2E 80 3D            [24] 3112 	sjmp	00180$
      000E30                       3113 00174$:
                                   3114 ;	Main.c:324: LCD_ShowString(1,14,"C"); // 在LCD上显示字符串
      000E30 75*04rA1         [24] 3115 	mov	_LCD_ShowString_PARM_3,#___str_24
      000E33 75*05s00         [24] 3116 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_24 >> 8)
      000E36 75*06 80         [24] 3117 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000E39 75*03 0E         [24] 3118 	mov	_LCD_ShowString_PARM_2,#0x0e
      000E3C 75 82 01         [24] 3119 	mov	dpl,#0x01
      000E3F 12r02r16         [24] 3120 	lcall	_LCD_ShowString
                                   3121 ;	Main.c:326: PassWord_Ent = 0; // 清零密码
      000E42 E4               [12] 3122 	clr	a
      000E43 F5*2D            [12] 3123 	mov	_PassWord_Ent,a
      000E45 F5*2E            [12] 3124 	mov	(_PassWord_Ent + 1),a
                                   3125 ;	Main.c:327: PassWord_Ent1 = 0; // 清零密码
      000E47 F5*2F            [12] 3126 	mov	_PassWord_Ent1,a
      000E49 F5*30            [12] 3127 	mov	(_PassWord_Ent1 + 1),a
                                   3128 ;	Main.c:328: PassWord_Ent2 = 0; // 清零密码
      000E4B F5*33            [12] 3129 	mov	_PassWord_Ent2,a
      000E4D F5*34            [12] 3130 	mov	(_PassWord_Ent2 + 1),a
                                   3131 ;	Main.c:329: LCD_ShowString(2,4,"000000");
      000E4F 75*04rAA         [24] 3132 	mov	_LCD_ShowString_PARM_3,#___str_26
      000E52 75*05s00         [24] 3133 	mov	(_LCD_ShowString_PARM_3 + 1),#(___str_26 >> 8)
      000E55 75*06 80         [24] 3134 	mov	(_LCD_ShowString_PARM_3 + 2),#0x80
      000E58 75*03 04         [24] 3135 	mov	_LCD_ShowString_PARM_2,#0x04
      000E5B 75 82 02         [24] 3136 	mov	dpl,#0x02
      000E5E 12r02r16         [24] 3137 	lcall	_LCD_ShowString
                                   3138 ;	Main.c:330: cont = 0; // 计数清零
      000E61 E4               [12] 3139 	clr	a
      000E62 F5*1E            [12] 3140 	mov	_cont,a
      000E64 F5*1F            [12] 3141 	mov	(_cont + 1),a
                                   3142 ;	Main.c:331: FLAG_F++;
      000E66 05*35            [12] 3143 	inc	_FLAG_F
                                   3144 ;	genFromRTrack removed	clr	a
      000E68 B5*35 02         [24] 3145 	cjne	a,_FLAG_F,00429$
      000E6B 05*36            [12] 3146 	inc	(_FLAG_F + 1)
      000E6D                       3147 00429$:
      000E6D                       3148 00180$:
                                   3149 ;	Main.c:335: if(Num_Mat == 12)
      000E6D 74 0C            [12] 3150 	mov	a,#0x0c
      000E6F B5*20 33         [24] 3151 	cjne	a,_Num_Mat,00184$
                                   3152 ;	Main.c:337: cont = 0; // 计数清零
      000E72 E4               [12] 3153 	clr	a
      000E73 F5*1E            [12] 3154 	mov	_cont,a
      000E75 F5*1F            [12] 3155 	mov	(_cont + 1),a
                                   3156 ;	Main.c:338: PassWord_Ent = 0; // 清零密码
      000E77 F5*2D            [12] 3157 	mov	_PassWord_Ent,a
      000E79 F5*2E            [12] 3158 	mov	(_PassWord_Ent + 1),a
                                   3159 ;	Main.c:339: PassWord_Ent1 = 0; // 清零密码
      000E7B F5*2F            [12] 3160 	mov	_PassWord_Ent1,a
      000E7D F5*30            [12] 3161 	mov	(_PassWord_Ent1 + 1),a
                                   3162 ;	Main.c:340: PassWord_Ent2 = 0; // 清零密码
      000E7F F5*33            [12] 3163 	mov	_PassWord_Ent2,a
      000E81 F5*34            [12] 3164 	mov	(_PassWord_Ent2 + 1),a
                                   3165 ;	Main.c:341: LCD_ShowNum(2,4,PassWord_Ent1,3);
      000E83 75*09 04         [24] 3166 	mov	_LCD_ShowNum_PARM_2,#0x04
      000E86 F5*0A            [12] 3167 	mov	_LCD_ShowNum_PARM_3,a
      000E88 F5*0B            [12] 3168 	mov	(_LCD_ShowNum_PARM_3 + 1),a
      000E8A 75*0C 03         [24] 3169 	mov	_LCD_ShowNum_PARM_4,#0x03
      000E8D 75 82 02         [24] 3170 	mov	dpl,#0x02
      000E90 12r02r83         [24] 3171 	lcall	_LCD_ShowNum
                                   3172 ;	Main.c:342: LCD_ShowNum(2,7,PassWord_Ent2,3);// 在LCD上显示数字
      000E93 75*09 07         [24] 3173 	mov	_LCD_ShowNum_PARM_2,#0x07
      000E96 85*33*0A         [24] 3174 	mov	_LCD_ShowNum_PARM_3,_PassWord_Ent2
      000E99 85*34*0B         [24] 3175 	mov	(_LCD_ShowNum_PARM_3 + 1),(_PassWord_Ent2 + 1)
      000E9C 75*0C 03         [24] 3176 	mov	_LCD_ShowNum_PARM_4,#0x03
      000E9F 75 82 02         [24] 3177 	mov	dpl,#0x02
      000EA2 12r02r83         [24] 3178 	lcall	_LCD_ShowNum
      000EA5                       3179 00184$:
                                   3180 ;	Main.c:346: if(FLAG_F >= 5)
      000EA5 C3               [12] 3181 	clr	c
      000EA6 E5*35            [12] 3182 	mov	a,_FLAG_F
      000EA8 94 05            [12] 3183 	subb	a,#0x05
      000EAA E5*36            [12] 3184 	mov	a,(_FLAG_F + 1)
      000EAC 94 00            [12] 3185 	subb	a,#0x00
      000EAE 40 18            [24] 3186 	jc	00186$
                                   3187 ;	Main.c:348: DARGER = 0;
                                   3188 ;	assignBit
      000EB0 C2 A3            [12] 3189 	clr	_P2_3
                                   3190 ;	Main.c:349: DelayMs(500);
      000EB2 90 01 F4         [24] 3191 	mov	dptr,#0x01f4
      000EB5 12r01r7B         [24] 3192 	lcall	_DelayMs
                                   3193 ;	Main.c:350: DARGER = 1;
                                   3194 ;	assignBit
      000EB8 D2 A3            [12] 3195 	setb	_P2_3
                                   3196 ;	Main.c:351: AT24C02_WriteByte(4,1); // 错误密码标志位为1
      000EBA 75*19 01         [24] 3197 	mov	_AT24C02_WriteByte_PARM_2,#0x01
      000EBD 75 82 04         [24] 3198 	mov	dpl,#0x04
      000EC0 12r04rAB         [24] 3199 	lcall	_AT24C02_WriteByte
                                   3200 ;	Main.c:352: FLAG_F = 0;
      000EC3 E4               [12] 3201 	clr	a
      000EC4 F5*35            [12] 3202 	mov	_FLAG_F,a
      000EC6 F5*36            [12] 3203 	mov	(_FLAG_F + 1),a
      000EC8                       3204 00186$:
                                   3205 ;	Main.c:355: LCD_ShowNum(2,15,FLAG_F,2);
      000EC8 75*09 0F         [24] 3206 	mov	_LCD_ShowNum_PARM_2,#0x0f
      000ECB 85*35*0A         [24] 3207 	mov	_LCD_ShowNum_PARM_3,_FLAG_F
      000ECE 85*36*0B         [24] 3208 	mov	(_LCD_ShowNum_PARM_3 + 1),(_FLAG_F + 1)
      000ED1 75*0C 02         [24] 3209 	mov	_LCD_ShowNum_PARM_4,#0x02
      000ED4 75 82 02         [24] 3210 	mov	dpl,#0x02
      000ED7 12r02r83         [24] 3211 	lcall	_LCD_ShowNum
                                   3212 ;	Main.c:360: }
      000EDA 02r06r54         [24] 3213 	ljmp	00193$
                                   3214 ;------------------------------------------------------------
                                   3215 ;Allocation info for local variables in function 'T0_Routine'
                                   3216 ;------------------------------------------------------------
                                   3217 ;count                     Allocated with name '_T0_Routine_count_65536_170'
                                   3218 ;i                         Allocated with name '_T0_Routine_i_65536_170'
                                   3219 ;------------------------------------------------------------
                                   3220 ;	Main.c:363: void T0_Routine() __interrupt 1
                                   3221 ;	-----------------------------------------
                                   3222 ;	 function T0_Routine
                                   3223 ;	-----------------------------------------
      000EDD                       3224 _T0_Routine:
      000EDD C0*00            [24] 3225 	push	bits
      000EDF C0 E0            [24] 3226 	push	acc
      000EE1 C0 F0            [24] 3227 	push	b
      000EE3 C0 82            [24] 3228 	push	dpl
      000EE5 C0 83            [24] 3229 	push	dph
      000EE7 C0 07            [24] 3230 	push	(0+7)
      000EE9 C0 06            [24] 3231 	push	(0+6)
      000EEB C0 05            [24] 3232 	push	(0+5)
      000EED C0 04            [24] 3233 	push	(0+4)
      000EEF C0 03            [24] 3234 	push	(0+3)
      000EF1 C0 02            [24] 3235 	push	(0+2)
      000EF3 C0 01            [24] 3236 	push	(0+1)
      000EF5 C0 00            [24] 3237 	push	(0+0)
      000EF7 C0 D0            [24] 3238 	push	psw
      000EF9 75 D0 00         [24] 3239 	mov	psw,#0x00
                                   3240 ;	Main.c:367: TH0 = 0xfc; // 设置定时器初值高8位
      000EFC 75 8C FC         [24] 3241 	mov	_TH0,#0xfc
                                   3242 ;	Main.c:368: TL0 = 0x18; // 设置定时器初值低8位
      000EFF 75 8A 18         [24] 3243 	mov	_TL0,#0x18
                                   3244 ;	Main.c:369: count++; // 计数加一
      000F02 05*3F            [12] 3245 	inc	_T0_Routine_count_65536_170
      000F04 E4               [12] 3246 	clr	a
      000F05 B5*3F 02         [24] 3247 	cjne	a,_T0_Routine_count_65536_170,00159$
      000F08 05*40            [12] 3248 	inc	(_T0_Routine_count_65536_170 + 1)
      000F0A                       3249 00159$:
                                   3250 ;	Main.c:371: if(count == 100)
      000F0A 74 64            [12] 3251 	mov	a,#0x64
      000F0C B5*3F 06         [24] 3252 	cjne	a,_T0_Routine_count_65536_170,00160$
      000F0F E4               [12] 3253 	clr	a
      000F10 B5*40 02         [24] 3254 	cjne	a,(_T0_Routine_count_65536_170 + 1),00160$
      000F13 80 03            [24] 3255 	sjmp	00161$
      000F15                       3256 00160$:
      000F15 02r0FrAC         [24] 3257 	ljmp	00117$
      000F18                       3258 00161$:
                                   3259 ;	Main.c:374: if(P3_4 == 0 && P3_5 == 0)
      000F18 20 B4 17         [24] 3260 	jb	_P3_4,00105$
      000F1B 20 B5 14         [24] 3261 	jb	_P3_5,00105$
                                   3262 ;	Main.c:377: if(P3_4 == 0 && P3_5 == 0)
      000F1E 20 B4 11         [24] 3263 	jb	_P3_4,00105$
      000F21 20 B5 0E         [24] 3264 	jb	_P3_5,00105$
                                   3265 ;	Main.c:379: DelayS(2); // 延时1秒
      000F24 90 00 02         [24] 3266 	mov	dptr,#0x0002
      000F27 12r01r4B         [24] 3267 	lcall	_DelayS
                                   3268 ;	Main.c:380: K1++; // K1计数加一
      000F2A 05*1A            [12] 3269 	inc	_K1
      000F2C E4               [12] 3270 	clr	a
      000F2D B5*1A 02         [24] 3271 	cjne	a,_K1,00166$
      000F30 05*1B            [12] 3272 	inc	(_K1 + 1)
      000F32                       3273 00166$:
      000F32                       3274 00105$:
                                   3275 ;	Main.c:383: if(FLAG_D)
      000F32 E5*37            [12] 3276 	mov	a,_FLAG_D
      000F34 45*38            [12] 3277 	orl	a,(_FLAG_D + 1)
      000F36 70 03            [24] 3278 	jnz	00167$
      000F38 02r0FrA7         [24] 3279 	ljmp	00110$
      000F3B                       3280 00167$:
                                   3281 ;	Main.c:385: for(i=0;i<150;i++)
      000F3B 75*41 00         [24] 3282 	mov	_T0_Routine_i_65536_170,#0x00
      000F3E                       3283 00113$:
                                   3284 ;	Main.c:387: P3 = 0x80;
      000F3E 75 B0 80         [24] 3285 	mov	_P3,#0x80
                                   3286 ;	Main.c:388: DelayMs(3);
      000F41 90 00 03         [24] 3287 	mov	dptr,#0x0003
      000F44 12r01r7B         [24] 3288 	lcall	_DelayMs
                                   3289 ;	Main.c:389: P3 = 0x40;
      000F47 75 B0 40         [24] 3290 	mov	_P3,#0x40
                                   3291 ;	Main.c:390: DelayMs(3);
      000F4A 90 00 03         [24] 3292 	mov	dptr,#0x0003
      000F4D 12r01r7B         [24] 3293 	lcall	_DelayMs
                                   3294 ;	Main.c:391: P3 = 0x20;
      000F50 75 B0 20         [24] 3295 	mov	_P3,#0x20
                                   3296 ;	Main.c:392: DelayMs(3);
      000F53 90 00 03         [24] 3297 	mov	dptr,#0x0003
      000F56 12r01r7B         [24] 3298 	lcall	_DelayMs
                                   3299 ;	Main.c:393: P3 = 0x10;
      000F59 75 B0 10         [24] 3300 	mov	_P3,#0x10
                                   3301 ;	Main.c:394: DelayMs(3);
      000F5C 90 00 03         [24] 3302 	mov	dptr,#0x0003
      000F5F 12r01r7B         [24] 3303 	lcall	_DelayMs
                                   3304 ;	Main.c:385: for(i=0;i<150;i++)
      000F62 05*41            [12] 3305 	inc	_T0_Routine_i_65536_170
      000F64 74 6A            [12] 3306 	mov	a,#0x100 - 0x96
      000F66 25*41            [12] 3307 	add	a,_T0_Routine_i_65536_170
      000F68 50 D4            [24] 3308 	jnc	00113$
                                   3309 ;	Main.c:396: DelayS(2);
      000F6A 90 00 02         [24] 3310 	mov	dptr,#0x0002
      000F6D 12r01r4B         [24] 3311 	lcall	_DelayS
                                   3312 ;	Main.c:397: for(i=0;i<130;i++)
      000F70 75*41 00         [24] 3313 	mov	_T0_Routine_i_65536_170,#0x00
      000F73                       3314 00115$:
                                   3315 ;	Main.c:399: P3 = 0x10;
      000F73 75 B0 10         [24] 3316 	mov	_P3,#0x10
                                   3317 ;	Main.c:400: DelayMs(3);
      000F76 90 00 03         [24] 3318 	mov	dptr,#0x0003
      000F79 12r01r7B         [24] 3319 	lcall	_DelayMs
                                   3320 ;	Main.c:401: P3 = 0x20;
      000F7C 75 B0 20         [24] 3321 	mov	_P3,#0x20
                                   3322 ;	Main.c:402: DelayMs(3);
      000F7F 90 00 03         [24] 3323 	mov	dptr,#0x0003
      000F82 12r01r7B         [24] 3324 	lcall	_DelayMs
                                   3325 ;	Main.c:403: P3 = 0x40;
      000F85 75 B0 40         [24] 3326 	mov	_P3,#0x40
                                   3327 ;	Main.c:404: DelayMs(3);
      000F88 90 00 03         [24] 3328 	mov	dptr,#0x0003
      000F8B 12r01r7B         [24] 3329 	lcall	_DelayMs
                                   3330 ;	Main.c:405: P3 = 0x80;
      000F8E 75 B0 80         [24] 3331 	mov	_P3,#0x80
                                   3332 ;	Main.c:406: DelayMs(3);
      000F91 90 00 03         [24] 3333 	mov	dptr,#0x0003
      000F94 12r01r7B         [24] 3334 	lcall	_DelayMs
                                   3335 ;	Main.c:397: for(i=0;i<130;i++)
      000F97 05*41            [12] 3336 	inc	_T0_Routine_i_65536_170
      000F99 74 7E            [12] 3337 	mov	a,#0x100 - 0x82
      000F9B 25*41            [12] 3338 	add	a,_T0_Routine_i_65536_170
      000F9D 50 D4            [24] 3339 	jnc	00115$
                                   3340 ;	Main.c:408: P3 = 0xff;
      000F9F 75 B0 FF         [24] 3341 	mov	_P3,#0xff
                                   3342 ;	Main.c:409: FLAG_D = 0;
      000FA2 E4               [12] 3343 	clr	a
      000FA3 F5*37            [12] 3344 	mov	_FLAG_D,a
      000FA5 F5*38            [12] 3345 	mov	(_FLAG_D + 1),a
      000FA7                       3346 00110$:
                                   3347 ;	Main.c:411: count = 0; // 计数清零
      000FA7 E4               [12] 3348 	clr	a
      000FA8 F5*3F            [12] 3349 	mov	_T0_Routine_count_65536_170,a
      000FAA F5*40            [12] 3350 	mov	(_T0_Routine_count_65536_170 + 1),a
      000FAC                       3351 00117$:
                                   3352 ;	Main.c:413: }
      000FAC D0 D0            [24] 3353 	pop	psw
      000FAE D0 00            [24] 3354 	pop	(0+0)
      000FB0 D0 01            [24] 3355 	pop	(0+1)
      000FB2 D0 02            [24] 3356 	pop	(0+2)
      000FB4 D0 03            [24] 3357 	pop	(0+3)
      000FB6 D0 04            [24] 3358 	pop	(0+4)
      000FB8 D0 05            [24] 3359 	pop	(0+5)
      000FBA D0 06            [24] 3360 	pop	(0+6)
      000FBC D0 07            [24] 3361 	pop	(0+7)
      000FBE D0 83            [24] 3362 	pop	dph
      000FC0 D0 82            [24] 3363 	pop	dpl
      000FC2 D0 F0            [24] 3364 	pop	b
      000FC4 D0 E0            [24] 3365 	pop	acc
      000FC6 D0*00            [24] 3366 	pop	bits
      000FC8 32               [24] 3367 	reti
                                   3368 	.area CSEG    (CODE)
                                   3369 	.area CONST   (CODE)
                                   3370 	.area CONST   (CODE)
      000000                       3371 ___str_0:
      000000 4C 3A 4C 57 48        3372 	.ascii "L:LWH"
      000005 00                    3373 	.db 0x00
                                   3374 	.area CSEG    (CODE)
                                   3375 	.area CONST   (CODE)
      000006                       3376 ___str_1:
      000006 43 3A 43 58 4C 20 26  3377 	.ascii "C:CXL & JM"
             20 4A 4D
      000010 00                    3378 	.db 0x00
                                   3379 	.area CSEG    (CODE)
                                   3380 	.area CONST   (CODE)
      000011                       3381 ___str_2:
      000011 20 20 20 20 20 20 20  3382 	.ascii "       "
      000018 00                    3383 	.db 0x00
                                   3384 	.area CSEG    (CODE)
                                   3385 	.area CONST   (CODE)
      000019                       3386 ___str_3:
      000019 4D 4F 44 45 3A 53     3387 	.ascii "MODE:S"
      00001F 00                    3388 	.db 0x00
                                   3389 	.area CSEG    (CODE)
                                   3390 	.area CONST   (CODE)
      000020                       3391 ___str_4:
      000020 50 44 3A              3392 	.ascii "PD:"
      000023 00                    3393 	.db 0x00
                                   3394 	.area CSEG    (CODE)
                                   3395 	.area CONST   (CODE)
      000024                       3396 ___str_5:
      000024 53 75 63 63 65 73 73  3397 	.ascii "Success"
      00002B 00                    3398 	.db 0x00
                                   3399 	.area CSEG    (CODE)
                                   3400 	.area CONST   (CODE)
      00002C                       3401 ___str_6:
      00002C 20 20 20 20 20 20 20  3402 	.ascii "              "
             20 20 20 20 20 20 20
      00003A 00                    3403 	.db 0x00
                                   3404 	.area CSEG    (CODE)
                                   3405 	.area CONST   (CODE)
      00003B                       3406 ___str_7:
      00003B 20 20 20 20 20        3407 	.ascii "     "
      000040 00                    3408 	.db 0x00
                                   3409 	.area CSEG    (CODE)
                                   3410 	.area CONST   (CODE)
      000041                       3411 ___str_8:
      000041 20                    3412 	.ascii " "
      000042 00                    3413 	.db 0x00
                                   3414 	.area CSEG    (CODE)
                                   3415 	.area CONST   (CODE)
      000043                       3416 ___str_9:
      000043 20 20                 3417 	.ascii "  "
      000045 00                    3418 	.db 0x00
                                   3419 	.area CSEG    (CODE)
                                   3420 	.area CONST   (CODE)
      000046                       3421 ___str_10:
      000046 4D 4F 44 45 3A 4D     3422 	.ascii "MODE:M"
      00004C 00                    3423 	.db 0x00
                                   3424 	.area CSEG    (CODE)
                                   3425 	.area CONST   (CODE)
      00004D                       3426 ___str_11:
      00004D 30 30 30 30 30        3427 	.ascii "00000"
      000052 00                    3428 	.db 0x00
                                   3429 	.area CSEG    (CODE)
                                   3430 	.area CONST   (CODE)
      000053                       3431 ___str_12:
      000053 30 30 30 30 2A        3432 	.ascii "0000*"
      000058 00                    3433 	.db 0x00
                                   3434 	.area CSEG    (CODE)
                                   3435 	.area CONST   (CODE)
      000059                       3436 ___str_13:
      000059 30 30 30 2A 2A        3437 	.ascii "000**"
      00005E 00                    3438 	.db 0x00
                                   3439 	.area CSEG    (CODE)
                                   3440 	.area CONST   (CODE)
      00005F                       3441 ___str_14:
      00005F 30 30 2A 2A 2A        3442 	.ascii "00***"
      000064 00                    3443 	.db 0x00
                                   3444 	.area CSEG    (CODE)
                                   3445 	.area CONST   (CODE)
      000065                       3446 ___str_15:
      000065 30 2A 2A 2A 2A        3447 	.ascii "0****"
      00006A 00                    3448 	.db 0x00
                                   3449 	.area CSEG    (CODE)
                                   3450 	.area CONST   (CODE)
      00006B                       3451 ___str_16:
      00006B 2A 2A 2A 2A 2A        3452 	.ascii "*****"
      000070 00                    3453 	.db 0x00
                                   3454 	.area CSEG    (CODE)
                                   3455 	.area CONST   (CODE)
      000071                       3456 ___str_17:
      000071 44 45 4C 20 50 44     3457 	.ascii "DEL PD"
      000077 00                    3458 	.db 0x00
                                   3459 	.area CSEG    (CODE)
                                   3460 	.area CONST   (CODE)
      000078                       3461 ___str_18:
      000078 52 45 53 20 50 44     3462 	.ascii "RES PD"
      00007E 00                    3463 	.db 0x00
                                   3464 	.area CSEG    (CODE)
                                   3465 	.area CONST   (CODE)
      00007F                       3466 ___str_19:
      00007F 4F 50 45 20 44 52     3467 	.ascii "OPE DR"
      000085 00                    3468 	.db 0x00
                                   3469 	.area CSEG    (CODE)
                                   3470 	.area CONST   (CODE)
      000086                       3471 ___str_20:
      000086 50 64 44 65 6C 20 4F  3472 	.ascii "PdDel OK"
             4B
      00008E 00                    3473 	.db 0x00
                                   3474 	.area CSEG    (CODE)
                                   3475 	.area CONST   (CODE)
      00008F                       3476 ___str_21:
      00008F 52 45 53 45 54 20 4F  3477 	.ascii "RESET OK"
             4B
      000097 00                    3478 	.db 0x00
                                   3479 	.area CSEG    (CODE)
                                   3480 	.area CONST   (CODE)
      000098                       3481 ___str_22:
      000098 44 4F 4F 52 3A        3482 	.ascii "DOOR:"
      00009D 00                    3483 	.db 0x00
                                   3484 	.area CSEG    (CODE)
                                   3485 	.area CONST   (CODE)
      00009E                       3486 ___str_23:
      00009E 4F 20                 3487 	.ascii "O "
      0000A0 00                    3488 	.db 0x00
                                   3489 	.area CSEG    (CODE)
                                   3490 	.area CONST   (CODE)
      0000A1                       3491 ___str_24:
      0000A1 43                    3492 	.ascii "C"
      0000A2 00                    3493 	.db 0x00
                                   3494 	.area CSEG    (CODE)
                                   3495 	.area CONST   (CODE)
      0000A3                       3496 ___str_25:
      0000A3 4D 4F 44 45 3A 45     3497 	.ascii "MODE:E"
      0000A9 00                    3498 	.db 0x00
                                   3499 	.area CSEG    (CODE)
                                   3500 	.area CONST   (CODE)
      0000AA                       3501 ___str_26:
      0000AA 30 30 30 30 30 30     3502 	.ascii "000000"
      0000B0 00                    3503 	.db 0x00
                                   3504 	.area CSEG    (CODE)
                                   3505 	.area CONST   (CODE)
      0000B1                       3506 ___str_27:
      0000B1 30 30 30 30 30 2A     3507 	.ascii "00000*"
      0000B7 00                    3508 	.db 0x00
                                   3509 	.area CSEG    (CODE)
                                   3510 	.area CONST   (CODE)
      0000B8                       3511 ___str_28:
      0000B8 30 30 30 30 2A 2A     3512 	.ascii "0000**"
      0000BE 00                    3513 	.db 0x00
                                   3514 	.area CSEG    (CODE)
                                   3515 	.area CONST   (CODE)
      0000BF                       3516 ___str_29:
      0000BF 30 30 30 2A 2A 2A     3517 	.ascii "000***"
      0000C5 00                    3518 	.db 0x00
                                   3519 	.area CSEG    (CODE)
                                   3520 	.area CONST   (CODE)
      0000C6                       3521 ___str_30:
      0000C6 30 30 2A 2A 2A 2A     3522 	.ascii "00****"
      0000CC 00                    3523 	.db 0x00
                                   3524 	.area CSEG    (CODE)
                                   3525 	.area CONST   (CODE)
      0000CD                       3526 ___str_31:
      0000CD 30 2A 2A 2A 2A 2A     3527 	.ascii "0*****"
      0000D3 00                    3528 	.db 0x00
                                   3529 	.area CSEG    (CODE)
                                   3530 	.area CONST   (CODE)
      0000D4                       3531 ___str_32:
      0000D4 2A 2A 2A 2A 2A 2A     3532 	.ascii "******"
      0000DA 00                    3533 	.db 0x00
                                   3534 	.area CSEG    (CODE)
                                   3535 	.area CONST   (CODE)
      0000DB                       3536 ___str_33:
      0000DB 4F                    3537 	.ascii "O"
      0000DC 00                    3538 	.db 0x00
                                   3539 	.area CSEG    (CODE)
                                   3540 	.area XINIT   (CODE)
                                   3541 	.area CABS    (ABS,CODE)
